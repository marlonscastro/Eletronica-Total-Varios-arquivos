CCS PCM C Compiler, Version 4.114, 93462627               18-jul-15 12:40

               Filename: D:\SkyDrive\Eletronica\PROJETOS PIC CCS\PAINEL LED 7X32 ONIBUS\MoveLed\main.lst

               ROM used: 601 words (7%)
                         Largest free fragment is 2048
               RAM used: 117 (32%) at main() level
                         129 (35%) worst case
               Stack:    3 worst case (1 in main + 2 for interrupts)

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   13C
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   030
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   27,W
0028:  MOVWF  7B
0029:  MOVF   20,W
002A:  MOVWF  0A
002B:  SWAPF  21,W
002C:  MOVWF  03
002D:  SWAPF  7F,F
002E:  SWAPF  7F,W
002F:  RETFIE
0030:  BCF    0A.3
0031:  BCF    0A.4
0032:  GOTO   046
.................... #include <16F876.h> 
.................... //////// Standard Header file for the PIC16F876 device //////////////// 
.................... #device PIC16F876 
.................... #list 
....................  
.................... #device adc=10 
.................... #FUSES NOWDT, HS, NOPUT, NOBROWNOUT, NOLVP, NOCPD, NOWRT, NODEBUG, NOPROTECT 
.................... #use delay(clock=16000000) 
*
0033:  MOVLW  03
0034:  BSF    03.5
0035:  BSF    03.6
0036:  SUBWF  1B,F
0037:  BTFSS  03.0
0038:  GOTO   043
0039:  MOVLW  9B
003A:  MOVWF  04
003B:  BSF    03.7
003C:  MOVF   00,W
003D:  BTFSC  03.2
003E:  GOTO   043
003F:  GOTO   041
0040:  NOP
0041:  DECFSZ 00,F
0042:  GOTO   040
0043:  BCF    03.5
0044:  BCF    03.6
0045:  RETURN
.................... #define LED_STATUS   pin_a1 
.................... #include "driverLD7x32.c" 
.................... #include "driverLD7x32.h" 
....................  
.................... // PROTÓTIPOS DAS FUNÇÕES 
.................... void write_col(char var);              // OK 
.................... void varre_coluna();                   // OK 
.................... void clearscreen();                    // OK 
.................... void put_led(int x, int y, int COLOR); // OK 
.................... void put_char(int x, char cvar);       // OK 
.................... void putstr(int x, char* text);        // OK 
.................... void mydelay(long time_ms);            // OK 
....................  
.................... #define DATA_164     pin_c4 
.................... #define SCK_164      pin_c3 
.................... #define LATCH_595    pin_c2 
.................... #define DATA_595     pin_c6 
.................... #define SCK_595      pin_c5 
.................... #define ON           1 
.................... #define OFF          0 
....................  
....................  
....................  
.................... BYTE const font5x8[128][5] = { 
....................   0x00,0x00,0x00,0x00,0x00,   // 20 space  
....................   0x00,0x00,0x5f,0x00,0x00,   // 21 ! 
....................   0x00,0x07,0x00,0x07,0x00,   // 22 " 
....................   0x14,0x7f,0x14,0x7f,0x14,   // 23 # 
....................   0x24,0x2a,0x7f,0x2a,0x12,   // 24 $ 
....................   0x23,0x13,0x08,0x64,0x62,   // 25 % 
....................   0x36,0x49,0x55,0x22,0x50,   // 26 & 
....................   0x00,0x05,0x03,0x00,0x00,   // 27 ' 
....................   0x00,0x1c,0x22,0x41,0x00,   // 28 ( 
....................   0x00,0x41,0x22,0x1c,0x00,   // 29 ) 
....................   0x14,0x08,0x3e,0x08,0x14,   // 2a * 
....................   0x08,0x08,0x3e,0x08,0x08,   // 2b + 
....................   0x00,0x50,0x30,0x00,0x00,   // 2c , 
....................   0x08,0x08,0x08,0x08,0x08,   // 2d - 
....................   0x00,0x60,0x60,0x00,0x00,   // 2e . 
....................   0x20,0x10,0x08,0x04,0x02,   // 2f / 
....................   0x3e,0x51,0x49,0x45,0x3e,   // 30 0 
....................   0x00,0x42,0x7f,0x40,0x00,   // 31 1 
....................   0x42,0x61,0x51,0x49,0x46,   // 32 2 
....................   0x21,0x41,0x45,0x4b,0x31,   // 33 3 
....................   0x18,0x14,0x12,0x7f,0x10,   // 34 4 
....................   0x27,0x45,0x45,0x45,0x39,   // 35 5 
....................   0x3c,0x4a,0x49,0x49,0x30,   // 36 6 
....................   0x01,0x71,0x09,0x05,0x03,   // 37 7 
....................   0x36,0x49,0x49,0x49,0x36,   // 38 8 
....................   0x06,0x49,0x49,0x29,0x1e,   // 39 9 
....................   0x00,0x36,0x36,0x00,0x00,   // 3a : 
....................   0x00,0x56,0x36,0x00,0x00,   // 3b ; 
....................   0x08,0x14,0x22,0x41,0x00,   // 3c < 
....................   0x14,0x14,0x14,0x14,0x14,   // 3d = 
....................   0x00,0x41,0x22,0x14,0x08,   // 3e > 
....................   0x02,0x01,0x51,0x09,0x06,   // 3f ? 
....................   0x32,0x49,0x79,0x41,0x3e,   // 40 @ 
....................   0x7e,0x11,0x11,0x11,0x7e,   // 41 A 
....................   0x7f,0x49,0x49,0x49,0x36,   // 42 B 
....................   0x3e,0x41,0x41,0x41,0x22,   // 43 C 
....................   0x7f,0x41,0x41,0x22,0x1c,   // 44 D 
....................   0x7f,0x49,0x49,0x49,0x41,   // 45 E 
....................   0x7f,0x09,0x09,0x09,0x01,   // 46 F 
....................   0x3e,0x41,0x49,0x49,0x7a,   // 47 G 
....................   0x7f,0x08,0x08,0x08,0x7f,   // 48 H 
....................   0x00,0x41,0x7f,0x41,0x00,   // 49 I 
....................   0x20,0x40,0x41,0x3f,0x01,   // 4a J 
....................   0x7f,0x08,0x14,0x22,0x41,   // 4b K 
....................   0x7f,0x40,0x40,0x40,0x40,   // 4c L 
....................   0x7f,0x02,0x0c,0x02,0x7f,   // 4d M 
....................   0x7f,0x04,0x08,0x10,0x7f,   // 4e N 
....................   0x3e,0x41,0x41,0x41,0x3e,   // 4f O 
....................   0x7f,0x09,0x09,0x09,0x06,   // 50 P 
....................   0x3e,0x41,0x51,0x21,0x5e,   // 51 Q 
....................   0x7f,0x09,0x19,0x29,0x46,   // 52 R 
....................   0x46,0x49,0x49,0x49,0x31,   // 53 S 
....................   0x01,0x01,0x7f,0x01,0x01,   // 54 T 
....................   0x3f,0x40,0x40,0x40,0x3f,   // 55 U 
....................   0x1f,0x20,0x40,0x20,0x1f,   // 56 V 
....................   0x3f,0x40,0x38,0x40,0x3f,   // 57 W 
....................   0x63,0x14,0x08,0x14,0x63,   // 58 X 
....................   0x07,0x08,0x70,0x08,0x07,   // 59 Y 
....................   0x61,0x51,0x49,0x45,0x43,   // 5a Z 
....................   0x00,0x7f,0x41,0x41,0x00,   // 5b [ 
....................   0x02,0x04,0x08,0x10,0x20,   // 5c 
....................   0x00,0x41,0x41,0x7f,0x00,   // 5d 
....................   0x04,0x02,0x01,0x02,0x04,   // 5e 
....................   0x40,0x40,0x40,0x40,0x40,   // 5f 
....................   0x00,0x01,0x02,0x04,0x00,   // 60 
....................   0x20,0x54,0x54,0x54,0x78,   // 61 a 
....................   0x7f,0x48,0x44,0x44,0x38,   // 62 b 
....................   0x38,0x44,0x44,0x44,0x20,   // 63 c 
....................   0x38,0x44,0x44,0x48,0x7f,   // 64 d 
....................   0x38,0x54,0x54,0x54,0x18,   // 65 e 
....................   0x08,0x7e,0x09,0x01,0x02,   // 66 f 
....................   0x0c,0x52,0x52,0x52,0x3e,   // 67 g 
....................   0x7f,0x08,0x04,0x04,0x78,   // 68 h 
....................   0x00,0x44,0x7d,0x40,0x00,   // 69 i 
....................   0x20,0x40,0x44,0x3d,0x00,   // 6a j 
....................   0x7f,0x10,0x28,0x44,0x00,   // 6b k 
....................   0x00,0x41,0x7f,0x40,0x00,   // 6c l 
....................   0x7c,0x04,0x18,0x04,0x78,   // 6d m 
....................   0x7c,0x08,0x04,0x04,0x78,   // 6e n 
....................   0x38,0x44,0x44,0x44,0x38,   // 6f o 
....................   0x7c,0x14,0x14,0x14,0x08,   // 70 p 
....................   0x08,0x14,0x14,0x18,0x7c,   // 71 q 
....................   0x7c,0x08,0x04,0x04,0x08,   // 72 r 
....................   0x48,0x54,0x54,0x54,0x20,   // 73 s 
....................   0x04,0x3f,0x44,0x40,0x20,   // 74 t 
....................   0x3c,0x40,0x40,0x20,0x7c,   // 75 u 
....................   0x1c,0x20,0x40,0x20,0x1c,   // 76 v 
....................   0x3c,0x40,0x30,0x40,0x3c,   // 77 w 
....................   0x44,0x28,0x10,0x28,0x44,   // 78 x 
....................   0x0c,0x50,0x50,0x50,0x3c,   // 79 y 
....................   0x44,0x64,0x54,0x4c,0x44,   // 7a z 
....................   0x00,0x08,0x36,0x41,0x00,   // 7b 
....................   0x00,0x00,0x7f,0x00,0x00,   // 7c 
....................   0x00,0x41,0x36,0x08,0x00,   // 7d 
....................   0x10,0x08,0x08,0x10,0x08,   // 7e 
....................   0x78,0x46,0x41,0x46,0x78    // 7f 
.................... }; 
....................  
....................  
.................... char MAT[96] = { 
....................                 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
....................                 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
....................                 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
....................                 0x00,0x00,0x00,0x00,0x00,0x3b,0xff,0xf0, 
....................                 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
....................                 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
....................                 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
....................                 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,                 
....................                 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
....................                 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
....................                 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 
....................                 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 
....................                }; 
*
014A:  BCF    03.5
014B:  BSF    03.6
014C:  CLRF   10
014D:  CLRF   11
014E:  CLRF   12
014F:  CLRF   13
0150:  CLRF   14
0151:  CLRF   15
0152:  CLRF   16
0153:  CLRF   17
0154:  CLRF   18
0155:  CLRF   19
0156:  CLRF   1A
0157:  CLRF   1B
0158:  CLRF   1C
0159:  CLRF   1D
015A:  CLRF   1E
015B:  CLRF   1F
015C:  CLRF   20
015D:  CLRF   21
015E:  CLRF   22
015F:  CLRF   23
0160:  CLRF   24
0161:  CLRF   25
0162:  CLRF   26
0163:  CLRF   27
0164:  CLRF   28
0165:  CLRF   29
0166:  CLRF   2A
0167:  CLRF   2B
0168:  CLRF   2C
0169:  MOVLW  3B
016A:  MOVWF  2D
016B:  MOVLW  FF
016C:  MOVWF  2E
016D:  MOVLW  F0
016E:  MOVWF  2F
016F:  CLRF   30
0170:  CLRF   31
0171:  CLRF   32
0172:  CLRF   33
0173:  CLRF   34
0174:  CLRF   35
0175:  CLRF   36
0176:  CLRF   37
0177:  CLRF   38
0178:  CLRF   39
0179:  CLRF   3A
017A:  CLRF   3B
017B:  CLRF   3C
017C:  CLRF   3D
017D:  CLRF   3E
017E:  CLRF   3F
017F:  CLRF   40
0180:  CLRF   41
0181:  CLRF   42
0182:  CLRF   43
0183:  CLRF   44
0184:  CLRF   45
0185:  CLRF   46
0186:  CLRF   47
0187:  CLRF   48
0188:  CLRF   49
0189:  CLRF   4A
018A:  CLRF   4B
018B:  CLRF   4C
018C:  CLRF   4D
018D:  CLRF   4E
018E:  CLRF   4F
018F:  CLRF   50
0190:  CLRF   51
0191:  CLRF   52
0192:  CLRF   53
0193:  CLRF   54
0194:  CLRF   55
0195:  CLRF   56
0196:  CLRF   57
0197:  CLRF   58
0198:  CLRF   59
0199:  CLRF   5A
019A:  CLRF   5B
019B:  CLRF   5C
019C:  CLRF   5D
019D:  CLRF   5E
019E:  CLRF   5F
019F:  CLRF   60
01A0:  CLRF   61
01A1:  CLRF   62
01A2:  CLRF   63
01A3:  CLRF   64
01A4:  CLRF   65
01A5:  CLRF   66
01A6:  CLRF   67
01A7:  CLRF   68
01A8:  CLRF   69
01A9:  CLRF   6A
01AA:  CLRF   6B
01AB:  CLRF   6C
01AC:  CLRF   6D
01AD:  CLRF   6E
01AE:  CLRF   6F
....................                 
....................  
....................  
....................  
.................... void put_led(int x, int y, int COLOR){ 
....................    if(COLOR == ON) 
*
00F8:  BSF    03.5
00F9:  BSF    03.6
00FA:  DECFSZ 14,W
00FB:  GOTO   10D
....................       bit_set(MAT[x], y); 
00FC:  MOVLW  10
00FD:  ADDWF  12,W
00FE:  MOVWF  04
00FF:  BSF    03.7
0100:  MOVLW  01
0101:  MOVWF  77
0102:  MOVF   13,W
0103:  MOVWF  78
0104:  BTFSC  03.2
0105:  GOTO   10A
0106:  BCF    03.0
0107:  RLF    77,F
0108:  DECFSZ 78,F
0109:  GOTO   106
010A:  MOVF   77,W
010B:  IORWF  00,F
....................    else 
010C:  GOTO   11E
....................       bit_clear(MAT[x], y);       
010D:  MOVLW  10
010E:  ADDWF  12,W
010F:  MOVWF  04
0110:  BSF    03.7
0111:  MOVLW  01
0112:  MOVWF  77
0113:  MOVF   13,W
0114:  MOVWF  78
0115:  BTFSC  03.2
0116:  GOTO   11B
0117:  BCF    03.0
0118:  RLF    77,F
0119:  DECFSZ 78,F
011A:  GOTO   117
011B:  MOVF   77,W
011C:  XORLW  FF
011D:  ANDWF  00,F
.................... } 
011E:  BCF    03.5
011F:  BCF    03.6
0120:  RETURN
....................  
.................... // Faz a varredura das colunas uma a uma da 1a a 32a; 
.................... void varre_coluna(){ 
*
0051:  BSF    03.5
0052:  BSF    03.6
0053:  CLRF   19
0054:  CLRF   18
0055:  CLRF   17
0056:  MOVLW  01
0057:  MOVWF  16
....................    int i; 
....................    int32 chr = 1; 
....................    for(i=0;i<32;i++){ 
0058:  CLRF   15
0059:  MOVF   15,W
005A:  SUBLW  1F
005B:  BTFSS  03.0
005C:  GOTO   0EC
....................       write_col(MAT[i]); 
005D:  MOVLW  10
005E:  ADDWF  15,W
005F:  MOVWF  04
0060:  BSF    03.7
0061:  MOVF   00,W
0062:  MOVWF  1A
0063:  MOVF   1A,W
0064:  MOVWF  1B
....................       output_low(SCK_164); 
*
00A5:  BCF    29.3
00A6:  MOVF   29,W
00A7:  BSF    03.5
00A8:  MOVWF  07
00A9:  BCF    03.5
00AA:  BCF    07.3
....................       if((chr&0x01) == 0) output_low(DATA_164); 
00AB:  BSF    03.5
00AC:  BSF    03.6
00AD:  MOVF   16,W
00AE:  ANDLW  01
00AF:  MOVWF  1A
00B0:  CLRF   1B
00B1:  CLRF   1C
00B2:  CLRF   1D
00B3:  MOVF   1A,F
00B4:  BTFSS  03.2
00B5:  GOTO   0CA
00B6:  MOVF   1B,F
00B7:  BTFSS  03.2
00B8:  GOTO   0CA
00B9:  MOVF   1C,F
00BA:  BTFSS  03.2
00BB:  GOTO   0CA
00BC:  MOVF   1D,F
00BD:  BTFSS  03.2
00BE:  GOTO   0CA
00BF:  BCF    03.5
00C0:  BCF    03.6
00C1:  BCF    29.4
00C2:  MOVF   29,W
00C3:  BSF    03.5
00C4:  MOVWF  07
00C5:  BCF    03.5
00C6:  BCF    07.4
....................       else output_high(DATA_164); 
00C7:  GOTO   0D2
00C8:  BSF    03.5
00C9:  BSF    03.6
00CA:  BCF    03.5
00CB:  BCF    03.6
00CC:  BCF    29.4
00CD:  MOVF   29,W
00CE:  BSF    03.5
00CF:  MOVWF  07
00D0:  BCF    03.5
00D1:  BSF    07.4
....................       output_high(SCK_164); 
00D2:  BCF    29.3
00D3:  MOVF   29,W
00D4:  BSF    03.5
00D5:  MOVWF  07
00D6:  BCF    03.5
00D7:  BSF    07.3
....................       chr=chr>>1; 
00D8:  BCF    03.0
00D9:  BSF    03.5
00DA:  BSF    03.6
00DB:  RRF    19,F
00DC:  RRF    18,F
00DD:  RRF    17,F
00DE:  RRF    16,F
....................       delay_us(500); 
00DF:  MOVLW  02
00E0:  MOVWF  1A
00E1:  MOVLW  F9
00E2:  MOVWF  1B
00E3:  BCF    03.5
00E4:  BCF    03.6
00E5:  CALL   033
00E6:  BSF    03.5
00E7:  BSF    03.6
00E8:  DECFSZ 1A,F
00E9:  GOTO   0E1
....................    } 
00EA:  INCF   15,F
00EB:  GOTO   059
....................    output_low(DATA_164); 
00EC:  BCF    03.5
00ED:  BCF    03.6
00EE:  BCF    29.4
00EF:  MOVF   29,W
00F0:  BSF    03.5
00F1:  MOVWF  07
00F2:  BCF    03.5
00F3:  BCF    07.4
.................... } 
....................  
.................... // Função que escreve os dados da Matriz MAT[] na coluna especificada 
.................... void write_col(char colData){ 
....................    int i; 
....................    for(i=0;i<8;i++){ 
*
0065:  CLRF   1C
0066:  MOVF   1C,W
0067:  SUBLW  07
0068:  BTFSS  03.0
0069:  GOTO   097
....................       output_low(SCK_595); 
006A:  BCF    03.5
006B:  BCF    03.6
006C:  BCF    29.5
006D:  MOVF   29,W
006E:  BSF    03.5
006F:  MOVWF  07
0070:  BCF    03.5
0071:  BCF    07.5
....................       if((colData&0x01) == 0) output_low(DATA_595); 
0072:  BSF    03.5
0073:  BSF    03.6
0074:  MOVF   1B,W
0075:  ANDLW  01
0076:  BTFSS  03.2
0077:  GOTO   083
0078:  BCF    03.5
0079:  BCF    03.6
007A:  BCF    29.6
007B:  MOVF   29,W
007C:  BSF    03.5
007D:  MOVWF  07
007E:  BCF    03.5
007F:  BCF    07.6
....................       else output_high(DATA_595); 
0080:  GOTO   08B
0081:  BSF    03.5
0082:  BSF    03.6
0083:  BCF    03.5
0084:  BCF    03.6
0085:  BCF    29.6
0086:  MOVF   29,W
0087:  BSF    03.5
0088:  MOVWF  07
0089:  BCF    03.5
008A:  BSF    07.6
....................       output_high(SCK_595); 
008B:  BCF    29.5
008C:  MOVF   29,W
008D:  BSF    03.5
008E:  MOVWF  07
008F:  BCF    03.5
0090:  BSF    07.5
....................       colData=colData>>1; 
0091:  BCF    03.0
0092:  BSF    03.5
0093:  BSF    03.6
0094:  RRF    1B,F
....................    } 
0095:  INCF   1C,F
0096:  GOTO   066
....................    output_low(LATCH_595);   
0097:  BCF    03.5
0098:  BCF    03.6
0099:  BCF    29.2
009A:  MOVF   29,W
009B:  BSF    03.5
009C:  MOVWF  07
009D:  BCF    03.5
009E:  BCF    07.2
....................    output_high(LATCH_595); 
009F:  BCF    29.2
00A0:  MOVF   29,W
00A1:  BSF    03.5
00A2:  MOVWF  07
00A3:  BCF    03.5
00A4:  BSF    07.2
.................... } 
....................  
.................... void clearscreen(){ 
....................    int i; 
....................    for(i=0;i<96;i++) 
....................       MAT[i] = 0x00; 
.................... } 
....................  
.................... void put_char(int x, char cvar){ 
....................   int i; 
....................   char c; 
....................   if ((cvar<0x20) || (cvar>0x7F)) return; 
....................   for (i=0;i<5;i++){ 
....................     c=font5x8[((cvar&0xff)-0x20)][i]; 
....................     if((c!=0x00) || (cvar==0x20)){      
....................        MAT[x]=c; 
....................        x++; 
....................     } 
....................   } 
....................   MAT[x]=0x00; 
.................... } 
....................  
.................... void putstr(int x, char* text){ 
....................    int i = 0; 
....................    while (text[i]!=0){    
....................       put_char(x+(i*6),text[i]); 
....................       i++;                
....................    } 
.................... } 
....................  
.................... void mydelay(long time_ms){ 
....................    delay_ms(time_ms/1000*60); 
.................... } 
....................  
....................  
....................  
.................... int tempo; 
.................... int x_obj = 3, y_obj = 3; 
....................  
.................... #int_TIMER0 
.................... void  TIMER0_isr(void){ 
....................    tempo++; 
*
0046:  INCF   2A,F
....................    if(tempo == 20){ 
0047:  MOVF   2A,W
0048:  SUBLW  14
0049:  BTFSS  03.2
004A:  GOTO   051
....................       tempo=0; 
004B:  CLRF   2A
....................       output_toggle(LED_STATUS); 
004C:  BSF    03.5
004D:  BCF    05.1
004E:  MOVLW  02
004F:  BCF    03.5
0050:  XORWF  05,F
....................    } 
....................    varre_coluna();     
.................... } 
....................  
*
00F4:  BCF    0B.2
00F5:  BCF    0A.3
00F6:  BCF    0A.4
00F7:  GOTO   01D
.................... void main(){ 
*
013C:  CLRF   04
013D:  BCF    03.7
013E:  MOVLW  1F
013F:  ANDWF  03,F
0140:  MOVLW  FF
0141:  MOVWF  29
0142:  MOVLW  03
0143:  MOVWF  2B
0144:  MOVWF  2C
0145:  BSF    03.5
0146:  BSF    1F.0
0147:  BSF    1F.1
0148:  BSF    1F.2
0149:  BCF    1F.3
....................    int i; 
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_64|RTCC_8_bit); 
*
01AF:  BSF    03.5
01B0:  BCF    03.6
01B1:  MOVF   01,W
01B2:  ANDLW  C0
01B3:  IORLW  05
01B4:  MOVWF  01
....................    setup_adc_ports(NO_ANALOGS); 
01B5:  BSF    1F.0
01B6:  BSF    1F.1
01B7:  BSF    1F.2
01B8:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
01B9:  BCF    03.5
01BA:  BCF    1F.0
....................    enable_interrupts(INT_TIMER0); 
01BB:  BSF    0B.5
....................    enable_interrupts(GLOBAL); 
01BC:  MOVLW  C0
01BD:  IORWF  0B,F
....................  
....................    /* INICIO DO GAME R-TYPE Led */ 
....................    bit_set(MAT[x_obj], y_obj);       
01BE:  MOVLW  10
01BF:  ADDWF  2B,W
01C0:  MOVWF  04
01C1:  BSF    03.7
01C2:  MOVLW  01
01C3:  MOVWF  77
01C4:  MOVF   2C,W
01C5:  MOVWF  78
01C6:  BTFSC  03.2
01C7:  GOTO   1CC
01C8:  BCF    03.0
01C9:  RLF    77,F
01CA:  DECFSZ 78,F
01CB:  GOTO   1C8
01CC:  MOVF   77,W
01CD:  IORWF  00,F
....................    bit_set(MAT[x_obj-1], y_obj);    
01CE:  MOVLW  01
01CF:  SUBWF  2B,W
01D0:  ADDLW  10
01D1:  MOVWF  04
01D2:  BSF    03.7
01D3:  MOVLW  01
01D4:  MOVWF  77
01D5:  MOVF   2C,W
01D6:  MOVWF  78
01D7:  BTFSC  03.2
01D8:  GOTO   1DD
01D9:  BCF    03.0
01DA:  RLF    77,F
01DB:  DECFSZ 78,F
01DC:  GOTO   1D9
01DD:  MOVF   77,W
01DE:  IORWF  00,F
....................    while(true){ 
....................       for(i=x_obj+1;i<32;i++){ 
01DF:  MOVLW  01
01E0:  ADDWF  2B,W
01E1:  BSF    03.5
01E2:  BSF    03.6
01E3:  MOVWF  10
01E4:  MOVF   10,W
01E5:  SUBLW  1F
01E6:  BTFSS  03.0
01E7:  GOTO   255
....................          put_led(i, y_obj, ON); 
01E8:  MOVF   10,W
01E9:  MOVWF  12
01EA:  BCF    03.5
01EB:  BCF    03.6
01EC:  MOVF   2C,W
01ED:  BSF    03.5
01EE:  BSF    03.6
01EF:  MOVWF  13
01F0:  MOVLW  01
01F1:  MOVWF  14
01F2:  BCF    03.5
01F3:  BCF    03.6
01F4:  CALL   0F8
....................          if(i>(x_obj+1)) 
01F5:  MOVLW  01
01F6:  ADDWF  2B,W
01F7:  BSF    03.5
01F8:  BSF    03.6
01F9:  SUBWF  10,W
01FA:  BTFSC  03.2
01FB:  GOTO   20E
01FC:  BTFSS  03.0
01FD:  GOTO   20E
....................             put_led((i-1), y_obj, OFF);                
01FE:  MOVLW  01
01FF:  SUBWF  10,W
0200:  MOVWF  11
0201:  MOVWF  12
0202:  BCF    03.5
0203:  BCF    03.6
0204:  MOVF   2C,W
0205:  BSF    03.5
0206:  BSF    03.6
0207:  MOVWF  13
0208:  CLRF   14
0209:  BCF    03.5
020A:  BCF    03.6
020B:  CALL   0F8
020C:  BSF    03.5
020D:  BSF    03.6
....................          delay_us(400); 
020E:  MOVLW  02
020F:  MOVWF  11
0210:  BCF    03.5
0211:  BCF    03.6
0212:  CLRF   28
0213:  BTFSC  0B.7
0214:  BSF    28.7
0215:  BCF    0B.7
0216:  MOVLW  C7
0217:  BSF    03.5
0218:  BSF    03.6
0219:  MOVWF  1B
021A:  BCF    03.5
021B:  BCF    03.6
021C:  CALL   033
021D:  BTFSC  28.7
021E:  BSF    0B.7
021F:  BSF    03.5
0220:  BSF    03.6
0221:  DECFSZ 11,F
0222:  GOTO   210
....................          // Piscar Cauda : Chamas da nave 
....................          if((i%3) == 0){ 
0223:  MOVF   10,W
0224:  MOVWF  11
0225:  MOVLW  03
0226:  MOVWF  12
0227:  BCF    03.5
0228:  BCF    03.6
0229:  GOTO   121
022A:  MOVF   77,F
022B:  BTFSS  03.2
022C:  GOTO   240
....................             bit_clear(MAT[x_obj-1], y_obj);             
022D:  MOVLW  01
022E:  SUBWF  2B,W
022F:  ADDLW  10
0230:  MOVWF  04
0231:  BSF    03.7
0232:  MOVLW  01
0233:  MOVWF  77
0234:  MOVF   2C,W
0235:  MOVWF  78
0236:  BTFSC  03.2
0237:  GOTO   23C
0238:  BCF    03.0
0239:  RLF    77,F
023A:  DECFSZ 78,F
023B:  GOTO   238
023C:  MOVF   77,W
023D:  XORLW  FF
023E:  ANDWF  00,F
....................          } 
....................          else                  
023F:  GOTO   251
....................             bit_set(MAT[x_obj-1], y_obj); 
0240:  MOVLW  01
0241:  SUBWF  2B,W
0242:  ADDLW  10
0243:  MOVWF  04
0244:  BSF    03.7
0245:  MOVLW  01
0246:  MOVWF  77
0247:  MOVF   2C,W
0248:  MOVWF  78
0249:  BTFSC  03.2
024A:  GOTO   24F
024B:  BCF    03.0
024C:  RLF    77,F
024D:  DECFSZ 78,F
024E:  GOTO   24B
024F:  MOVF   77,W
0250:  IORWF  00,F
....................       } 
0251:  BSF    03.5
0252:  BSF    03.6
0253:  INCF   10,F
0254:  GOTO   1E4
....................    } 
0255:  BCF    03.5
0256:  BCF    03.6
0257:  GOTO   1DF
.................... } 
0258:  SLEEP

Configuration Fuses:
   Word  1: 3D3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
