CCS PCM C Compiler, Version 4.114, 93483988               27-mar-14 20:05

               Filename: H:\LCD 6610 NOKIA\main.lst

               ROM used: 1995 words (49%)
                         Largest free fragment is 2048
               RAM used: 18 (7%) at main() level
                         54 (21%) worst case
               Stack:    6 locations

*
0000:  MOVLW  07
0001:  MOVWF  0A
0002:  GOTO   763
0003:  NOP
.................... #include <16F688.h> 
.................... //////// Standard Header file for the PIC16F688 device //////////////// 
.................... #device PIC16F688 
.................... #list 
....................  
.................... #device adc=10 
.................... #FUSES NOWDT, INTRC_IO, NOPUT, MCLR, NOPROTECT, NOCPD, NOBROWNOUT, NOIESO, NOFCMEN 
.................... #use delay(clock=4000000) 
*
01FC:  MOVLW  32
01FD:  MOVWF  04
01FE:  BCF    03.7
01FF:  MOVF   00,W
0200:  BTFSC  03.2
0201:  GOTO   210
0202:  MOVLW  01
0203:  MOVWF  21
0204:  CLRF   20
0205:  DECFSZ 20,F
0206:  GOTO   205
0207:  DECFSZ 21,F
0208:  GOTO   204
0209:  MOVLW  4A
020A:  MOVWF  20
020B:  DECFSZ 20,F
020C:  GOTO   20B
020D:  GOTO   20E
020E:  DECFSZ 00,F
020F:  GOTO   202
0210:  RETURN
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C4,rcv=PIN_C5,bits=8,stream=PORT1) 
....................  
.................... #include "PCF8833.c" 
.................... //pcf8833.c 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... ////      GFX driver for Nokia 6100 color LCD screen                        //// 
.................... ////      Graphic Controler =  Philips PCF8833                              //// 
.................... ////      Res : 132 x 132 x 65K colors (real is 4k colors)                  //// 
.................... ///       In this driver i use only 256 couleur , it's alot faster          //// 
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... ////  Enter here the Pin's you want use for control the screen              //// 
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #define  glcd_res            PIN_C0 
.................... #define  glcd_sdata          PIN_C1 
.................... #define  glcd_sclk           PIN_C2 
.................... #define  glcd_cs             PIN_C3 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... ////  Enter here the delay for init ,write_data and write command           //// 
.................... ////  att1 : Delay in  µSec for the Init routine                            //// 
.................... ////  att2 : Delay in   nanoseconde / 100 for the glcd_write_command,       //// 
.................... ////                     glcd_write_data et glcd_write_dorc routines        //// 
.................... ////         At 40Mhz att2 = 10 represent 1µSec                             //// 
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #define  att1           1 
.................... #define  att2           8 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #define  SCREEN_COLOR   BLACK 
.................... #define  USE_GRFCN 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... ////  Screen limit                                                          //// 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... #define  GCLCDX         131 
.................... #define  GCLCDY         131 
.................... #define  X_START        0 
.................... #define  Y_START        0 
.................... #define  X_END          GCLCDX 
.................... #define  Y_END          GCLCDY 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... ////  The PCF8833 Commands                                                  //// 
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #define  LCD_NOP        0x00 
.................... #define  SOFT_RESET     0x01 
.................... #define  COLOR_8_BIT    0x02 
.................... #define  COLOR_16_BIT   0x05 
.................... #define  BOOSTER_ON     0x03 
.................... #define  BOOSTER_OFF    0x02 
.................... #define  SLEEP_OUT      0x11 
.................... #define  SLEEP_IN       0x10 
.................... #define  DISPLAY_ON     0x29 
.................... #define  DISPLAY_OFF    0x28 
.................... #define  PIXELS_OFF     0x22 
.................... #define  MEM_CONTROL    0x36 
.................... #define  COLMOD         0x3A 
.................... #define  SETCON         0x25 
.................... #define  ADDRX          0x2A 
.................... #define  ADDRY          0x2B 
.................... #define  MEMWRITE       0x2C 
.................... #define  RGBSET         0x2D 
.................... #define  NORMAL         0x20 
.................... #define  INVERT         0x21 
....................  
.................... #define  MEM_RGB        0x08 // 00001000    "0": is RGB, "1": is for BGR 
.................... #define  MEM_LAO        0x10 // 00010000    "0":up to down, "1":down to up 
.................... #define  MEM_VW         0x20 // 00100000    "0":write in X direction 
....................                              //             "1":write in Y direction 
.................... #define  MEM_MX         0x40 // 01000000    "0":normal, "1":miroir in X 
.................... #define  MEM_MY         0x80 // 10000000    "0":normal, "1":miroir in Y 
....................                              // Valeur utilisé ici = 0b11000000 
....................                              //   for   RGB            ----0--- 
....................                              //   up to down           ---0---- 
....................                              //   X direction          --0----- 
....................                              //   Mirror X             -1------ 
....................                              //   Mirror Y             1------- 
....................  
.................... #ifndef  ON 
.................... #define  ON           1 
.................... #endif 
....................  
.................... #ifndef  OFF 
.................... #define  OFF          0 
.................... #endif 
....................  
.................... #ifndef  YES 
.................... #define  YES          1 
.................... #endif 
....................  
.................... #ifndef  NO 
.................... #define  NO           0 
.................... #endif 
....................  
....................  
.................... #define  RGB(r,g,b)     ((r & 0xE0) | ((g & 0xE0) >> 3) | (b >> 6)) 
.................... #define  NONE           RGB(0x00, 0x20, 0x00)  // == transparent, one green less 
....................  
....................  
.................... #define BLUE        0x03 
.................... #define YELLOW      0xFC 
.................... #define RED         0XE0 
.................... #define GREEN       0X1C 
.................... #define BLACK       0X00 
.................... #define WHITE       0XFF 
.................... #define BRIGHTGREEN 0X3D 
.................... #define DARKGREEN   0X14 
.................... #define DARKRED     0XA0 
.................... #define DARKBLUE    0X02 
.................... #define BRIGHTBLUE  0X1F 
.................... #define ORANGE      0XF8 
....................  
.................... #byte    SSPCON1  =     0xFC6 
.................... #bit     SSPEN    =     SSPCON1.5 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                        //// 
.................... ////                           The Functions                                //// 
.................... ////                                                                        //// 
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... void glcd_init(char contrast); 
.................... void glcd_off(void); 
.................... void glcd_write_command(char byteforglcd_command); 
.................... void glcd_write_data(char byteforglcd_data); 
.................... void glcd_write_dorc(char byteforglcd); 
.................... void glcd_cls(char color); 
.................... void glcd_setarea(char startx, char endx, char starty, char endy); 
.................... void glcd_contrast(char contrast); 
.................... void glcd_img(char x, char y); 
.................... void glcd_anim(char x, char y, int8 frame, int16 wait); 
.................... void glcd_font(void); 
.................... //int glcd_putc(int16 c); 
.................... void glcd_newline(void); 
.................... void glcd_gotoxy(char x, char y); 
.................... void glcd_fillscreen(char x1, char y1, char x2, char y2,char color); 
.................... void glcd_pixel(char x, char y, char color); 
.................... void glcd_line(char x1, char y1, char x2, char y2, char couleur); 
.................... void glcd_bar(char x1, char y1, char x2, char y2, char width, char color); 
.................... void glcd_rect(char x1, char y1, char x2, char y2, char width, int1 fill, char color); 
.................... void glcd_circle(char x, char y, char radius, int1 fill, char color); 
.................... void glcd_text57(char x, char y, char* textptr, char , char color, char bkcolor); 
.................... void glcd_text812(char x, char y, char* textptr, char color, char bkcolor); 
.................... void glcd_color(char newColor); 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                        //// 
.................... ////                 Fonts and Images Library                               //// 
.................... ////                                                                        //// 
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #include <FONT.c> 
.................... const unsigned char FONT [240]={ 
....................                   0x00,0x00,0x00,0x00,0x00,   // 20 space 
....................                   0x00,0x00,0x5f,0x00,0x00,   // 21 ! 
....................                   0x00,0x07,0x00,0x07,0x00,   // 22 " 
....................                   0x14,0x7f,0x14,0x7f,0x14,   // 23 # 
....................                   0x24,0x2a,0x7f,0x2a,0x12,   // 24 $ 
....................                   0x23,0x13,0x08,0x64,0x62,   // 25 % 
....................                   0x36,0x49,0x55,0x22,0x50,   // 26 & 
....................                   0x00,0x05,0x03,0x00,0x00,   // 27 ' 
....................                   0x00,0x1c,0x22,0x41,0x00,   // 28 ( 
....................                   0x00,0x41,0x22,0x1c,0x00,   // 29 ) 
....................                   0x14,0x08,0x3e,0x08,0x14,   // 2a * 
....................                   0x08,0x08,0x3e,0x08,0x08,   // 2b + 
....................                   0x00,0x50,0x30,0x00,0x00,   // 2c , 
....................                   0x08,0x08,0x08,0x08,0x08,   // 2d - 
....................                   0x00,0x60,0x60,0x00,0x00,   // 2e . 
....................                   0x20,0x10,0x08,0x04,0x02,   // 2f / 
....................                   0x3e,0x51,0x49,0x45,0x3e,   // 30 0 
....................                   0x00,0x42,0x7f,0x40,0x00,   // 31 1 
....................                   0x42,0x61,0x51,0x49,0x46,   // 32 2 
....................                   0x21,0x41,0x45,0x4b,0x31,   // 33 3 
....................                   0x18,0x14,0x12,0x7f,0x10,   // 34 4 
....................                   0x27,0x45,0x45,0x45,0x39,   // 35 5 
....................                   0x3c,0x4a,0x49,0x49,0x30,   // 36 6 
....................                   0x01,0x71,0x09,0x05,0x03,   // 37 7 
....................                   0x36,0x49,0x49,0x49,0x36,   // 38 8 
....................                   0x06,0x49,0x49,0x29,0x1e,   // 39 9 
....................                   0x00,0x36,0x36,0x00,0x00,   // 3a : 
....................                   0x00,0x56,0x36,0x00,0x00,   // 3b ; 
....................                   0x08,0x14,0x22,0x41,0x00,   // 3c < 
....................                   0x14,0x14,0x14,0x14,0x14,   // 3d = 
....................                   0x00,0x41,0x22,0x14,0x08,   // 3e > 
....................                   0x02,0x01,0x51,0x09,0x06,   // 3f ? 
....................                   0x32,0x49,0x79,0x41,0x3e,   // 40 @ 
....................                   0x7e,0x11,0x11,0x11,0x7e,   // 41 A 
....................                   0x7f,0x49,0x49,0x49,0x36,   // 42 B 
....................                   0x3e,0x41,0x41,0x41,0x22,   // 43 C 
....................                   0x7f,0x41,0x41,0x22,0x1c,   // 44 D 
....................                   0x7f,0x49,0x49,0x49,0x41,   // 45 E 
....................                   0x7f,0x09,0x09,0x09,0x01,   // 46 F 
....................                   0x3e,0x41,0x49,0x49,0x7a,   // 47 G 
....................                   0x7f,0x08,0x08,0x08,0x7f,   // 48 H 
....................                   0x00,0x41,0x7f,0x41,0x00,   // 49 I 
....................                   0x20,0x40,0x41,0x3f,0x01,   // 4a J 
....................                   0x7f,0x08,0x14,0x22,0x41,   // 4b K 
....................                   0x7f,0x40,0x40,0x40,0x40,   // 4c L 
....................                   0x7f,0x02,0x0c,0x02,0x7f,   // 4d M 
....................                   0x7f,0x04,0x08,0x10,0x7f,   // 4e N 
....................                   0x3e,0x41,0x41,0x41,0x3e};   // 4f O 
....................  
....................  
.................... const unsigned char FONT2 [250]={ 
....................                   0x7f,0x09,0x09,0x09,0x06,   // 50 P 
....................                   0x3e,0x41,0x51,0x21,0x5e,   // 51 Q 
....................                   0x7f,0x09,0x19,0x29,0x46,   // 52 R 
....................                   0x46,0x49,0x49,0x49,0x31,   // 53 S 
....................                   0x01,0x01,0x7f,0x01,0x01,   // 54 T 
....................                   0x3f,0x40,0x40,0x40,0x3f,   // 55 U 
....................                   0x1f,0x20,0x40,0x20,0x1f,   // 56 V 
....................                   0x3f,0x40,0x38,0x40,0x3f,   // 57 W 
....................                   0x63,0x14,0x08,0x14,0x63,   // 58 X 
....................                   0x07,0x08,0x70,0x08,0x07,   // 59 Y 
....................                   0x61,0x51,0x49,0x45,0x43,   // 5a Z 
....................                   0x00,0x7f,0x41,0x41,0x00,   // 5b [ 
....................                   0x02,0x04,0x08,0x10,0x20,   // 5c 
....................                   0x00,0x41,0x41,0x7f,0x00,   // 5d 
....................                   0x04,0x02,0x01,0x02,0x04,   // 5e 
....................                   0x40,0x40,0x40,0x40,0x40,   // 5f 
....................                   0x00,0x01,0x02,0x04,0x00,   // 60 
....................                   0x20,0x54,0x54,0x54,0x78,   // 61 a 
....................                   0x7f,0x48,0x44,0x44,0x38,   // 62 b 
....................                   0x38,0x44,0x44,0x44,0x20,   // 63 c 
....................                   0x38,0x44,0x44,0x48,0x7f,   // 64 d 
....................                   0x38,0x54,0x54,0x54,0x18,   // 65 e 
....................                   0x08,0x7e,0x09,0x01,0x02,   // 66 f 
....................                   0x0c,0x52,0x52,0x52,0x3e,   // 67 g 
....................                   0x7f,0x08,0x04,0x04,0x78,   // 68 h 
....................                   0x00,0x44,0x7d,0x40,0x00,   // 69 i 
....................                   0x20,0x40,0x44,0x3d,0x00,   // 6a j 
....................                   0x7f,0x10,0x28,0x44,0x00,   // 6b k 
....................                   0x00,0x41,0x7f,0x40,0x00,   // 6c l 
....................                   0x7c,0x04,0x18,0x04,0x78,   // 6d m 
....................                   0x7c,0x08,0x04,0x04,0x78,   // 6e n 
....................                   0x38,0x44,0x44,0x44,0x38,   // 6f o 
....................                   0x7c,0x14,0x14,0x14,0x08,   // 70 p 
....................                   0x08,0x14,0x14,0x18,0x7c,   // 71 q 
....................                   0x7c,0x08,0x04,0x04,0x08,   // 72 r 
....................                   0x48,0x54,0x54,0x54,0x20,   // 73 s 
....................                   0x04,0x3f,0x44,0x40,0x20,   // 74 t 
....................                   0x3c,0x40,0x40,0x20,0x7c,   // 75 u 
....................                   0x1c,0x20,0x40,0x20,0x1c,   // 76 v 
....................                   0x3c,0x40,0x30,0x40,0x3c,   // 77 w 
....................                   0x44,0x28,0x10,0x28,0x44,   // 78 x 
....................                   0x0c,0x50,0x50,0x50,0x3c,   // 79 y 
....................                   0x44,0x64,0x54,0x4c,0x44,   // 7a z 
....................                   0x00,0x08,0x36,0x41,0x00,   // 7b 
....................                   0x00,0x00,0x7f,0x00,0x00,   // 7c 
....................                   0x00,0x41,0x36,0x08,0x00,   // 7d 
....................                   0x10,0x08,0x08,0x10,0x08,   // 7e 
....................                   0x78,0x46,0x41,0x46,0x78,  // 7F 
....................                   0x7C,0x09,0x05,0x05,0x78,  // 80 -> ? 
....................                   0x7E,0x05,0x09,0x11,0x7E   // 81 -> ? 
....................                   }; 
....................  
.................... /*#include <FONT812.c> 
.................... #include <image.c> 
.................... */ 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                            // 
.................... //        Init the screen                                                     // 
.................... //                                                                            // 
.................... //        Param : contraste                                                   // 
.................... //        Modifier ici le set_tris_xxx du port a utiliser                     // 
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... unsigned int32 i; 
.................... char color; 
....................  
.................... void glcd_init(char contrast) 
.................... { 
....................    set_tris_c(0x00); 
*
03B1:  MOVLW  00
03B2:  BSF    03.5
03B3:  MOVWF  07
....................    output_c(0x00); 
03B4:  CLRF   07
03B5:  BCF    03.5
03B6:  CLRF   07
....................  
....................    delay_ms(65); 
03B7:  MOVLW  41
03B8:  MOVWF  32
03B9:  CALL   1FC
....................  
....................    output_bit(glcd_cs,TRUE);  // Controler not selected (CE = "1") 
03BA:  BSF    07.3
03BB:  BSF    03.5
03BC:  BCF    07.3
....................    delay_us(att1); 
03BD:  NOP
....................    output_bit(glcd_res,TRUE); // and no reset (RST = "1") 
03BE:  BCF    03.5
03BF:  BSF    07.0
03C0:  BSF    03.5
03C1:  BCF    07.0
....................    delay_ms(500);             // 0.5 second Delay 
03C2:  MOVLW  02
03C3:  BCF    03.5
03C4:  MOVWF  31
03C5:  MOVLW  FA
03C6:  MOVWF  32
03C7:  CALL   1FC
03C8:  DECFSZ 31,F
03C9:  GOTO   3C5
....................    output_bit(glcd_res,FALSE);// Controler Reset (RST = "0") 
03CA:  BCF    07.0
03CB:  BSF    03.5
03CC:  BCF    07.0
....................    delay_ms(500);             // 0.5 second Delay 
03CD:  MOVLW  02
03CE:  BCF    03.5
03CF:  MOVWF  31
03D0:  MOVLW  FA
03D1:  MOVWF  32
03D2:  CALL   1FC
03D3:  DECFSZ 31,F
03D4:  GOTO   3D0
....................    output_bit(glcd_res,TRUE); // Reset Stop (RST = "1") 
03D5:  BSF    07.0
03D6:  BSF    03.5
03D7:  BCF    07.0
....................    delay_us(att1); 
03D8:  NOP
....................    output_bit(glcd_cs,FALSE);// Sélect the controler (CE = "0") 
03D9:  BCF    03.5
03DA:  BCF    07.3
03DB:  BSF    03.5
03DC:  BCF    07.3
....................    delay_us(att1); 
03DD:  NOP
....................    glcd_write_command(SOFT_RESET); // Software Reset 
03DE:  MOVLW  01
03DF:  BCF    03.5
03E0:  MOVWF  53
03E1:  CALL   30A
....................    delay_us(att1); 
03E2:  NOP
....................    glcd_write_command(SLEEP_OUT);  // Sleep Out 
03E3:  MOVLW  11
03E4:  MOVWF  53
03E5:  CALL   30A
....................    delay_us(att1); 
03E6:  NOP
....................    glcd_write_command(BOOSTER_ON); // Booster ON 
03E7:  MOVLW  03
03E8:  MOVWF  53
03E9:  CALL   30A
....................    delay_ms(10); 
03EA:  MOVLW  0A
03EB:  MOVWF  32
03EC:  CALL   1FC
....................    glcd_write_command(DISPLAY_ON); // Display ON 
03ED:  MOVLW  29
03EE:  MOVWF  53
03EF:  CALL   30A
....................    delay_us(att1); 
03F0:  NOP
....................    glcd_write_command(NORMAL);     // NORMAL Mode 
03F1:  MOVLW  20
03F2:  MOVWF  53
03F3:  CALL   30A
....................    delay_us(att1); 
03F4:  NOP
....................    glcd_write_command(COLMOD);     // Color Mode Command 
03F5:  MOVLW  3A
03F6:  MOVWF  53
03F7:  CALL   30A
....................    delay_us(att1); 
03F8:  NOP
....................    glcd_write_data(COLOR_8_BIT);   // 256 coulors mode 
03F9:  MOVLW  02
03FA:  MOVWF  53
03FB:  CALL   344
....................    delay_us(att1); 
03FC:  NOP
....................    glcd_write_command(RGBSET);     // Color palette definition command 
03FD:  MOVLW  2D
03FE:  MOVWF  53
03FF:  CALL   30A
....................                                    // de couleurs 
....................    delay_us(att1); 
0400:  NOP
....................  
....................    // Send the datas for the 256 colors palette 
....................    // RED 
....................    glcd_write_data(0); 
0401:  CLRF   53
0402:  CALL   344
....................    delay_us(att1); 
0403:  NOP
....................    glcd_write_data(2); 
0404:  MOVLW  02
0405:  MOVWF  53
0406:  CALL   344
....................    delay_us(att1); 
0407:  NOP
....................    glcd_write_data(4); 
0408:  MOVLW  04
0409:  MOVWF  53
040A:  CALL   344
....................    delay_us(att1); 
040B:  NOP
....................    glcd_write_data(6); 
040C:  MOVLW  06
040D:  MOVWF  53
040E:  CALL   344
....................    delay_us(att1); 
040F:  NOP
....................    glcd_write_data(8); 
0410:  MOVLW  08
0411:  MOVWF  53
0412:  CALL   344
....................    delay_us(att1); 
0413:  NOP
....................    glcd_write_data(10); 
0414:  MOVLW  0A
0415:  MOVWF  53
0416:  CALL   344
....................    delay_us(att1); 
0417:  NOP
....................    glcd_write_data(12); 
0418:  MOVLW  0C
0419:  MOVWF  53
041A:  CALL   344
....................    delay_us(att1); 
041B:  NOP
....................    glcd_write_data(15); 
041C:  MOVLW  0F
041D:  MOVWF  53
041E:  CALL   344
....................    delay_us(att1); 
041F:  NOP
....................    // GREEN 
....................    glcd_write_data(0); 
0420:  CLRF   53
0421:  CALL   344
....................    delay_us(att1); 
0422:  NOP
....................    glcd_write_data(2); 
0423:  MOVLW  02
0424:  MOVWF  53
0425:  CALL   344
....................    delay_us(att1); 
0426:  NOP
....................    glcd_write_data(4); 
0427:  MOVLW  04
0428:  MOVWF  53
0429:  CALL   344
....................    delay_us(att1); 
042A:  NOP
....................    glcd_write_data(6); 
042B:  MOVLW  06
042C:  MOVWF  53
042D:  CALL   344
....................    delay_us(att1); 
042E:  NOP
....................    glcd_write_data(8); 
042F:  MOVLW  08
0430:  MOVWF  53
0431:  CALL   344
....................    delay_us(att1); 
0432:  NOP
....................    glcd_write_data(10); 
0433:  MOVLW  0A
0434:  MOVWF  53
0435:  CALL   344
....................    delay_us(att1); 
0436:  NOP
....................    glcd_write_data(12); 
0437:  MOVLW  0C
0438:  MOVWF  53
0439:  CALL   344
....................    delay_us(att1); 
043A:  NOP
....................    glcd_write_data(15); 
043B:  MOVLW  0F
043C:  MOVWF  53
043D:  CALL   344
....................    delay_us(att1); 
043E:  NOP
....................    // BLUE 
....................    glcd_write_data(0); 
043F:  CLRF   53
0440:  CALL   344
....................    delay_us(att1); 
0441:  NOP
....................    glcd_write_data(4); 
0442:  MOVLW  04
0443:  MOVWF  53
0444:  CALL   344
....................    delay_us(att1); 
0445:  NOP
....................    glcd_write_data(9); 
0446:  MOVLW  09
0447:  MOVWF  53
0448:  CALL   344
....................    delay_us(att1); 
0449:  NOP
....................    glcd_write_data(15); 
044A:  MOVLW  0F
044B:  MOVWF  53
044C:  CALL   344
....................    delay_us(att1); 
044D:  NOP
....................  
....................    glcd_write_command(LCD_NOP); 
044E:  CLRF   53
044F:  CALL   30A
....................    delay_us(att1); 
0450:  NOP
....................  
....................    glcd_write_command(MEM_CONTROL); 
0451:  MOVLW  36
0452:  MOVWF  53
0453:  CALL   30A
....................    delay_us(att1); 
0454:  NOP
....................    glcd_write_data(0b11000000); 
0455:  MOVLW  C0
0456:  MOVWF  53
0457:  CALL   344
....................    delay_us(att1); 
0458:  NOP
....................  
....................    glcd_contrast(contrast);      // Ajdust the contrast ( 65 is a good value ) 
0459:  MOVF   30,W
045A:  MOVWF  31
....................    delay_us(att1); 
*
0473:  NOP
....................  
....................    glcd_cls(WHITE);              // erase screen 
0474:  MOVLW  FF
0475:  MOVWF  31
0476:  CALL   391
....................    delay_us(att1); 
0477:  NOP
....................  
.................... } 
0478:  BCF    0A.3
0479:  GOTO   79D (RETURN)
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                            // 
.................... //        shut down the screen                                                // 
.................... //                                                                            // 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void glcd_off(void) 
.................... { 
....................    glcd_write_command(PIXELS_OFF);    // All pixels Off 
....................    glcd_write_command(DISPLAY_OFF);   // Display Off 
....................    glcd_write_command(BOOSTER_OFF);   // Booster Off 
....................    glcd_write_command(SLEEP_IN);      // Sleep In 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                            // 
.................... //        Send a command                                                      // 
.................... //                                                                            // 
.................... //        Param : Command                                                    // 
.................... //                                                                            // 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void glcd_write_command(char byteforglcd_command) 
.................... { 
....................    output_bit(glcd_sclk,FALSE); 
*
030A:  BCF    07.2
030B:  BSF    03.5
030C:  BCF    07.2
....................    delay_cycles(att2); 
030D:  MOVLW  02
030E:  BCF    03.5
030F:  MOVWF  20
0310:  DECFSZ 20,F
0311:  GOTO   310
0312:  NOP
....................    output_bit(glcd_cs,FALSE); 
0313:  BCF    07.3
0314:  BSF    03.5
0315:  BCF    07.3
....................    delay_cycles(att2); 
0316:  MOVLW  02
0317:  BCF    03.5
0318:  MOVWF  20
0319:  DECFSZ 20,F
031A:  GOTO   319
031B:  NOP
....................  
....................    output_bit(glcd_sdata,FALSE); 
031C:  BCF    07.1
031D:  BSF    03.5
031E:  BCF    07.1
....................    delay_cycles(att2); 
031F:  MOVLW  02
0320:  BCF    03.5
0321:  MOVWF  20
0322:  DECFSZ 20,F
0323:  GOTO   322
0324:  NOP
....................    output_bit(glcd_sclk,TRUE); 
0325:  BSF    07.2
0326:  BSF    03.5
0327:  BCF    07.2
....................    delay_cycles(att2); 
0328:  MOVLW  02
0329:  BCF    03.5
032A:  MOVWF  20
032B:  DECFSZ 20,F
032C:  GOTO   32B
032D:  NOP
....................  
....................    glcd_write_dorc(byteforglcd_command); 
032E:  MOVF   53,W
032F:  MOVWF  54
0330:  CALL   211
....................  
....................    output_bit(glcd_sclk,FALSE); 
0331:  BCF    07.2
0332:  BSF    03.5
0333:  BCF    07.2
....................    delay_cycles(att2); 
0334:  MOVLW  02
0335:  BCF    03.5
0336:  MOVWF  20
0337:  DECFSZ 20,F
0338:  GOTO   337
0339:  NOP
....................    output_bit(glcd_cs,TRUE); 
033A:  BSF    07.3
033B:  BSF    03.5
033C:  BCF    07.3
....................    delay_cycles(att2); 
033D:  MOVLW  02
033E:  BCF    03.5
033F:  MOVWF  20
0340:  DECFSZ 20,F
0341:  GOTO   340
0342:  NOP
.................... } 
0343:  RETURN
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                            // 
.................... //        Send Data                                                           // 
.................... //                                                                            // 
.................... //        Param : 8 bits data                                                 // 
.................... //                                                                            // 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void glcd_write_data(char byteforglcd_data) 
.................... { 
....................    output_bit(glcd_sclk,FALSE); 
0344:  BCF    07.2
0345:  BSF    03.5
0346:  BCF    07.2
....................    delay_cycles(att2); 
0347:  MOVLW  02
0348:  BCF    03.5
0349:  MOVWF  20
034A:  DECFSZ 20,F
034B:  GOTO   34A
034C:  NOP
....................    output_bit(glcd_cs,FALSE); 
034D:  BCF    07.3
034E:  BSF    03.5
034F:  BCF    07.3
....................    delay_cycles(att2); 
0350:  MOVLW  02
0351:  BCF    03.5
0352:  MOVWF  20
0353:  DECFSZ 20,F
0354:  GOTO   353
0355:  NOP
....................  
....................    output_bit(glcd_sdata,TRUE); 
0356:  BSF    07.1
0357:  BSF    03.5
0358:  BCF    07.1
....................    delay_cycles(att2); 
0359:  MOVLW  02
035A:  BCF    03.5
035B:  MOVWF  20
035C:  DECFSZ 20,F
035D:  GOTO   35C
035E:  NOP
....................    output_bit(glcd_sclk,TRUE); 
035F:  BSF    07.2
0360:  BSF    03.5
0361:  BCF    07.2
....................    delay_cycles(att2); 
0362:  MOVLW  02
0363:  BCF    03.5
0364:  MOVWF  20
0365:  DECFSZ 20,F
0366:  GOTO   365
0367:  NOP
....................  
....................    glcd_write_dorc(byteforglcd_data); 
0368:  MOVF   53,W
0369:  MOVWF  54
036A:  CALL   211
....................  
....................    output_bit(glcd_sclk,FALSE); 
036B:  BCF    07.2
036C:  BSF    03.5
036D:  BCF    07.2
....................    delay_cycles(att2); 
036E:  MOVLW  02
036F:  BCF    03.5
0370:  MOVWF  20
0371:  DECFSZ 20,F
0372:  GOTO   371
0373:  NOP
....................    output_bit(glcd_cs,TRUE); 
0374:  BSF    07.3
0375:  BSF    03.5
0376:  BCF    07.3
....................    delay_cycles(att2); 
0377:  MOVLW  02
0378:  BCF    03.5
0379:  MOVWF  20
037A:  DECFSZ 20,F
037B:  GOTO   37A
037C:  NOP
.................... } 
037D:  RETURN
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                            // 
.................... //        Send one byte in serial mode                                        // 
.................... //                                                                            // 
.................... //        Param : byte (char)                                                       // 
.................... //                                                                            // 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void glcd_write_dorc(char byteforglcd) 
.................... { 
....................       output_low(glcd_sclk); 
*
0211:  BSF    03.5
0212:  BCF    07.2
0213:  BCF    03.5
0214:  BCF    07.2
....................       delay_cycles(att2); 
0215:  MOVLW  02
0216:  MOVWF  20
0217:  DECFSZ 20,F
0218:  GOTO   217
0219:  NOP
....................       output_bit(glcd_sdata,byteforglcd&0x80); 
021A:  BTFSC  54.7
021B:  GOTO   21E
021C:  BCF    07.1
021D:  GOTO   21F
021E:  BSF    07.1
021F:  BSF    03.5
0220:  BCF    07.1
....................       delay_cycles(att2); 
0221:  MOVLW  02
0222:  BCF    03.5
0223:  MOVWF  20
0224:  DECFSZ 20,F
0225:  GOTO   224
0226:  NOP
....................       output_high(glcd_sclk); 
0227:  BSF    03.5
0228:  BCF    07.2
0229:  BCF    03.5
022A:  BSF    07.2
....................       delay_cycles(att2); 
022B:  MOVLW  02
022C:  MOVWF  20
022D:  DECFSZ 20,F
022E:  GOTO   22D
022F:  NOP
....................       output_low(glcd_sclk); 
0230:  BSF    03.5
0231:  BCF    07.2
0232:  BCF    03.5
0233:  BCF    07.2
....................       delay_cycles(att2); 
0234:  MOVLW  02
0235:  MOVWF  20
0236:  DECFSZ 20,F
0237:  GOTO   236
0238:  NOP
....................       output_bit(glcd_sdata,byteforglcd&0x40); 
0239:  BTFSC  54.6
023A:  GOTO   23D
023B:  BCF    07.1
023C:  GOTO   23E
023D:  BSF    07.1
023E:  BSF    03.5
023F:  BCF    07.1
....................       delay_cycles(att2); 
0240:  MOVLW  02
0241:  BCF    03.5
0242:  MOVWF  20
0243:  DECFSZ 20,F
0244:  GOTO   243
0245:  NOP
....................       output_high(glcd_sclk); 
0246:  BSF    03.5
0247:  BCF    07.2
0248:  BCF    03.5
0249:  BSF    07.2
....................       delay_cycles(att2); 
024A:  MOVLW  02
024B:  MOVWF  20
024C:  DECFSZ 20,F
024D:  GOTO   24C
024E:  NOP
....................       output_low(glcd_sclk); 
024F:  BSF    03.5
0250:  BCF    07.2
0251:  BCF    03.5
0252:  BCF    07.2
....................       delay_cycles(att2); 
0253:  MOVLW  02
0254:  MOVWF  20
0255:  DECFSZ 20,F
0256:  GOTO   255
0257:  NOP
....................       output_bit(glcd_sdata,byteforglcd&0x20); 
0258:  BTFSC  54.5
0259:  GOTO   25C
025A:  BCF    07.1
025B:  GOTO   25D
025C:  BSF    07.1
025D:  BSF    03.5
025E:  BCF    07.1
....................       delay_cycles(att2); 
025F:  MOVLW  02
0260:  BCF    03.5
0261:  MOVWF  20
0262:  DECFSZ 20,F
0263:  GOTO   262
0264:  NOP
....................       output_high(glcd_sclk); 
0265:  BSF    03.5
0266:  BCF    07.2
0267:  BCF    03.5
0268:  BSF    07.2
....................       delay_cycles(att2); 
0269:  MOVLW  02
026A:  MOVWF  20
026B:  DECFSZ 20,F
026C:  GOTO   26B
026D:  NOP
....................       output_low(glcd_sclk); 
026E:  BSF    03.5
026F:  BCF    07.2
0270:  BCF    03.5
0271:  BCF    07.2
....................       delay_cycles(att2); 
0272:  MOVLW  02
0273:  MOVWF  20
0274:  DECFSZ 20,F
0275:  GOTO   274
0276:  NOP
....................       output_bit(glcd_sdata,byteforglcd&0x10); 
0277:  BTFSC  54.4
0278:  GOTO   27B
0279:  BCF    07.1
027A:  GOTO   27C
027B:  BSF    07.1
027C:  BSF    03.5
027D:  BCF    07.1
....................       delay_cycles(att2); 
027E:  MOVLW  02
027F:  BCF    03.5
0280:  MOVWF  20
0281:  DECFSZ 20,F
0282:  GOTO   281
0283:  NOP
....................       output_high(glcd_sclk); 
0284:  BSF    03.5
0285:  BCF    07.2
0286:  BCF    03.5
0287:  BSF    07.2
....................       delay_cycles(att2); 
0288:  MOVLW  02
0289:  MOVWF  20
028A:  DECFSZ 20,F
028B:  GOTO   28A
028C:  NOP
....................       output_low(glcd_sclk); 
028D:  BSF    03.5
028E:  BCF    07.2
028F:  BCF    03.5
0290:  BCF    07.2
....................       delay_cycles(att2); 
0291:  MOVLW  02
0292:  MOVWF  20
0293:  DECFSZ 20,F
0294:  GOTO   293
0295:  NOP
....................       output_bit(glcd_sdata,byteforglcd&0x08); 
0296:  BTFSC  54.3
0297:  GOTO   29A
0298:  BCF    07.1
0299:  GOTO   29B
029A:  BSF    07.1
029B:  BSF    03.5
029C:  BCF    07.1
....................       delay_cycles(att2); 
029D:  MOVLW  02
029E:  BCF    03.5
029F:  MOVWF  20
02A0:  DECFSZ 20,F
02A1:  GOTO   2A0
02A2:  NOP
....................       output_high(glcd_sclk); 
02A3:  BSF    03.5
02A4:  BCF    07.2
02A5:  BCF    03.5
02A6:  BSF    07.2
....................       delay_cycles(att2); 
02A7:  MOVLW  02
02A8:  MOVWF  20
02A9:  DECFSZ 20,F
02AA:  GOTO   2A9
02AB:  NOP
....................       output_low(glcd_sclk); 
02AC:  BSF    03.5
02AD:  BCF    07.2
02AE:  BCF    03.5
02AF:  BCF    07.2
....................       delay_cycles(att2); 
02B0:  MOVLW  02
02B1:  MOVWF  20
02B2:  DECFSZ 20,F
02B3:  GOTO   2B2
02B4:  NOP
....................       output_bit(glcd_sdata,byteforglcd&0x04); 
02B5:  BTFSC  54.2
02B6:  GOTO   2B9
02B7:  BCF    07.1
02B8:  GOTO   2BA
02B9:  BSF    07.1
02BA:  BSF    03.5
02BB:  BCF    07.1
....................       delay_cycles(att2); 
02BC:  MOVLW  02
02BD:  BCF    03.5
02BE:  MOVWF  20
02BF:  DECFSZ 20,F
02C0:  GOTO   2BF
02C1:  NOP
....................       output_high(glcd_sclk); 
02C2:  BSF    03.5
02C3:  BCF    07.2
02C4:  BCF    03.5
02C5:  BSF    07.2
....................       delay_cycles(att2); 
02C6:  MOVLW  02
02C7:  MOVWF  20
02C8:  DECFSZ 20,F
02C9:  GOTO   2C8
02CA:  NOP
....................       output_low(glcd_sclk); 
02CB:  BSF    03.5
02CC:  BCF    07.2
02CD:  BCF    03.5
02CE:  BCF    07.2
....................       delay_cycles(att2); 
02CF:  MOVLW  02
02D0:  MOVWF  20
02D1:  DECFSZ 20,F
02D2:  GOTO   2D1
02D3:  NOP
....................       output_bit(glcd_sdata,byteforglcd&0x02); 
02D4:  BTFSC  54.1
02D5:  GOTO   2D8
02D6:  BCF    07.1
02D7:  GOTO   2D9
02D8:  BSF    07.1
02D9:  BSF    03.5
02DA:  BCF    07.1
....................       delay_cycles(att2); 
02DB:  MOVLW  02
02DC:  BCF    03.5
02DD:  MOVWF  20
02DE:  DECFSZ 20,F
02DF:  GOTO   2DE
02E0:  NOP
....................       output_high(glcd_sclk); 
02E1:  BSF    03.5
02E2:  BCF    07.2
02E3:  BCF    03.5
02E4:  BSF    07.2
....................       delay_cycles(att2); 
02E5:  MOVLW  02
02E6:  MOVWF  20
02E7:  DECFSZ 20,F
02E8:  GOTO   2E7
02E9:  NOP
....................       output_low(glcd_sclk); 
02EA:  BSF    03.5
02EB:  BCF    07.2
02EC:  BCF    03.5
02ED:  BCF    07.2
....................       delay_cycles(att2); 
02EE:  MOVLW  02
02EF:  MOVWF  20
02F0:  DECFSZ 20,F
02F1:  GOTO   2F0
02F2:  NOP
....................       output_bit(glcd_sdata,byteforglcd&0x01); 
02F3:  BTFSC  54.0
02F4:  GOTO   2F7
02F5:  BCF    07.1
02F6:  GOTO   2F8
02F7:  BSF    07.1
02F8:  BSF    03.5
02F9:  BCF    07.1
....................       delay_cycles(att2); 
02FA:  MOVLW  02
02FB:  BCF    03.5
02FC:  MOVWF  20
02FD:  DECFSZ 20,F
02FE:  GOTO   2FD
02FF:  NOP
....................       output_high(glcd_sclk); 
0300:  BSF    03.5
0301:  BCF    07.2
0302:  BCF    03.5
0303:  BSF    07.2
....................       delay_cycles(att2); 
0304:  MOVLW  02
0305:  MOVWF  20
0306:  DECFSZ 20,F
0307:  GOTO   306
0308:  NOP
.................... } 
0309:  RETURN
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                            // 
.................... //        Erase screen                                                        // 
.................... //                                                                            // 
.................... //        Param : coulor 00 - FF                                             // 
.................... //                                                                            // 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void glcd_cls(char color) 
.................... { 
....................    unsigned int16 i,n; 
....................  
....................    //glcd_write_command(DISPLAY_OFF); 
....................    n = X_END*Y_END; 
*
0391:  MOVLW  43
0392:  MOVWF  35
0393:  MOVLW  09
0394:  MOVWF  34
....................    glcd_setarea(X_START, X_END, Y_START, Y_END); 
0395:  CLRF   4F
0396:  MOVLW  83
0397:  MOVWF  50
0398:  CLRF   51
0399:  MOVWF  52
039A:  CALL   37E
....................    glcd_write_command(MEMWRITE); 
039B:  MOVLW  2C
039C:  MOVWF  53
039D:  CALL   30A
....................    for(i=n; i>0; i--) 
039E:  MOVF   35,W
039F:  MOVWF  33
03A0:  MOVF   34,W
03A1:  MOVWF  32
03A2:  MOVF   32,F
03A3:  BTFSS  03.2
03A4:  GOTO   3A8
03A5:  MOVF   33,F
03A6:  BTFSC  03.2
03A7:  GOTO   3B0
....................    { 
....................       glcd_write_data(color); 
03A8:  MOVF   31,W
03A9:  MOVWF  53
03AA:  CALL   344
....................    } 
03AB:  MOVF   32,W
03AC:  BTFSC  03.2
03AD:  DECF   33,F
03AE:  DECF   32,F
03AF:  GOTO   3A2
....................    //glcd_write_command(DISPLAY_ON); 
.................... } 
03B0:  RETURN
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                            // 
.................... //        Set the write limit for the screen                                  // 
.................... //                                                                            // 
.................... //        Param : startx, endx, starty, endy                                  // 
.................... //                                                                            // 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void glcd_setarea(char startx, char endx, char starty, char endy) 
.................... { 
....................    glcd_write_command(ADDRX); 
*
037E:  MOVLW  2A
037F:  MOVWF  53
0380:  CALL   30A
....................    glcd_write_data(startx); 
0381:  MOVF   4F,W
0382:  MOVWF  53
0383:  CALL   344
....................    glcd_write_data(endx); 
0384:  MOVF   50,W
0385:  MOVWF  53
0386:  CALL   344
....................    glcd_write_command(ADDRY); 
0387:  MOVLW  2B
0388:  MOVWF  53
0389:  CALL   30A
....................    glcd_write_data(starty); 
038A:  MOVF   51,W
038B:  MOVWF  53
038C:  CALL   344
....................    glcd_write_data(endy); 
038D:  MOVF   52,W
038E:  MOVWF  53
038F:  CALL   344
.................... } 
0390:  RETURN
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                            // 
.................... //        Défine the screen contrast                                          // 
.................... //                                                                            // 
.................... //        Param : contrast  (65 = standard level)                             // 
.................... //                                                                            // 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void glcd_contrast(char contrast) 
.................... { 
....................    output_bit(glcd_cs,FALSE); 
*
045B:  BCF    07.3
045C:  BSF    03.5
045D:  BCF    07.3
....................    delay_cycles(att2); 
045E:  MOVLW  02
045F:  BCF    03.5
0460:  MOVWF  20
0461:  DECFSZ 20,F
0462:  GOTO   461
0463:  NOP
....................    glcd_write_command(SETCON); 
0464:  MOVLW  25
0465:  MOVWF  53
0466:  CALL   30A
....................    glcd_write_data(contrast); 
0467:  MOVF   31,W
0468:  MOVWF  53
0469:  CALL   344
....................    output_bit(glcd_cs,TRUE); 
046A:  BSF    07.3
046B:  BSF    03.5
046C:  BCF    07.3
....................    delay_cycles(att2); 
046D:  MOVLW  02
046E:  BCF    03.5
046F:  MOVWF  20
0470:  DECFSZ 20,F
0471:  GOTO   470
0472:  NOP
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                            // 
.................... //        show one pixel                                                      // 
.................... //                                                                            // 
.................... //        Param : x                                                           // 
.................... //                y                                                           // 
.................... //                color - 00 - FF                                             // 
.................... //                                                                            // 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void glcd_pixel(char x, char y, char color) 
.................... { 
....................    glcd_setarea(x, x, y, y); 
*
047A:  MOVF   4C,W
047B:  MOVWF  4F
047C:  MOVF   4C,W
047D:  MOVWF  50
047E:  MOVF   4D,W
047F:  MOVWF  51
0480:  MOVF   4D,W
0481:  MOVWF  52
0482:  CALL   37E
....................    glcd_write_command(MEMWRITE); 
0483:  MOVLW  2C
0484:  MOVWF  53
0485:  CALL   30A
....................    glcd_write_data(color); 
0486:  MOVF   4E,W
0487:  MOVWF  53
0488:  CALL   344
.................... } 
0489:  RETURN
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                            // 
.................... //        Send a Picture to the screen                                        // 
.................... //                                                                            // 
.................... //        Param : x                                                           // 
.................... //                y                                                           // 
.................... //                                                                            // 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... /*void glcd_img(char x, char y) 
.................... { 
....................    unsigned int16 i,n; 
....................    char IMGENDX, IMGENDY; 
....................  
....................    IMGENDX = img[0]; 
....................    IMGENDY = img[1]; 
....................  
....................    glcd_setarea(x,IMGENDX-1+x,y,IMGENDY-1+y); 
....................    n = (IMGENDX*IMGENDY)+2; 
....................    glcd_write_command(MEMWRITE); 
....................    for(i=2; i<n; i++) 
....................    { 
....................       glcd_write_data(img[i]); 
....................    } 
.................... } 
.................... */ 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                            // 
.................... //        Send a Picture sequence to the screen                               // 
.................... //                                                                            // 
.................... //        Param : x                                                           // 
.................... //                y                                                           // 
.................... //                frame - number of images to send                            // 
.................... //                wait - time betwen the images in ms                         // 
.................... //                                                                            // 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... /*void glcd_anim(char x, char y, int8 frame, int16 wait) 
.................... { 
....................    unsigned int16 i,j,n; 
....................    char IMGENDX, IMGENDY; 
....................  
....................    IMGENDX = img_a[0]; 
....................    IMGENDY = img_a[1]; 
....................  
....................    glcd_setarea(x,IMGENDX-1+x,y,IMGENDY-1+y); 
....................    n = IMGENDX*IMGENDY; 
....................    glcd_write_command(MEMWRITE); 
....................    for (j=0;j<frame;j++) 
....................    { 
....................      for(i=2; i<n+2; i++) 
....................      { 
....................          glcd_write_data(img_a[(j*n)+i]); 
....................      } 
....................      delay_ms(wait); 
....................    } 
.................... }*/ 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                            // 
.................... //        Set the cursor position                                             // 
.................... //                                                                            // 
.................... //        Param : x                                                           // 
.................... //                y                                                           // 
.................... //                                                                            // 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void glcd_gotoxy(char x, char y) 
.................... { 
....................    glcd_setarea(x, x, y, y); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                            // 
.................... //        Set a new current color                                             // 
.................... //                                                                            // 
.................... //        Param : newColor 00 - FF                                            // 
.................... //                                                                            // 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void glcd_color(char newColor) 
.................... { 
....................    color = newColor; 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                            // 
.................... //        Fill a part of the screen with a color                              // 
.................... //                                                                            // 
.................... //        Param : startx, endx, starty, endy                                  // 
.................... //                Pixel color : 00 - FF                                       // 
.................... //                                                                            // 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void glcd_fillscreen(char x1, char y1, char x2, char y2,char color) 
.................... { 
....................    int16 dx,dy; 
....................    int16 i,n; 
....................  
....................    glcd_setarea(x1,x2,y1,y2); 
....................    dx = (int16)abs((signed int16)(x2 - x1))+1; 
....................    dy = (int16)abs((signed int16)(y2 - y1))+1; 
....................    n = dx*dy; 
....................    glcd_write_command(MEMWRITE); 
....................    for(i=n; i>0; i--) 
....................    { 
....................       glcd_write_data(color); 
....................    } 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                            // 
.................... //        draw a line                                                         // 
.................... //                                                                            // 
.................... //        Param : x1,y1 - start coord                                         // 
.................... //                x2,y2 - end coord                                           // 
.................... //                color - 00 - FF                                             // 
.................... //                                                                            // 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void glcd_line(char x1, char y1, char x2, char y2, char couleur) 
.................... { 
048A:  MOVLW  01
048B:  MOVWF  45
048C:  MOVWF  46
048D:  CLRF   4B
....................    int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
048E:  MOVF   3C,W
048F:  SUBWF  3E,W
0490:  MOVWF  4C
0491:  MOVF   4C,W
0492:  BTFSS  4C.7
0493:  GOTO   496
0494:  MOVF   4C,W
0495:  SUBLW  00
0496:  CLRF   23
0497:  MOVWF  43
0498:  MOVF   23,W
0499:  MOVWF  44
....................    dy = abs((signed int8)(y2 - y1)); 
049A:  MOVF   3D,W
049B:  SUBWF  3F,W
049C:  MOVWF  4C
049D:  MOVF   4C,W
049E:  BTFSS  4C.7
049F:  GOTO   4A2
04A0:  MOVF   4C,W
04A1:  SUBLW  00
04A2:  CLRF   23
04A3:  MOVWF  41
04A4:  MOVF   23,W
04A5:  MOVWF  42
....................  
....................    if(x1 > x2) 
04A6:  MOVF   3C,W
04A7:  SUBWF  3E,W
04A8:  BTFSC  03.0
04A9:  GOTO   4AC
....................       addx = -1; 
04AA:  MOVLW  FF
04AB:  MOVWF  45
....................    if(y1 > y2) 
04AC:  MOVF   3D,W
04AD:  SUBWF  3F,W
04AE:  BTFSC  03.0
04AF:  GOTO   4B2
....................       addy = -1; 
04B0:  MOVLW  FF
04B1:  MOVWF  46
....................  
....................    if(dx >= dy) 
04B2:  MOVF   42,W
04B3:  SUBWF  44,W
04B4:  BTFSS  03.0
04B5:  GOTO   4FE
04B6:  BTFSS  03.2
04B7:  GOTO   4BC
04B8:  MOVF   41,W
04B9:  SUBWF  43,W
04BA:  BTFSS  03.0
04BB:  GOTO   4FE
....................    { 
....................       dy *= 2; 
04BC:  BCF    03.0
04BD:  RLF    41,F
04BE:  RLF    42,F
....................       P = dy - dx; 
04BF:  MOVF   43,W
04C0:  SUBWF  41,W
04C1:  MOVWF  20
04C2:  MOVF   42,W
04C3:  MOVWF  23
04C4:  MOVF   44,W
04C5:  BTFSS  03.0
04C6:  INCFSZ 44,W
04C7:  SUBWF  23,F
04C8:  MOVF   20,W
04C9:  MOVWF  47
04CA:  MOVF   23,W
04CB:  MOVWF  48
....................       diff = P - dx; 
04CC:  MOVF   43,W
04CD:  SUBWF  47,W
04CE:  MOVWF  49
04CF:  MOVF   48,W
04D0:  MOVWF  4A
04D1:  MOVF   44,W
04D2:  BTFSS  03.0
04D3:  INCFSZ 44,W
04D4:  SUBWF  4A,F
....................  
....................       for(; i<=dx; ++i) 
04D5:  MOVF   44,F
04D6:  BTFSS  03.2
04D7:  GOTO   4DC
04D8:  MOVF   4B,W
04D9:  SUBWF  43,W
04DA:  BTFSS  03.0
04DB:  GOTO   4FD
....................       { 
....................          glcd_pixel(x1, y1, couleur); 
04DC:  MOVF   3C,W
04DD:  MOVWF  4C
04DE:  MOVF   3D,W
04DF:  MOVWF  4D
04E0:  MOVF   40,W
04E1:  MOVWF  4E
04E2:  CALL   47A
....................  
....................          if(P < 0) 
04E3:  BTFSS  48.7
04E4:  GOTO   4EF
....................          { 
....................             P  += dy; 
04E5:  MOVF   41,W
04E6:  ADDWF  47,F
04E7:  MOVF   42,W
04E8:  BTFSC  03.0
04E9:  INCFSZ 42,W
04EA:  ADDWF  48,F
....................             x1 += addx; 
04EB:  MOVF   45,W
04EC:  ADDWF  3C,W
04ED:  MOVWF  3C
....................          } 
....................          else 
04EE:  GOTO   4FB
....................          { 
....................             P  += diff; 
04EF:  MOVF   49,W
04F0:  ADDWF  47,F
04F1:  MOVF   4A,W
04F2:  BTFSC  03.0
04F3:  INCFSZ 4A,W
04F4:  ADDWF  48,F
....................             x1 += addx; 
04F5:  MOVF   45,W
04F6:  ADDWF  3C,W
04F7:  MOVWF  3C
....................             y1 += addy; 
04F8:  MOVF   46,W
04F9:  ADDWF  3D,W
04FA:  MOVWF  3D
....................          } 
....................       } 
04FB:  INCF   4B,F
04FC:  GOTO   4D5
....................    } 
....................    else 
04FD:  GOTO   53F
....................    { 
....................       dx *= 2; 
04FE:  BCF    03.0
04FF:  RLF    43,F
0500:  RLF    44,F
....................       P = dx - dy; 
0501:  MOVF   41,W
0502:  SUBWF  43,W
0503:  MOVWF  20
0504:  MOVF   44,W
0505:  MOVWF  23
0506:  MOVF   42,W
0507:  BTFSS  03.0
0508:  INCFSZ 42,W
0509:  SUBWF  23,F
050A:  MOVF   20,W
050B:  MOVWF  47
050C:  MOVF   23,W
050D:  MOVWF  48
....................       diff = P - dy; 
050E:  MOVF   41,W
050F:  SUBWF  47,W
0510:  MOVWF  49
0511:  MOVF   48,W
0512:  MOVWF  4A
0513:  MOVF   42,W
0514:  BTFSS  03.0
0515:  INCFSZ 42,W
0516:  SUBWF  4A,F
....................  
....................       for(; i<=dy; ++i) 
0517:  MOVF   42,F
0518:  BTFSS  03.2
0519:  GOTO   51E
051A:  MOVF   4B,W
051B:  SUBWF  41,W
051C:  BTFSS  03.0
051D:  GOTO   53F
....................       { 
....................          glcd_pixel(x1, y1, couleur); 
051E:  MOVF   3C,W
051F:  MOVWF  4C
0520:  MOVF   3D,W
0521:  MOVWF  4D
0522:  MOVF   40,W
0523:  MOVWF  4E
0524:  CALL   47A
....................  
....................          if(P < 0) 
0525:  BTFSS  48.7
0526:  GOTO   531
....................          { 
....................             P  += dx; 
0527:  MOVF   43,W
0528:  ADDWF  47,F
0529:  MOVF   44,W
052A:  BTFSC  03.0
052B:  INCFSZ 44,W
052C:  ADDWF  48,F
....................             y1 += addy; 
052D:  MOVF   46,W
052E:  ADDWF  3D,W
052F:  MOVWF  3D
....................          } 
....................          else 
0530:  GOTO   53D
....................          { 
....................             P  += diff; 
0531:  MOVF   49,W
0532:  ADDWF  47,F
0533:  MOVF   4A,W
0534:  BTFSC  03.0
0535:  INCFSZ 4A,W
0536:  ADDWF  48,F
....................             x1 += addx; 
0537:  MOVF   45,W
0538:  ADDWF  3C,W
0539:  MOVWF  3C
....................             y1 += addy; 
053A:  MOVF   46,W
053B:  ADDWF  3D,W
053C:  MOVWF  3D
....................          } 
....................       } 
053D:  INCF   4B,F
053E:  GOTO   517
....................    } 
....................  
.................... } 
053F:  RETURN
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                            // 
.................... //        draw a bar                                                          // 
.................... //                                                                            // 
.................... //        Param : x1,y1 - start                                               // 
.................... //                x2,y2 - end                                                 // 
.................... //                width - width of the bar                                    // 
.................... //                color - 00 - FF                                             // 
.................... //                                                                            // 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void glcd_bar(char x1, char y1, char x2, char y2, char width, char color) 
.................... { 
....................    signed int  x, y, addx, addy, j; 
....................    signed long P, dx, dy, c1, c2; 
....................    int i; 
....................  
....................    dx = abs((signed int)(x2 - x1)); 
....................    dy = abs((signed int)(y2 - y1)); 
....................    x = x1; 
....................    y = y1; 
....................    c1 = -dx*x1 - dy*y1; 
....................    c2 = -dx*x2 - dy*y2; 
....................  
....................    if(x1 > x2) 
....................    { 
....................       addx = -1; 
....................       c1 = -dx*x2 - dy*y2; 
....................       c2 = -dx*x1 - dy*y1; 
....................    } 
....................    else 
....................       addx = 1; 
....................    if(y1 > y2) 
....................    { 
....................       addy = -1; 
....................       c1 = -dx*x2 - dy*y2; 
....................       c2 = -dx*x1 - dy*y1; 
....................    } 
....................    else 
....................       addy = 1; 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-(width/2); j<width/2+width%2; ++j) 
....................          { 
....................             if(dx*x+dy*(y+j)+c1 >= 0 && dx*x+dy*(y+j)+c2 <=0) 
....................                glcd_pixel((char)x, (char)(y+j), color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P += 2*dy; 
....................             x += addx; 
....................          } 
....................          else 
....................          { 
....................             P += 2*dy - 2*dx; 
....................             x += addx; 
....................             y += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P += 2*dx; 
....................             y += addy; 
....................          } 
....................          else 
....................          { 
....................             P += 2*dx - 2*dy; 
....................             x += addx; 
....................             y += addy; 
....................          } 
....................          for(j=-(width/2); j<width/2+width%2; ++j) 
....................          { 
....................             if(dx*x+dy*(y+j)+c1 >= 0 && dx*x+dy*(y+j)+c2 <=0) 
....................                glcd_pixel((char)(x+j), (char)y, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                            // 
.................... //        draw a rectangle                                                    // 
.................... //                                                                            // 
.................... //        Param : x1,y1 - start                                               // 
.................... //                x2,y2 - end                                                 // 
.................... //                width - width of the drawing                                // 
.................... //                fill  - Full YES or NO  (fill or not the rectangle)         // 
.................... //                color - 00 - FF                                             // 
.................... //                                                                            // 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void glcd_rect(char x1, char y1, char x2, char y2, char width, int1 fill, char color) 
.................... { 
....................    if(fill) 
....................    { 
....................       int y, ymax;                          // Find the y min and max 
....................       if(y1 < y2) 
....................       { 
....................          y = y1; 
....................          ymax = y2; 
....................       } 
....................       else 
....................       { 
....................          y = y2; 
....................          ymax = y1; 
....................       } 
....................  
....................       glcd_fillscreen(x1,y,x2,ymax,color);  // Draw box to fill the rectangle 
....................    } 
....................    else 
....................    { 
....................       if(width) 
....................       { 
....................          glcd_bar(x1, y1, x2, y1, width, color);      // Draw the 4 sides 
....................          glcd_bar(x1, y2, x2, y2, width, color); 
....................          glcd_bar(x1, y1, x1, y2, width, color); 
....................          glcd_bar(x2, y1, x2, y2, width, color); 
....................       } 
....................       else 
....................       { 
....................          glcd_line(x1, y1, x2, y1, color); 
....................          glcd_line(x1, y2, x2, y2, color); 
....................          glcd_line(x1, y1, x1, y2, color); 
....................          glcd_line(x2, y1, x2, y2, color); 
....................       } 
....................    } 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                            // 
.................... //        draw a circle                                                       // 
.................... //                                                                            // 
.................... //        Param : x,y - center from circle                                    // 
.................... //                radius - radius from the circle                             // 
.................... //                fill  - Full YES or NO  (fill or not the circle)            // 
.................... //                color - 00 - FF                                             // 
.................... //                                                                            // 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void glcd_circle(char x, char y, char radius, int1 fill, char color) 
.................... { 
....................    signed int a, b, P; 
....................    a = 0; 
*
0565:  CLRF   35
....................    b = radius; 
0566:  MOVF   32,W
0567:  MOVWF  36
....................    P = 1 - radius; 
0568:  MOVF   32,W
0569:  SUBLW  01
056A:  MOVWF  37
....................  
....................    do 
....................    { 
....................       if(fill) 
056B:  MOVF   33,F
056C:  BTFSC  03.2
056D:  GOTO   5CB
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
056E:  MOVF   35,W
056F:  SUBWF  30,W
0570:  MOVWF  38
0571:  MOVF   36,W
0572:  ADDWF  31,W
0573:  MOVWF  39
0574:  MOVF   35,W
0575:  ADDWF  30,W
0576:  MOVWF  3A
0577:  MOVF   36,W
0578:  ADDWF  31,W
0579:  MOVWF  3B
057A:  MOVF   38,W
057B:  MOVWF  3C
057C:  MOVF   39,W
057D:  MOVWF  3D
057E:  MOVF   3A,W
057F:  MOVWF  3E
0580:  MOVF   3B,W
0581:  MOVWF  3F
0582:  MOVF   34,W
0583:  MOVWF  40
0584:  CALL   48A
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
0585:  MOVF   35,W
0586:  SUBWF  30,W
0587:  MOVWF  38
0588:  MOVF   36,W
0589:  SUBWF  31,W
058A:  MOVWF  39
058B:  MOVF   35,W
058C:  ADDWF  30,W
058D:  MOVWF  3A
058E:  MOVF   36,W
058F:  SUBWF  31,W
0590:  MOVWF  3B
0591:  MOVF   38,W
0592:  MOVWF  3C
0593:  MOVF   39,W
0594:  MOVWF  3D
0595:  MOVF   3A,W
0596:  MOVWF  3E
0597:  MOVF   3B,W
0598:  MOVWF  3F
0599:  MOVF   34,W
059A:  MOVWF  40
059B:  CALL   48A
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
059C:  MOVF   36,W
059D:  SUBWF  30,W
059E:  MOVWF  38
059F:  MOVF   35,W
05A0:  ADDWF  31,W
05A1:  MOVWF  39
05A2:  MOVF   36,W
05A3:  ADDWF  30,W
05A4:  MOVWF  3A
05A5:  MOVF   35,W
05A6:  ADDWF  31,W
05A7:  MOVWF  3B
05A8:  MOVF   38,W
05A9:  MOVWF  3C
05AA:  MOVF   39,W
05AB:  MOVWF  3D
05AC:  MOVF   3A,W
05AD:  MOVWF  3E
05AE:  MOVF   3B,W
05AF:  MOVWF  3F
05B0:  MOVF   34,W
05B1:  MOVWF  40
05B2:  CALL   48A
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
05B3:  MOVF   36,W
05B4:  SUBWF  30,W
05B5:  MOVWF  38
05B6:  MOVF   35,W
05B7:  SUBWF  31,W
05B8:  MOVWF  39
05B9:  MOVF   36,W
05BA:  ADDWF  30,W
05BB:  MOVWF  3A
05BC:  MOVF   35,W
05BD:  SUBWF  31,W
05BE:  MOVWF  3B
05BF:  MOVF   38,W
05C0:  MOVWF  3C
05C1:  MOVF   39,W
05C2:  MOVWF  3D
05C3:  MOVF   3A,W
05C4:  MOVWF  3E
05C5:  MOVF   3B,W
05C6:  MOVWF  3F
05C7:  MOVF   34,W
05C8:  MOVWF  40
05C9:  CALL   48A
....................       } 
....................       else 
05CA:  GOTO   633
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
05CB:  MOVF   30,W
05CC:  ADDWF  35,W
05CD:  MOVWF  38
05CE:  MOVF   31,W
05CF:  ADDWF  36,W
05D0:  MOVWF  39
05D1:  MOVF   38,W
05D2:  MOVWF  4C
05D3:  MOVF   39,W
05D4:  MOVWF  4D
05D5:  MOVF   34,W
05D6:  MOVWF  4E
05D7:  CALL   47A
....................          glcd_pixel(b+x, a+y, color); 
05D8:  MOVF   30,W
05D9:  ADDWF  36,W
05DA:  MOVWF  38
05DB:  MOVF   31,W
05DC:  ADDWF  35,W
05DD:  MOVWF  39
05DE:  MOVF   38,W
05DF:  MOVWF  4C
05E0:  MOVF   39,W
05E1:  MOVWF  4D
05E2:  MOVF   34,W
05E3:  MOVWF  4E
05E4:  CALL   47A
....................          glcd_pixel(x-a, b+y, color); 
05E5:  MOVF   35,W
05E6:  SUBWF  30,W
05E7:  MOVWF  38
05E8:  MOVF   31,W
05E9:  ADDWF  36,W
05EA:  MOVWF  39
05EB:  MOVF   38,W
05EC:  MOVWF  4C
05ED:  MOVF   39,W
05EE:  MOVWF  4D
05EF:  MOVF   34,W
05F0:  MOVWF  4E
05F1:  CALL   47A
....................          glcd_pixel(x-b, a+y, color); 
05F2:  MOVF   36,W
05F3:  SUBWF  30,W
05F4:  MOVWF  38
05F5:  MOVF   31,W
05F6:  ADDWF  35,W
05F7:  MOVWF  39
05F8:  MOVF   38,W
05F9:  MOVWF  4C
05FA:  MOVF   39,W
05FB:  MOVWF  4D
05FC:  MOVF   34,W
05FD:  MOVWF  4E
05FE:  CALL   47A
....................          glcd_pixel(b+x, y-a, color); 
05FF:  MOVF   30,W
0600:  ADDWF  36,W
0601:  MOVWF  38
0602:  MOVF   35,W
0603:  SUBWF  31,W
0604:  MOVWF  39
0605:  MOVF   38,W
0606:  MOVWF  4C
0607:  MOVF   39,W
0608:  MOVWF  4D
0609:  MOVF   34,W
060A:  MOVWF  4E
060B:  CALL   47A
....................          glcd_pixel(a+x, y-b, color); 
060C:  MOVF   30,W
060D:  ADDWF  35,W
060E:  MOVWF  38
060F:  MOVF   36,W
0610:  SUBWF  31,W
0611:  MOVWF  39
0612:  MOVF   38,W
0613:  MOVWF  4C
0614:  MOVF   39,W
0615:  MOVWF  4D
0616:  MOVF   34,W
0617:  MOVWF  4E
0618:  CALL   47A
....................          glcd_pixel(x-a, y-b, color); 
0619:  MOVF   35,W
061A:  SUBWF  30,W
061B:  MOVWF  38
061C:  MOVF   36,W
061D:  SUBWF  31,W
061E:  MOVWF  39
061F:  MOVF   38,W
0620:  MOVWF  4C
0621:  MOVF   39,W
0622:  MOVWF  4D
0623:  MOVF   34,W
0624:  MOVWF  4E
0625:  CALL   47A
....................          glcd_pixel(x-b, y-a, color); 
0626:  MOVF   36,W
0627:  SUBWF  30,W
0628:  MOVWF  38
0629:  MOVF   35,W
062A:  SUBWF  31,W
062B:  MOVWF  39
062C:  MOVF   38,W
062D:  MOVWF  4C
062E:  MOVF   39,W
062F:  MOVWF  4D
0630:  MOVF   34,W
0631:  MOVWF  4E
0632:  CALL   47A
....................       } 
....................  
....................       if(P < 0) 
0633:  BTFSS  37.7
0634:  GOTO   641
....................          P+= 3 + 2*a++; 
0635:  MOVF   35,W
0636:  INCF   35,F
0637:  MOVWF  38
0638:  MOVLW  02
0639:  MOVWF  41
063A:  MOVF   38,W
063B:  MOVWF  42
063C:  CALL   540
063D:  MOVF   21,W
063E:  ADDLW  03
063F:  ADDWF  37,F
....................       else 
0640:  GOTO   650
....................          P+= 5 + 2*(a++ - b--); 
0641:  MOVF   35,W
0642:  INCF   35,F
0643:  MOVWF  38
0644:  MOVF   36,W
0645:  DECF   36,F
0646:  SUBWF  38,W
0647:  MOVWF  38
0648:  MOVLW  02
0649:  MOVWF  41
064A:  MOVF   38,W
064B:  MOVWF  42
064C:  CALL   540
064D:  MOVF   21,W
064E:  ADDLW  05
064F:  ADDWF  37,F
....................     } while(a <= b); 
0650:  MOVF   35,W
0651:  XORLW  80
0652:  MOVWF  20
0653:  MOVF   36,W
0654:  XORLW  80
0655:  SUBWF  20,W
0656:  BTFSC  03.2
0657:  GOTO   56B
0658:  BTFSS  03.0
0659:  GOTO   56B
.................... } 
065A:  BCF    0A.3
065B:  GOTO   7BD (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                            // 
.................... //        Write a text with the 5 x 7 pixels font                             // 
.................... //                                                                            // 
.................... //        Param : x,y - coord from the 1st char                               // 
.................... //                textptr _ pointer to a char array                           // 
.................... //                size - text size : 1 = 5x7, 2 = 10x14                       // 
.................... //                color - 00 - FF                                             // 
.................... //                                                                            // 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... void glcd_text57(char x, char y, char* textptr, char size, char color, char bkcolor) 
.................... { 
....................    int8 j, k, l, m;                       // Loop counters 
....................    int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
065C:  MOVF   33,W
065D:  MOVWF  23
065E:  MOVF   32,W
065F:  MOVWF  04
0660:  BCF    03.7
0661:  BTFSC  23.0
0662:  BSF    03.7
0663:  MOVF   00,F
0664:  BTFSC  03.2
0665:  GOTO   761
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
0666:  MOVF   33,W
0667:  MOVWF  23
0668:  MOVF   32,W
0669:  MOVWF  04
066A:  BCF    03.7
066B:  BTFSC  23.0
066C:  BSF    03.7
066D:  MOVF   00,W
066E:  SUBLW  52
066F:  BTFSS  03.0
0670:  GOTO   68F
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
0671:  MOVF   33,W
0672:  MOVWF  23
0673:  MOVF   32,W
0674:  MOVWF  04
0675:  BCF    03.7
0676:  BTFSC  33.0
0677:  BSF    03.7
0678:  MOVLW  20
0679:  SUBWF  00,W
067A:  CALL   004
067B:  MOVWF  40
067C:  MOVWF  04
067D:  BCF    03.7
067E:  BTFSC  41.0
067F:  BSF    03.7
0680:  MOVF   00,W
0681:  MOVWF  3B
0682:  INCF   04,F
0683:  MOVF   00,W
0684:  MOVWF  3C
0685:  INCF   04,F
0686:  MOVF   00,W
0687:  MOVWF  3D
0688:  INCF   04,F
0689:  MOVF   00,W
068A:  MOVWF  3E
068B:  INCF   04,F
068C:  MOVF   00,W
068D:  MOVWF  3F
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
068E:  GOTO   6C7
068F:  MOVF   33,W
0690:  MOVWF  23
0691:  MOVF   32,W
0692:  MOVWF  04
0693:  BCF    03.7
0694:  BTFSC  23.0
0695:  BSF    03.7
0696:  MOVF   00,W
0697:  SUBLW  7E
0698:  BTFSS  03.0
0699:  GOTO   6B8
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
069A:  MOVF   33,W
069B:  MOVWF  23
069C:  MOVF   32,W
069D:  MOVWF  04
069E:  BCF    03.7
069F:  BTFSC  33.0
06A0:  BSF    03.7
06A1:  MOVLW  53
06A2:  SUBWF  00,W
06A3:  CALL   0F8
06A4:  MOVWF  40
06A5:  MOVWF  04
06A6:  BCF    03.7
06A7:  BTFSC  41.0
06A8:  BSF    03.7
06A9:  MOVF   00,W
06AA:  MOVWF  3B
06AB:  INCF   04,F
06AC:  MOVF   00,W
06AD:  MOVWF  3C
06AE:  INCF   04,F
06AF:  MOVF   00,W
06B0:  MOVWF  3D
06B1:  INCF   04,F
06B2:  MOVF   00,W
06B3:  MOVWF  3E
06B4:  INCF   04,F
06B5:  MOVF   00,W
06B6:  MOVWF  3F
....................       else 
06B7:  GOTO   6C7
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
06B8:  MOVF   00,W
06B9:  MOVWF  3B
06BA:  INCF   04,F
06BB:  MOVF   00,W
06BC:  MOVWF  3C
06BD:  INCF   04,F
06BE:  MOVF   00,W
06BF:  MOVWF  3D
06C0:  INCF   04,F
06C1:  MOVF   00,W
06C2:  MOVWF  3E
06C3:  INCF   04,F
06C4:  MOVF   00,W
06C5:  MOVWF  3F
06C6:  INCF   04,F
....................  
....................        // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
06C7:  MOVF   33,W
06C8:  MOVWF  23
06C9:  MOVF   32,W
06CA:  MOVWF  04
06CB:  BCF    03.7
06CC:  BTFSC  23.0
06CD:  BSF    03.7
06CE:  MOVF   00,W
06CF:  XORLW  0A
06D0:  BTFSC  03.2
06D1:  GOTO   6D6
06D2:  XORLW  07
06D3:  BTFSC  03.2
06D4:  GOTO   6DF
06D5:  GOTO   6E1
....................          case '\n': 
....................             y += 7*size + 1; 
06D6:  MOVLW  07
06D7:  MOVWF  41
06D8:  MOVF   34,W
06D9:  MOVWF  42
06DA:  CALL   540
06DB:  MOVLW  01
06DC:  ADDWF  21,W
06DD:  ADDWF  31,F
....................             continue; 
06DE:  GOTO   75C
....................          case '\r': 
....................             x = 0; 
06DF:  CLRF   30
....................             continue; 
06E0:  GOTO   75C
....................       } 
....................  
....................       if(x+5*size > X_END)                // Performs character wrapping 
06E1:  MOVLW  05
06E2:  MOVWF  41
06E3:  MOVF   34,W
06E4:  MOVWF  42
06E5:  CALL   540
06E6:  MOVF   21,W
06E7:  ADDWF  30,W
06E8:  SUBLW  83
06E9:  BTFSC  03.0
06EA:  GOTO   6F4
....................       { 
....................          x = 0;                           // Set x at far left position 
06EB:  CLRF   30
....................          y += 7*size + 1;                 // Set y at next position down 
06EC:  MOVLW  07
06ED:  MOVWF  41
06EE:  MOVF   34,W
06EF:  MOVWF  42
06F0:  CALL   540
06F1:  MOVLW  01
06F2:  ADDWF  21,W
06F3:  ADDWF  31,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
06F4:  CLRF   37
06F5:  MOVF   37,W
06F6:  SUBLW  04
06F7:  BTFSS  03.0
06F8:  GOTO   75C
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
06F9:  CLRF   38
06FA:  MOVF   38,W
06FB:  SUBLW  06
06FC:  BTFSS  03.0
06FD:  GOTO   758
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
06FE:  MOVLW  3B
06FF:  ADDWF  37,W
0700:  MOVWF  04
0701:  BCF    03.7
0702:  MOVF   00,W
0703:  MOVWF  40
0704:  MOVWF  20
0705:  MOVF   38,W
0706:  MOVWF  21
0707:  BTFSC  03.2
0708:  GOTO   70D
0709:  BCF    03.0
070A:  RRF    20,F
070B:  DECFSZ 21,F
070C:  GOTO   709
070D:  BTFSS  20.0
070E:  GOTO   731
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
070F:  CLRF   39
0710:  MOVF   34,W
0711:  SUBWF  39,W
0712:  BTFSC  03.0
0713:  GOTO   730
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
0714:  CLRF   3A
0715:  MOVF   34,W
0716:  SUBWF  3A,W
0717:  BTFSC  03.0
0718:  GOTO   72E
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
0719:  MOVF   3A,W
071A:  ADDWF  30,W
071B:  MOVWF  40
071C:  MOVF   38,W
071D:  MOVWF  41
071E:  MOVF   34,W
071F:  MOVWF  42
0720:  CALL   540
0721:  MOVF   21,W
0722:  ADDWF  31,W
0723:  ADDWF  39,W
0724:  MOVWF  41
0725:  MOVF   40,W
0726:  MOVWF  4C
0727:  MOVF   41,W
0728:  MOVWF  4D
0729:  MOVF   35,W
072A:  MOVWF  4E
072B:  CALL   47A
....................                   } 
072C:  INCF   3A,F
072D:  GOTO   715
....................  
....................  
....................                } 
072E:  INCF   39,F
072F:  GOTO   710
....................             } 
....................             else if (bkcolor != NONE) 
0730:  GOTO   756
0731:  MOVF   36,W
0732:  SUBLW  04
0733:  BTFSC  03.2
0734:  GOTO   756
....................                { 
....................                   for(l=0; l < size; ++l)    // These two loops change the 
0735:  CLRF   39
0736:  MOVF   34,W
0737:  SUBWF  39,W
0738:  BTFSC  03.0
0739:  GOTO   756
....................                   {                          // character's size 
....................                      for(m=0; m < size; ++m) 
073A:  CLRF   3A
073B:  MOVF   34,W
073C:  SUBWF  3A,W
073D:  BTFSC  03.0
073E:  GOTO   754
....................                      { 
....................                         glcd_pixel(x+m, y+k*size+l, bkcolor); // Draws the pixel 
073F:  MOVF   3A,W
0740:  ADDWF  30,W
0741:  MOVWF  40
0742:  MOVF   38,W
0743:  MOVWF  41
0744:  MOVF   34,W
0745:  MOVWF  42
0746:  CALL   540
0747:  MOVF   21,W
0748:  ADDWF  31,W
0749:  ADDWF  39,W
074A:  MOVWF  41
074B:  MOVF   40,W
074C:  MOVWF  4C
074D:  MOVF   41,W
074E:  MOVWF  4D
074F:  MOVF   36,W
0750:  MOVWF  4E
0751:  CALL   47A
....................                      } 
0752:  INCF   3A,F
0753:  GOTO   73B
....................                   } 
0754:  INCF   39,F
0755:  GOTO   736
....................                } 
....................          } 
0756:  INCF   38,F
0757:  GOTO   6FA
....................       } 
0758:  INCF   37,F
0759:  MOVF   34,W
075A:  ADDWF  30,F
075B:  GOTO   6F5
....................    } 
075C:  INCF   32,F
075D:  BTFSC  03.2
075E:  INCF   33,F
075F:  INCF   30,F
0760:  GOTO   65C
.................... } 
0761:  BCF    0A.3
0762:  GOTO   7C9 (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                                                                            // 
.................... //        Write a text with the 8 x 12 pixels font                            // 
.................... //                                                                            // 
.................... //        Param : x,y - coord from the 1st char                               // 
.................... //                textptr _ pointer to a char array                           // 
.................... //                color - 00 - FF - NONE                                      // 
.................... //                                                                            // 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... /*void glcd_text812(char x, char y, char* textptr, char color, char bkcolor) 
.................... { 
....................    int8 j, k;                              // Loop counters 
....................    int8 pixelData[16];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr)// Loop through the passed string 
....................    { 
....................       if(*textptr <= '~') // 
....................          memcpy(pixelData, FONT812[*textptr - ' '], 16); 
....................       else 
....................          memcpy(pixelData, FONT812[0], 16);   // Default to space 
....................  
....................        // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
....................          case '\n': 
....................             y += 12 + 1; 
....................             continue; 
....................          case '\r': 
....................             x = 0; 
....................             continue; 
....................       } 
....................  
....................       if(x+8 > X_END)          // Performs character wrapping 
....................       { 
....................          x = 0;                           // Set x at far left position 
....................          y += 12 + 1;                 // Set y at next position down 
....................       } 
....................       for(j=0; j<8; j++, ++x)         // Loop through character byte data 
....................       { 
....................          for(k=0; k < 8; ++k)             // Loop through the vertical pixels 
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
....................             { 
....................                glcd_pixel(x, y+k, color); // Draws the pixel 
....................             } 
....................             else if (bkcolor != NONE) 
....................             { 
....................                glcd_pixel(x, y+k, bkcolor); // Draws the pixel 
....................             } 
....................  
....................          } 
....................          for(k=0; k < 4; ++k)             // Loop through the vertical pixels 
....................          { 
....................             if(bit_test(pixelData[j+8], k)) // Check if the pixel should be set 
....................             { 
....................                glcd_pixel(x, y+(k+8), color); // Draws the pixel 
....................             } 
....................               else if (bkcolor != NONE) 
....................             { 
....................                glcd_pixel(x, y+(k+8), bkcolor); // Draws the pixel 
....................             } 
....................  
....................          } 
....................  
....................       } 
....................       ++x; 
....................    } 
.................... }*/ 
....................  
....................  
.................... void main(){ 
0763:  CLRF   04
0764:  BCF    03.7
0765:  MOVLW  1F
0766:  ANDWF  03,F
0767:  MOVLW  61
0768:  BSF    03.5
0769:  MOVWF  0F
076A:  MOVF   0F,W
076B:  BCF    03.5
076C:  BCF    11.3
076D:  MOVLW  19
076E:  MOVWF  13
076F:  MOVLW  A6
0770:  MOVWF  16
0771:  MOVLW  90
0772:  MOVWF  17
0773:  BCF    1F.6
0774:  MOVLW  00
0775:  BSF    03.5
0776:  MOVWF  11
0777:  BCF    03.5
0778:  CLRF   1A
0779:  MOVLW  07
077A:  MOVWF  19
....................    char Texto[] = "!!!!!!"; 
077B:  MOVLW  21
077C:  MOVWF  29
077D:  MOVWF  2A
077E:  MOVWF  2B
077F:  MOVWF  2C
0780:  MOVWF  2D
0781:  MOVWF  2E
0782:  CLRF   2F
....................    setup_adc_ports(NO_ANALOGS); 
0783:  BCF    1F.6
0784:  MOVLW  00
0785:  BSF    03.5
0786:  MOVWF  11
....................    setup_adc(ADC_OFF); 
0787:  BCF    03.5
0788:  BCF    1F.0
....................    setup_timer_1(T1_DISABLED);      // Timer 1 desativado 
0789:  CLRF   10
....................    setup_comparator(NC_NC_NC_NC);   // Comparador não utilizado 
078A:  CLRF   1A
078B:  MOVLW  07
078C:  MOVWF  19
078D:  BSF    03.5
078E:  MOVF   05,W
078F:  MOVWF  05
0790:  MOVLW  03
0791:  BCF    03.5
0792:  MOVWF  20
0793:  DECFSZ 20,F
0794:  GOTO   793
0795:  MOVF   19,W
0796:  BCF    0C.3
....................    setup_vref(FALSE);  
0797:  BSF    03.5
0798:  CLRF   19
....................    glcd_init(100); 
0799:  MOVLW  64
079A:  BCF    03.5
079B:  MOVWF  30
079C:  GOTO   3B1
....................    delay_ms(1000); 
079D:  MOVLW  04
079E:  MOVWF  30
079F:  MOVLW  FA
07A0:  MOVWF  32
07A1:  CALL   1FC
07A2:  DECFSZ 30,F
07A3:  GOTO   79F
....................    glcd_cls(BLACK);    
07A4:  CLRF   31
07A5:  CALL   391
....................    while(TRUE){ 
....................         delay_ms(1000);   
07A6:  MOVLW  04
07A7:  MOVWF  30
07A8:  MOVLW  FA
07A9:  MOVWF  32
07AA:  CALL   1FC
07AB:  DECFSZ 30,F
07AC:  GOTO   7A8
....................         glcd_pixel(50, 50, 0x03);  
07AD:  MOVLW  32
07AE:  MOVWF  4C
07AF:  MOVWF  4D
07B0:  MOVLW  03
07B1:  MOVWF  4E
07B2:  CALL   47A
....................         glcd_circle(50,50,20,YES,BLUE); 
07B3:  MOVLW  32
07B4:  MOVWF  30
07B5:  MOVWF  31
07B6:  MOVLW  14
07B7:  MOVWF  32
07B8:  MOVLW  01
07B9:  MOVWF  33
07BA:  MOVLW  03
07BB:  MOVWF  34
07BC:  GOTO   565
....................         glcd_text57(10,10, texto, 1, WHITE, BLACK); 
07BD:  MOVLW  0A
07BE:  MOVWF  30
07BF:  MOVWF  31
07C0:  CLRF   33
07C1:  MOVLW  29
07C2:  MOVWF  32
07C3:  MOVLW  01
07C4:  MOVWF  34
07C5:  MOVLW  FF
07C6:  MOVWF  35
07C7:  CLRF   36
07C8:  GOTO   65C
....................    } 
07C9:  GOTO   7A6
.................... } 
07CA:  SLEEP

Configuration Fuses:
   Word  1: 30F4   INTRC_IO NOWDT NOPUT MCLR NOPROTECT NOCPD NOBROWNOUT NOIESO NOFCMEN
