CCS PCM C Compiler, Version 4.114, 93514889               16-fev-15 23:04

               Filename: D:\SkyDrive\Eletronica\PROJETOS PIC CCS\MOTOR_BIPOLAR\main.lst

               ROM used: 387 words (5%)
                         Largest free fragment is 2048
               RAM used: 47 (13%) at main() level
                         54 (15%) worst case
               Stack:    3 worst case (2 in main + 1 for interrupts)

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   11B
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.5
0018:  GOTO   01B
0019:  BTFSC  0B.2
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   02F
.................... #include <16F876.h> 
.................... //////// Standard Header file for the PIC16F876 device //////////////// 
.................... #device PIC16F876 
.................... #list 
....................  
.................... #FUSES NOWDT, HS, NOPUT, NOBROWNOUT, NOLVP, NOCPD, NOWRT, NODEBUG, NOPROTECT 
.................... #use delay(clock=16000000) 
*
0045:  MOVLW  4C
0046:  MOVWF  04
0047:  BCF    03.7
0048:  MOVF   00,W
0049:  BTFSC  03.2
004A:  GOTO   059
004B:  MOVLW  05
004C:  MOVWF  78
004D:  CLRF   77
004E:  DECFSZ 77,F
004F:  GOTO   04E
0050:  DECFSZ 78,F
0051:  GOTO   04D
0052:  MOVLW  2E
0053:  MOVWF  77
0054:  DECFSZ 77,F
0055:  GOTO   054
0056:  GOTO   057
0057:  DECFSZ 00,F
0058:  GOTO   04B
0059:  RETURN
.................... //#USE SPI (MASTER, CLK=PIN_B1, DI=PIN_C7, DO=PIN_B0, BAUD = 1000000, MODE=0, BITS=8, STREAM=SPI_1, MSB_FIRST) 
....................  
.................... #define LED_STATUS   pin_b7 
....................  
.................... #define MTA          pin_b3 
.................... #define MTB          pin_b2 
.................... #define MT_B         pin_b1 
.................... #define MT_A         pin_b0 
....................  
.................... int tempo; 
....................  
.................... #int_TIMER0 
.................... void  TIMER0_isr(void){ 
....................    tempo++; 
*
002F:  INCF   27,F
....................    if(tempo == 70){   //  46 * 21,8ms =~ 1002,8ms ou 1,002 segundos  
0030:  MOVF   27,W
0031:  SUBLW  46
0032:  BTFSS  03.2
0033:  GOTO   03A
....................       tempo=0; 
0034:  CLRF   27
....................       output_toggle(LED_STATUS); 
0035:  BSF    03.5
0036:  BCF    06.7
0037:  MOVLW  80
0038:  BCF    03.5
0039:  XORWF  06,F
....................    } 
....................    output_toggle(pin_c4);    
003A:  BCF    28.4
003B:  MOVF   28,W
003C:  BSF    03.5
003D:  MOVWF  07
003E:  MOVLW  10
003F:  BCF    03.5
0040:  XORWF  07,F
.................... } 
....................  
.................... // ----------------------- Função teste Motor de Passo ----------------------------- 
....................  
....................    //char WaveStep[] = {4, 0b0001, 0b0010, 0b0100, 0b1000}; 
0041:  BCF    0B.2
0042:  BCF    0A.3
0043:  BCF    0A.4
0044:  GOTO   01B
....................    char WaveStep[] = {4, 0b0001, 0b0010, 0b0100, 0b1000}; 
*
0128:  MOVLW  04
0129:  BCF    03.5
012A:  MOVWF  29
012B:  MOVLW  01
012C:  MOVWF  2A
012D:  MOVLW  02
012E:  MOVWF  2B
012F:  MOVLW  04
0130:  MOVWF  2C
0131:  MOVLW  08
0132:  MOVWF  2D
....................    char FullStep[] = {4, 0b0011, 0b0110, 0b1100, 0b1001}; 
0133:  MOVLW  04
0134:  MOVWF  2E
0135:  MOVLW  03
0136:  MOVWF  2F
0137:  MOVLW  06
0138:  MOVWF  30
0139:  MOVLW  0C
013A:  MOVWF  31
013B:  MOVLW  09
013C:  MOVWF  32
....................    char HalfStep[] = {8, 0b0001, 0b0011, 0b0010, 0b0110, 0b0100, 0b1100, 0b1000, 0b1001}; 
013D:  MOVLW  08
013E:  MOVWF  33
013F:  MOVLW  01
0140:  MOVWF  34
0141:  MOVLW  03
0142:  MOVWF  35
0143:  MOVLW  02
0144:  MOVWF  36
0145:  MOVLW  06
0146:  MOVWF  37
0147:  MOVLW  04
0148:  MOVWF  38
0149:  MOVLW  0C
014A:  MOVWF  39
014B:  MOVLW  08
014C:  MOVWF  3A
014D:  MOVLW  09
014E:  MOVWF  3B
....................    //                       A,B,_B,_A  
....................    char HalfStep6845[] = {8, 0b0111, 0b0110, 0b1111, 0b1001, 0b1011, 0b0010, 0b0011, 0b0001};   
014F:  MOVLW  08
0150:  MOVWF  3C
0151:  MOVLW  07
0152:  MOVWF  3D
0153:  MOVLW  06
0154:  MOVWF  3E
0155:  MOVLW  0F
0156:  MOVWF  3F
0157:  MOVLW  09
0158:  MOVWF  40
0159:  MOVLW  0B
015A:  MOVWF  41
015B:  MOVLW  02
015C:  MOVWF  42
015D:  MOVLW  03
015E:  MOVWF  43
015F:  MOVLW  01
0160:  MOVWF  44
....................                          
....................    unsigned int delay = 0; 
....................    char *type; 
....................    #define LEFT 0 
....................    #define RIGHT 1 
....................     
....................    void Stepper_setSequence(char *type_){ 
....................     type = type_; 
*
00B4:  MOVF   4A,W
00B5:  MOVWF  47
00B6:  MOVF   49,W
00B7:  MOVWF  46
....................    } 
00B8:  BCF    0A.3
00B9:  BCF    0A.4
00BA:  GOTO   17F (RETURN)
....................     
....................    void Stepper_Speed(unsigned nSteps, char rpm){ 
....................       delay = 60000 / (nSteps * rpm); 
*
005A:  MOVF   49,W
005B:  MOVWF  4B
005C:  MOVF   4A,W
005D:  MOVWF  4C
*
0082:  MOVF   78,W
0083:  MOVWF  4B
0084:  MOVLW  EA
0085:  MOVWF  4D
0086:  MOVLW  60
0087:  MOVWF  4C
0088:  CLRF   4F
0089:  MOVF   4B,W
008A:  MOVWF  4E
*
00AF:  MOVF   78,W
00B0:  MOVWF  45
....................    } 
00B1:  BCF    0A.3
00B2:  BCF    0A.4
00B3:  GOTO   17B (RETURN)
....................     
....................    void Stepper_Step(char direcao){ 
*
00BB:  MOVF   46,W
00BC:  MOVWF  04
00BD:  BCF    03.7
00BE:  BTFSC  47.0
00BF:  BSF    03.7
00C0:  MOVF   00,W
00C1:  MOVWF  4C
00C2:  MOVF   48,W
00C3:  MOVWF  4D
00C4:  MOVF   4C,W
00C5:  MOVWF  4E
*
00DA:  MOVLW  01
00DB:  ADDWF  77,W
00DC:  ADDWF  46,W
00DD:  MOVWF  04
00DE:  BCF    03.7
00DF:  BTFSC  47.0
00E0:  BSF    03.7
00E1:  MOVF   00,W
00E2:  MOVWF  4B
....................       static unsigned stepCount = 0; 
....................       char len = type[0]; 
....................       char val = type[(stepCount % len) + 1]; 
....................        
....................       if(direcao == 0) 
00E3:  MOVF   49,F
00E4:  BTFSS  03.2
00E5:  GOTO   0E8
....................          stepCount++; 
00E6:  INCF   48,F
....................       else 
00E7:  GOTO   0E9
....................          stepCount--; 
00E8:  DECF   48,F
....................        
....................       if(bit_test(val, 0)) 
00E9:  BTFSS  4B.0
00EA:  GOTO   0F0
....................          output_high(MT_A); 
00EB:  BSF    03.5
00EC:  BCF    06.0
00ED:  BCF    03.5
00EE:  BSF    06.0
....................       else 
00EF:  GOTO   0F4
....................          output_low(MT_A);   
00F0:  BSF    03.5
00F1:  BCF    06.0
00F2:  BCF    03.5
00F3:  BCF    06.0
....................        
....................       if(bit_test(val, 1)) 
00F4:  BTFSS  4B.1
00F5:  GOTO   0FB
....................          output_high(MT_B); 
00F6:  BSF    03.5
00F7:  BCF    06.1
00F8:  BCF    03.5
00F9:  BSF    06.1
....................       else 
00FA:  GOTO   0FF
....................          output_low(MT_B);   
00FB:  BSF    03.5
00FC:  BCF    06.1
00FD:  BCF    03.5
00FE:  BCF    06.1
....................        
....................       if(bit_test(val, 2)) 
00FF:  BTFSS  4B.2
0100:  GOTO   106
....................          output_high(MTB); 
0101:  BSF    03.5
0102:  BCF    06.2
0103:  BCF    03.5
0104:  BSF    06.2
....................       else 
0105:  GOTO   10A
....................          output_low(MTB);   
0106:  BSF    03.5
0107:  BCF    06.2
0108:  BCF    03.5
0109:  BCF    06.2
....................        
....................       if(bit_test(val, 3)) 
010A:  BTFSS  4B.3
010B:  GOTO   111
....................          output_high(MTA); 
010C:  BSF    03.5
010D:  BCF    06.3
010E:  BCF    03.5
010F:  BSF    06.3
....................       else 
0110:  GOTO   115
....................          output_low(MTA);            
0111:  BSF    03.5
0112:  BCF    06.3
0113:  BCF    03.5
0114:  BCF    06.3
....................       delay_ms(10); 
0115:  MOVLW  0A
0116:  MOVWF  4C
0117:  CALL   045
....................    } 
0118:  BCF    0A.3
0119:  BCF    0A.4
011A:  GOTO   181 (RETURN)
.................... void main(void){ 
011B:  CLRF   04
011C:  BCF    03.7
011D:  MOVLW  1F
011E:  ANDWF  03,F
011F:  MOVLW  FF
0120:  MOVWF  28
0121:  CLRF   45
0122:  CLRF   48
0123:  BSF    03.5
0124:  BSF    1F.0
0125:  BSF    1F.1
0126:  BSF    1F.2
0127:  BCF    1F.3
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_32|RTCC_8_bit);  //RTCC_DIV_256    //21.8 ms overflow 
*
0161:  BSF    03.5
0162:  MOVF   01,W
0163:  ANDLW  C0
0164:  IORLW  04
0165:  MOVWF  01
....................    setup_adc_ports(NO_ANALOGS); 
0166:  BSF    1F.0
0167:  BSF    1F.1
0168:  BSF    1F.2
0169:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
016A:  BCF    03.5
016B:  BCF    1F.0
....................    enable_interrupts(INT_TIMER0); 
016C:  BSF    0B.5
....................    enable_interrupts(GLOBAL);    
016D:  MOVLW  C0
016E:  IORWF  0B,F
....................  
....................    delay_ms(2000); 
016F:  MOVLW  08
0170:  MOVWF  49
0171:  MOVLW  FA
0172:  MOVWF  4C
0173:  CALL   045
0174:  DECFSZ 49,F
0175:  GOTO   171
....................        
....................    Stepper_Speed(72,2); 
0176:  MOVLW  48
0177:  MOVWF  49
0178:  MOVLW  02
0179:  MOVWF  4A
017A:  GOTO   05A
....................    Stepper_setSequence(HalfStep6845); 
017B:  CLRF   4A
017C:  MOVLW  3C
017D:  MOVWF  49
017E:  GOTO   0B4
....................  
....................    while(true){ 
....................       Stepper_Step(LEFT); 
017F:  CLRF   49
0180:  GOTO   0BB
....................    } 
0181:  GOTO   17F
.................... } 
....................  
.................... //--------------------------------------------------------------------------------- 
....................  
0182:  SLEEP

Configuration Fuses:
   Word  1: 3D3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
