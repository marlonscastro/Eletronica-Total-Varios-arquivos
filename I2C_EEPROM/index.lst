CCS PCH C Compiler, Version 4.114, 93467473               07-ago-11 14:53

               Filename: D:\ELETRONICA\PROJETOS PIC CCS\I2C_EEPROM\index.lst

               ROM used: 1502 bytes (5%)
                         Largest free fragment is 31266
               RAM used: 7 (0%) at main() level
                         28 (1%) worst case
               Stack:    8 locations

*
0000:  GOTO   05B4
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #use delay(clock=48000000) 
*
020E:  MOVLW  01
0210:  SUBWF  07,F
0212:  BNC   022C
0214:  CLRF   FEA
0216:  MOVLW  07
0218:  MOVWF  FE9
021A:  MOVF   FEF,W
021C:  BZ    022C
021E:  MOVLW  02
0220:  MOVWF  00
0222:  DECFSZ 00,F
0224:  BRA    0222
0226:  BRA    0228
0228:  DECFSZ FEF,F
022A:  BRA    021E
022C:  RETLW  00
*
0256:  CLRF   FEA
0258:  MOVLW  0A
025A:  MOVWF  FE9
025C:  MOVF   FEF,W
025E:  BZ    027C
0260:  MOVLW  0F
0262:  MOVWF  01
0264:  CLRF   00
0266:  DECFSZ 00,F
0268:  BRA    0266
026A:  DECFSZ 01,F
026C:  BRA    0264
026E:  MOVLW  8F
0270:  MOVWF  00
0272:  DECFSZ 00,F
0274:  BRA    0272
0276:  NOP   
0278:  DECFSZ FEF,F
027A:  BRA    0260
027C:  RETLW  00
.................... //#fuses HS, PUT, NOWDT, NOBROWNOUT, NOLVP 
.................... #fuses HSPLL, PLL4, CPUDIV1, PUT, NOWDT, NOBROWNOUT, NOLVP 
....................  
.................... #include "HMF6598SYH-PY.c" 
.................... /* 
.................... const BYTE TEXT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE  01 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x00, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x00, // / 
....................                          0x3E, 0x51, 0x49, 0x3e, 0x00, // 0      17 
....................                          0x04, 0x02, 0x7F, 0x00, 0x00, // 1 
....................                          0x00, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x00, 0x41, 0x49, 0x49, 0x36, // 3      20 
....................                          0x18, 0x14, 0x12, 0x7F, 0x00, // 4 
....................                          0x00, 0x27, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x32, 0x00, // 6      23 
....................                          0x00, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x36, 0x00, // 8 
....................                          0x26, 0x49, 0x49, 0x3e, 0x00, // 9      26 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x00, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x7e, 0x00, // A      34 
....................                          0x7F, 0x49, 0x49, 0x36, 0x00, // B 
....................                          0x3E, 0x41, 0x41, 0x22, 0x00, // C 
....................                          0x7F, 0x41, 0x41, 0x3e, 0x00, // D      37 
....................                          0x7F, 0x49, 0x49, 0x41, 0x00, // E 
....................                          0x7F, 0x09, 0x09, 0x01, 0x00, // F 
....................                          0x3E, 0x41, 0x49, 0x3a, 0x00, // G      40 
....................                          0x7F, 0x08, 0x08, 0x7f, 0x00, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x3f, 0x00, // J      43 
....................                          0x7F, 0x08, 0x14, 0x63, 0x00, // K 
....................                          0x7F, 0x40, 0x40, 0x00, 0x00, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M      46 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x3e, 0x00, // O 
....................                          0x7F, 0x09, 0x09, 0x06, 0x00, // P      49 
....................                          0x1E, 0x21, 0x21, 0x5e, 0x00, // Q 
....................                          0x7F, 0x09, 0x09, 0x76, 0x00};// R      51 
....................  
.................... const BYTE TEXT2[44][5]={0x26, 0x49, 0x49, 0x32, 0x00, // S 
....................                          0x00, 0x01, 0x7F, 0x01, 0x00, // T 
....................                          0x3F, 0x40, 0x40, 0x3f, 0x00, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x47, 0x00, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x00, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          //0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x38, 0x44, 0x44, 0x7c, 0x00,  // a  
....................                          0x7F, 0x44, 0x44, 0x38, 0x00, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x00, // c 
....................                          0x38, 0x44, 0x44, 0x7f, 0x00, // d 
....................                          0x38, 0x54, 0x54, 0x18, 0x00, // e 
....................                          0x00, 0x04, 0x7E, 0x05, 0x00, // f 
....................                          0x08, 0x54, 0x54, 0x3c, 0x00, // g 
....................                          0x7F, 0x08, 0x04, 0x78, 0x00, // h 
....................                          0x00, 0x00, 0x7a, 0x00, 0x00, // i 
....................                          0x20, 0x00, 0x44, 0x3D, 0x00, // j 
....................                          0x7e, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x04, 0x04, 0x78, 0x00, // n 
....................                          0x38, 0x44, 0x44, 0x38, 0x00, // o 
....................                          0x7C, 0x14, 0x14, 0x08, 0x00, // p 
....................                          0x08, 0x14, 0x14, 0x7c, 0x00, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x00, // r 
....................                          0x08, 0x54, 0x54, 0x20, 0x00, // s 
....................                          0x00, 0x04, 0x3F, 0x44, 0x00, // t 
....................                          0x00, 0x3c, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x3c, 0x00, // y 
....................                          0x00, 0x64, 0x54, 0x4C, 0x00, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
....................  
.................... */ 
....................  
.................... const BYTE TEXT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE  01 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x00, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x00, // / 
....................                          0x3E, 0x51, 0x49, 0x3e, 0x00, // 0      17 
....................                          0x04, 0x02, 0x7F, 0x00, 0x00, // 1 
....................                          0x00, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x00, 0x41, 0x49, 0x49, 0x36, // 3      20 
....................                          0x18, 0x14, 0x12, 0x7F, 0x00, // 4 
....................                          0x00, 0x27, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x32, 0x00, // 6      23 
....................                          0x00, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x36, 0x00, // 8 
....................                          0x26, 0x49, 0x49, 0x3e, 0x00, // 9      26 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x00, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x7e, 0x00, // A      34 
....................                          0x7F, 0x49, 0x49, 0x36, 0x00, // B 
....................                          0x3E, 0x41, 0x41, 0x22, 0x00, // C 
....................                          0x7F, 0x41, 0x41, 0x3e, 0x00, // D      37 
....................                          0x7F, 0x49, 0x49, 0x41, 0x00, // E 
....................                          0x7F, 0x09, 0x09, 0x01, 0x00, // F 
....................                          0x3E, 0x41, 0x49, 0x3a, 0x00, // G      40 
....................                          0x7F, 0x08, 0x08, 0x7f, 0x00, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x3f, 0x00, // J      43 
....................                          0x7F, 0x08, 0x14, 0x63, 0x00, // K 
....................                          0x7F, 0x40, 0x40, 0x00, 0x00, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M      46 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x3e, 0x00, // O 
....................                          0x7F, 0x09, 0x09, 0x06, 0x00, // P      49 
....................                          0x1E, 0x21, 0x21, 0x5e, 0x00, // Q 
....................                          0x7F, 0x09, 0x09, 0x76, 0x00};// R      51 
....................  
.................... const BYTE TEXT2[44][5]={0x26, 0x49, 0x49, 0x32, 0x00, // S 
....................                          0x00, 0x01, 0x7F, 0x01, 0x00, // T 
....................                          0x3F, 0x40, 0x40, 0x3f, 0x00, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x47, 0x00, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x00, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          //0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x38, 0x44, 0x44, 0x7c, 0x00,  // a  
....................                          0x7F, 0x44, 0x44, 0x38, 0x00, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x00, // c 
....................                          0x38, 0x44, 0x44, 0x7f, 0x00, // d 
....................                          0x38, 0x54, 0x54, 0x18, 0x00, // e 
....................                          0x00, 0x04, 0x7E, 0x05, 0x00, // f 
....................                          0x08, 0x54, 0x54, 0x3c, 0x00, // g 
....................                          0x7F, 0x08, 0x04, 0x78, 0x00, // h 
....................                          0x00, 0x00, 0x7a, 0x00, 0x00, // i 
....................                          0x20, 0x00, 0x44, 0x3D, 0x00, // j 
....................                          0x7e, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x04, 0x04, 0x78, 0x00, // n 
....................                          0x38, 0x44, 0x44, 0x38, 0x00, // o 
....................                          0x7C, 0x14, 0x14, 0x08, 0x00, // p 
....................                          0x08, 0x14, 0x14, 0x7c, 0x00, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x00, // r 
....................                          0x08, 0x54, 0x54, 0x20, 0x00, // s 
....................                          0x00, 0x04, 0x3F, 0x44, 0x00, // t 
....................                          0x00, 0x3c, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x3c, 0x00, // y 
....................                          0x00, 0x64, 0x54, 0x4C, 0x00, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
....................  
....................  
.................... #define HMF6598_RS    pin_A0 
.................... #define HMF6598_RES   pin_A1 
.................... #define HMF6598_CS1   pin_A2 
.................... #define HMF6598_RD    pin_A3 
.................... #define HMF6598_WR    pin_A4 
....................  
.................... #define ON   1 
.................... #define OFF  0 
....................  
.................... int8 CurrentLine = 0; 
.................... int8 QuantChrLine = 0; 
.................... int8 OffsetX = 0; 
....................  
.................... void    HMF6598_InitLcd(void); 
.................... void    HMF6598_Write_command(char byte_command); 
.................... void    HMF6598_Write_data(char byte_data); 
.................... char    HMF6598_Read_data(); 
.................... void    HMF6598_Gotoxy(int8 x, int y); 
.................... void    HMF6598_Printchar(char cvar); 
.................... void    HMF6598_PutPixel(int8 x,int8 y, int1 COLOR); 
.................... void    HMF6598_OutPort(char byteDC); 
.................... void    clear_screen(void); 
.................... void    newLine(void); 
.................... void    HMF6598_circle(int x, int y, int radius, int1 fill, int1 COLOR); 
.................... void    HMF6598_line(int x1, int y1, int x2, int y2, int1 COLOR); 
....................  
.................... void    HMF6598_InitLcd(void){ 
....................     
....................    output_low(HMF6598_CS1); // Chip Enabled 
*
034A:  BCF    F92.2
034C:  BCF    F89.2
....................    output_low(HMF6598_RES); 
034E:  BCF    F92.1
0350:  BCF    F89.1
....................    delay_us(200); 
0352:  MOVLW  C8
0354:  MOVWF  07
0356:  RCALL  020E
....................    output_high(HMF6598_RES);  
0358:  BCF    F92.1
035A:  BSF    F89.1
....................    delay_us(200);    
035C:  MOVLW  C8
035E:  MOVWF  07
0360:  RCALL  020E
....................  
....................    HMF6598_Write_command(0xc8);   // Duty = 65    
0362:  MOVLW  C8
0364:  MOVWF  18
0366:  RCALL  024A
....................    HMF6598_Write_command(0xa3);   // BIAS 1/9 
0368:  MOVLW  A3
036A:  MOVWF  18
036C:  RCALL  024A
....................    HMF6598_Write_command(0xa0);   // ADC Select 
036E:  MOVLW  A0
0370:  MOVWF  18
0372:  RCALL  024A
....................    HMF6598_Write_command(0xa6);   // Normal display 0xa6:  Reverse Display :0xa7 
0374:  MOVLW  A6
0376:  MOVWF  18
0378:  RCALL  024A
....................    HMF6598_Write_command(0x2c);   //---------------------------------------------  
037A:  MOVLW  2C
037C:  MOVWF  18
037E:  RCALL  024A
....................    delay_ms(3);                   // 
0380:  MOVLW  03
0382:  MOVWF  0A
0384:  RCALL  0256
....................    HMF6598_Write_command(0x2e);   // Power Control Set VR, VC, VF  
0386:  MOVLW  2E
0388:  MOVWF  18
038A:  RCALL  024A
....................    delay_ms(3);                   // 
038C:  MOVLW  03
038E:  MOVWF  0A
0390:  RCALL  0256
....................    HMF6598_Write_command(0x2f);   //--------------------------------------------- 
0392:  MOVLW  2F
0394:  MOVWF  18
0396:  RCALL  024A
....................    HMF6598_Write_command(0x20);   // 1+Rb/Ra Ratio    
0398:  MOVLW  20
039A:  MOVWF  18
039C:  RCALL  024A
....................    HMF6598_Write_command(0x40);   // EVER register Set    
039E:  MOVLW  40
03A0:  MOVWF  18
03A2:  RCALL  024A
....................     
....................    //Set Brightness   
....................    HMF6598_Write_command(0x81);  
03A4:  MOVLW  81
03A6:  MOVWF  18
03A8:  RCALL  024A
....................    HMF6598_Write_command(0x32); 
03AA:  MOVLW  32
03AC:  MOVWF  18
03AE:  RCALL  024A
....................     
....................    HMF6598_Write_command(0xe0);   // Set Modify Read  0xee to cancel 
03B0:  MOVLW  E0
03B2:  MOVWF  18
03B4:  RCALL  024A
....................  
....................    clear_screen(); 
03B6:  BRA    031A
....................    HMF6598_Write_command(0xaf); // Display ON 
03B8:  MOVLW  AF
03BA:  MOVWF  18
03BC:  RCALL  024A
.................... } 
03BE:  GOTO   05D0 (RETURN)
....................  
.................... void HMF6598_OutPort(char byteDC){ 
....................   set_tris_b(0x00); 
*
022E:  MOVLW  00
0230:  MOVWF  F93
....................   output_low(HMF6598_CS1); 
0232:  BCF    F92.2
0234:  BCF    F89.2
....................   output_high(HMF6598_RD);  
0236:  BCF    F92.3
0238:  BSF    F89.3
....................   output_low(HMF6598_WR);   
023A:  BCF    F92.4
023C:  BCF    F89.4
....................   output_b(byteDC); 
023E:  CLRF   F93
0240:  MOVFF  19,F8A
....................   output_high(HMF6598_CS1);     
0244:  BCF    F92.2
0246:  BSF    F89.2
.................... } 
0248:  RETLW  00
.................... void    HMF6598_Write_command(char byte_command){ 
....................   output_low(HMF6598_RS);          // Write Command Enabled 
024A:  BCF    F92.0
024C:  BCF    F89.0
....................   HMF6598_OutPort(byte_command); 
024E:  MOVFF  18,19
0252:  RCALL  022E
.................... } 
0254:  RETLW  00
.................... void    HMF6598_Write_data(char byte_data){ 
....................   output_high(HMF6598_RS);         // Write data Enabled 
*
0302:  BCF    F92.0
0304:  BSF    F89.0
....................   HMF6598_OutPort(byte_data); 
0306:  MOVFF  13,19
030A:  RCALL  022E
....................   OffsetX++; 
030C:  INCF   06,F
....................   HMF6598_Gotoxy(OffsetX,CurrentLine); 
030E:  MOVFF  06,14
0312:  MOVFF  04,15
0316:  RCALL  02A6
.................... } 
0318:  RETLW  00
....................  
.................... char    HMF6598_Read_data(){ 
....................   set_tris_b(0xff);     
....................   output_low(HMF6598_CS1); 
....................   output_high(HMF6598_RS); 
....................   output_low(HMF6598_RD); 
....................   output_high(HMF6598_WR); 
....................   output_high(HMF6598_CS1);    
....................   output_low(HMF6598_CS1); 
....................   output_high(HMF6598_RS); 
....................   output_low(HMF6598_RD); 
....................   output_high(HMF6598_WR); 
....................   return input_b(); 
....................   output_high(HMF6598_CS1);      
.................... } 
....................  
.................... void newLine(){ 
....................   if(CurrentLine < 7){  // New Line Command 
*
040A:  MOVF   04,W
040C:  SUBLW  06
040E:  BNC   042A
....................       HMF6598_Write_command((CurrentLine+1)|0xb0);  // Set Page Address to 0 (0 a 7) 
0410:  MOVLW  01
0412:  ADDWF  04,W
0414:  IORLW  B0
0416:  MOVWF  12
0418:  MOVWF  18
041A:  RCALL  024A
....................       HMF6598_Write_command(0x00);  // Set LSB for index Column 
041C:  CLRF   18
041E:  RCALL  024A
....................       HMF6598_Write_command(0x10);  // Set MSB for index Column    
0420:  MOVLW  10
0422:  MOVWF  18
0424:  RCALL  024A
....................       CurrentLine+=1; 
0426:  MOVLW  01
0428:  ADDWF  04,F
....................   } 
....................   QuantChrLine = 1; 
042A:  MOVLW  01
042C:  MOVWF  05
....................   OffsetX = 0; 
042E:  CLRF   06
.................... } 
0430:  GOTO   0440 (RETURN)
.................... void clear_screen(void) { 
....................    int p, c; 
....................    for(p = 0; p < 8; p++) { 
*
031A:  CLRF   07
031C:  MOVF   07,W
031E:  SUBLW  07
0320:  BNC   0340
....................       for(c = 0; c < 128; c++) { 
0322:  CLRF   08
0324:  MOVF   08,W
0326:  SUBLW  7F
0328:  BNC   033C
....................          HMF6598_Gotoxy(c,p); 
032A:  MOVFF  08,14
032E:  MOVFF  07,15
0332:  RCALL  02A6
....................          HMF6598_Write_data(0x00); 
0334:  CLRF   13
0336:  RCALL  0302
....................       } 
0338:  INCF   08,F
033A:  BRA    0324
....................    } 
033C:  INCF   07,F
033E:  BRA    031C
....................    HMF6598_Gotoxy(0,0);    
0340:  CLRF   14
0342:  CLRF   15
0344:  RCALL  02A6
.................... } 
0346:  GOTO   03B8 (RETURN)
.................... void    HMF6598_Gotoxy(int x, int y){ 
*
02A6:  CLRF   16
....................    int8 OffsetChr = 0; 
....................     
....................    HMF6598_Write_command(0xb0 | y); 
02A8:  MOVF   15,W
02AA:  IORLW  B0
02AC:  MOVWF  17
02AE:  MOVWF  18
02B0:  RCALL  024A
....................    HMF6598_Write_command((0x00 | x) & 0x0f); 
02B2:  MOVF   14,W
02B4:  ANDLW  0F
02B6:  MOVWF  17
02B8:  MOVWF  18
02BA:  RCALL  024A
....................    HMF6598_Write_command(0x10|(x>>4)); 
02BC:  SWAPF  14,W
02BE:  MOVWF  00
02C0:  MOVLW  0F
02C2:  ANDWF  00,F
02C4:  MOVF   00,W
02C6:  IORLW  10
02C8:  MOVWF  17
02CA:  MOVWF  18
02CC:  RCALL  024A
....................     
....................    OffsetChr = (x+1)/6; 
02CE:  MOVLW  01
02D0:  ADDWF  14,W
02D2:  MOVWF  18
02D4:  MOVWF  19
02D6:  MOVLW  06
02D8:  MOVWF  1A
02DA:  RCALL  027E
02DC:  MOVFF  01,16
....................    if((x+1)%6) 
02E0:  MOVLW  01
02E2:  ADDWF  14,W
02E4:  MOVWF  18
02E6:  MOVWF  19
02E8:  MOVLW  06
02EA:  MOVWF  1A
02EC:  RCALL  027E
02EE:  MOVF   00,W
02F0:  BZ    02F4
....................       OffsetChr++;    
02F2:  INCF   16,F
....................    CurrentLine = y; 
02F4:  MOVFF  15,04
....................    QuantChrLine = OffsetChr; 
02F8:  MOVFF  16,05
....................    OffsetX = x; 
02FC:  MOVFF  14,06
.................... } 
0300:  RETLW  00
.................... void    HMF6598_Printchar(char cvar){ 
....................    int i; 
....................    if (QuantChrLine > 21)   
*
0434:  MOVF   05,W
0436:  SUBLW  15
0438:  BC    043E
....................        newLine();  
043A:  BRA    040A
....................    else 
043C:  BRA    0440
....................        QuantChrLine++;     
043E:  INCF   05,F
....................    if(cvar == 0x20) 
0440:  MOVF   10,W
0442:  SUBLW  20
0444:  BNZ   0458
....................       for(i=0;i<2;i++) 
0446:  CLRF   11
0448:  MOVF   11,W
044A:  SUBLW  01
044C:  BNC   0456
....................          HMF6598_Write_data(0x00); 
044E:  CLRF   13
0450:  RCALL  0302
0452:  INCF   11,F
0454:  BRA    0448
....................    else{ 
0456:  BRA    04F4
....................       for(i=0;i<5;i++){ 
0458:  CLRF   11
045A:  MOVF   11,W
045C:  SUBLW  04
045E:  BNC   04F4
....................          if (cvar < 0x53){ 
0460:  MOVF   10,W
0462:  SUBLW  52
0464:  BNC   04AC
....................             if(TEXT[cvar-0x20][i])          
0466:  MOVLW  20
0468:  SUBWF  10,W
046A:  MULLW  05
046C:  MOVF   FF3,W
046E:  CLRF   13
0470:  MOVWF  12
0472:  CLRF   03
0474:  MOVF   11,W
0476:  ADDWF  12,W
0478:  MOVWF  01
047A:  MOVF   13,W
047C:  ADDWFC 03,F
047E:  MOVF   01,W
0480:  RCALL  0004
0482:  MOVWF  01
0484:  MOVF   01,F
0486:  BZ    04AA
....................                HMF6598_Write_data(TEXT[cvar-0x20][i]);       
0488:  MOVLW  20
048A:  SUBWF  10,W
048C:  MULLW  05
048E:  MOVF   FF3,W
0490:  CLRF   13
0492:  MOVWF  12
0494:  CLRF   03
0496:  MOVF   11,W
0498:  ADDWF  12,W
049A:  MOVWF  01
049C:  MOVF   13,W
049E:  ADDWFC 03,F
04A0:  MOVF   01,W
04A2:  RCALL  0004
04A4:  MOVWF  12
04A6:  MOVWF  13
04A8:  RCALL  0302
....................          } 
....................          else { 
04AA:  BRA    04F0
....................             if(TEXT2[cvar-0x53][i])                
04AC:  MOVLW  53
04AE:  SUBWF  10,W
04B0:  MULLW  05
04B2:  MOVF   FF3,W
04B4:  CLRF   13
04B6:  MOVWF  12
04B8:  CLRF   03
04BA:  MOVF   11,W
04BC:  ADDWF  12,W
04BE:  MOVWF  01
04C0:  MOVF   13,W
04C2:  ADDWFC 03,F
04C4:  MOVF   01,W
04C6:  RCALL  0114
04C8:  MOVWF  01
04CA:  MOVF   01,F
04CC:  BZ    04F0
....................                HMF6598_Write_data(TEXT2[cvar-0x53][i]);                
04CE:  MOVLW  53
04D0:  SUBWF  10,W
04D2:  MULLW  05
04D4:  MOVF   FF3,W
04D6:  CLRF   13
04D8:  MOVWF  12
04DA:  CLRF   03
04DC:  MOVF   11,W
04DE:  ADDWF  12,W
04E0:  MOVWF  01
04E2:  MOVF   13,W
04E4:  ADDWFC 03,F
04E6:  MOVF   01,W
04E8:  RCALL  0114
04EA:  MOVWF  12
04EC:  MOVWF  13
04EE:  RCALL  0302
....................          } 
....................       } 
04F0:  INCF   11,F
04F2:  BRA    045A
....................    } 
....................    HMF6598_Write_data(0x00); 
04F4:  CLRF   13
04F6:  RCALL  0302
.................... } 
04F8:  GOTO   0510 (RETURN)
.................... void HMF6598_PutPixel(int x, int y, int1 COLOR){ 
....................    char BytePlot = 0, tempByte; 
....................    if((x > 127)||(y > 63)) 
....................       return; 
....................    BytePlot |= 1; 
....................    BytePlot<<=(y%8); 
....................    tempByte = BytePlot; 
....................    HMF6598_Gotoxy(x,(y/8)); 
....................    BytePlot|=HMF6598_Read_data(); 
....................    if(COLOR == OFF) 
....................       BytePlot-=tempByte; 
....................    HMF6598_Write_data(BytePlot); 
.................... } 
....................  
.................... void HMF6598_circle(int x, int y, int radius, int1 fill, int1 COLOR){ 
....................    signed int a, b, P; 
....................    a = 0; 
....................    b = radius; 
....................    P = 1 - radius; 
....................    do{ 
....................       if(fill){ 
....................          HMF6598_line(x-a, y+b, x+a, y+b, color); 
....................          HMF6598_line(x-a, y-b, x+a, y-b, color); 
....................          HMF6598_line(x-b, y+a, x+b, y+a, color); 
....................          HMF6598_line(x-b, y-a, x+b, y-a, color); 
....................       } 
....................       else{ 
....................          HMF6598_PutPixel(a+x, b+y, color); 
....................          HMF6598_PutPixel(b+x, a+y, color); 
....................          HMF6598_PutPixel(x-a, b+y, color); 
....................          HMF6598_PutPixel(x-b, a+y, color); 
....................          HMF6598_PutPixel(b+x, y-a, color); 
....................          HMF6598_PutPixel(a+x, y-b, color); 
....................          HMF6598_PutPixel(x-a, y-b, color); 
....................          HMF6598_PutPixel(x-b, y-a, color); 
....................       } 
....................       if(P < 0) 
....................          P+= 3 + 2*a++; 
....................       else 
....................          P+= 5 + 2*(a++ - b--); 
....................     } while(a <= b); 
.................... } 
....................  
.................... void HMF6598_line(int x1, int y1, int x2, int y2, int1 COLOR){ 
....................    signed int  x, y, addx, addy, dx, dy; 
....................    signed long P; 
....................    int i; 
....................    dx = abs((signed int)(x2 - x1)); 
....................    dy = abs((signed int)(y2 - y1)); 
....................    x = x1; 
....................    y = y1; 
....................  
....................    if(x1 > x2) 
....................       addx = -1; 
....................    else 
....................       addx = 1; 
....................    if(y1 > y2) 
....................       addy = -1; 
....................    else 
....................       addy = 1; 
....................    if(dx >= dy){ 
....................       P = 2*dy - dx; 
....................       for(i=0; i<=dx; ++i){ 
....................          HMF6598_PutPixel(x, y, COLOR); 
....................          if(P < 0){ 
....................             P += 2*dy; 
....................             x += addx; 
....................          } 
....................          else{ 
....................             P += 2*dy - 2*dx; 
....................             x += addx; 
....................             y += addy; 
....................          } 
....................       } 
....................    } 
....................    else{ 
....................       P = 2*dx - dy; 
....................       for(i=0; i<=dy; ++i){ 
....................          HMF6598_PutPixel(x, y, COLOR); 
....................  
....................          if(P < 0){ 
....................             P += 2*dx; 
....................             y += addy; 
....................          } 
....................          else{ 
....................             P += 2*dx - 2*dy; 
....................             x += addx; 
....................             y += addy; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... #include "i2cEEprom.c" 
.................... void SerialWrite(int byte_data); 
.................... void Write_i2cEeprom(int16 Addr, char data); 
.................... int8 SerialRead(int16 Addr); 
.................... int8 Read_i2cEeprom(int16 Addr); 
.................... void Communication(int1 Condition); 
....................  
.................... #define SDA    pin_D0 
.................... #define SCL    pin_D1 
....................  
.................... #define START  1 
.................... #define STOP   0 
....................  
.................... void Communication(int1 Condition){ 
....................    output_high(SCL); 
*
03C2:  BCF    F95.1
03C4:  BSF    F8C.1
....................    if(Condition == START){ 
03C6:  DECFSZ 0A,W
03C8:  BRA    03E8
....................       output_high(SDA); 
03CA:  BCF    F95.0
03CC:  BSF    F8C.0
....................       delay_us(5); 
03CE:  MOVLW  13
03D0:  MOVWF  00
03D2:  DECFSZ 00,F
03D4:  BRA    03D2
03D6:  BRA    03D8
....................       output_low(SDA); 
03D8:  BCF    F95.0
03DA:  BCF    F8C.0
....................       delay_us(5);       
03DC:  MOVLW  13
03DE:  MOVWF  00
03E0:  DECFSZ 00,F
03E2:  BRA    03E0
03E4:  BRA    03E6
....................    } 
....................    else{ 
03E6:  BRA    0404
....................       output_low(SDA); 
03E8:  BCF    F95.0
03EA:  BCF    F8C.0
....................       delay_us(5);;       
03EC:  MOVLW  13
03EE:  MOVWF  00
03F0:  DECFSZ 00,F
03F2:  BRA    03F0
03F4:  BRA    03F6
....................       output_high(SDA);       
03F6:  BCF    F95.0
03F8:  BSF    F8C.0
....................       delay_us(5);       
03FA:  MOVLW  13
03FC:  MOVWF  00
03FE:  DECFSZ 00,F
0400:  BRA    03FE
0402:  BRA    0404
....................    } 
....................    output_low(SCL);    
0404:  BCF    F95.1
0406:  BCF    F8C.1
.................... } 
0408:  RETLW  00
.................... int8 Read_i2cEeprom(int16 Addr){ 
....................    Communication(START); 
....................    SerialWrite(0xA0|(Addr<<9));   // 1010-0000 |   Write 
....................    SerialWrite(0x00|Addr); 
....................    SerialWrite(0xA1|(Addr<<9));   // 1010-0001 |   Read  
....................    return SerialRead(Addr); 
....................    Communication(STOP);    
....................    delay_ms(5);    
.................... } 
.................... void Write_i2cEeprom(int16 Addr, char data){ 
....................    Communication(START); 
*
0576:  MOVLW  01
0578:  MOVWF  0A
057A:  RCALL  03C2
....................    SerialWrite(0xA0|(Addr<<9));   // 1010-0000 |  
057C:  BCF    FD8.0
057E:  CLRF   02
0580:  RLCF   07,W
0582:  MOVWF  03
0584:  MOVF   02,W
0586:  IORLW  A0
0588:  MOVWF  0A
058A:  MOVFF  03,0B
058E:  MOVWF  0C
0590:  RCALL  051E
....................    SerialWrite(0x00|Addr); 
0592:  MOVFF  07,0A
0596:  MOVFF  08,0B
059A:  MOVFF  07,0C
059E:  RCALL  051E
....................    SerialWrite(data);  
05A0:  MOVFF  09,0C
05A4:  RCALL  051E
....................    Communication(STOP); 
05A6:  CLRF   0A
05A8:  RCALL  03C2
....................    delay_ms(8); 
05AA:  MOVLW  08
05AC:  MOVWF  0A
05AE:  RCALL  0256
.................... } 
05B0:  GOTO   05DA (RETURN)
.................... int8 SerialRead(int16 Addr){ 
....................    int i = 9; 
....................    BYTE byte_lido = 0x00; 
....................    while(i>0){ 
....................       output_low(SCL); 
....................       delay_us(4);       
....................       if((i==1) && (input(SDA))){ 
....................       } 
....................         // i = 9; 
....................       else{ 
....................          if(!input(SDA)) 
....................             byte_lido<<=1; 
....................          else{ 
....................             byte_lido<<=1; 
....................             byte_lido|=0x01; 
....................          } 
....................       } 
....................       output_high(SCL);       
....................       delay_us(5);       
....................       i--;       
....................    } 
....................    return byte_lido; 
.................... } 
.................... void SerialWrite(int byte_data){ 
*
051E:  MOVLW  09
0520:  MOVWF  0D
....................    int i = 9; 
....................    while(i>0){ 
0522:  MOVF   0D,F
0524:  BZ    0574
....................       output_low(SCL); 
0526:  BCF    F95.1
0528:  BCF    F8C.1
....................       delay_us(5); 
052A:  MOVLW  13
052C:  MOVWF  00
052E:  DECFSZ 00,F
0530:  BRA    052E
0532:  BRA    0534
....................       if((i==1) && (input(SDA))){ 
0534:  DECFSZ 0D,W
0536:  BRA    0552
0538:  BSF    F95.0
053A:  BTFSS  F83.0
053C:  BRA    0552
....................          //i = 9; 
....................          HMF6598_Gotoxy(0,5); 
053E:  CLRF   14
0540:  MOVLW  05
0542:  MOVWF  15
0544:  RCALL  02A6
....................          printf(HMF6598_Printchar, "Write error!"); 
0546:  MOVLW  00
0548:  MOVWF  FF6
054A:  MOVLW  02
054C:  MOVWF  FF7
054E:  BRA    04FC
....................       } 
....................       else{ 
0550:  BRA    0562
....................          if((byte_data&0x80)==0) 
0552:  MOVF   0C,W
0554:  ANDLW  80
0556:  BNZ   055E
....................             output_low(SDA); 
0558:  BCF    F95.0
055A:  BCF    F8C.0
....................          else 
055C:  BRA    0562
....................             output_high(SDA); 
055E:  BCF    F95.0
0560:  BSF    F8C.0
....................       }   
....................       output_high(SCL);       
0562:  BCF    F95.1
0564:  BSF    F8C.1
....................       delay_us(5);       
0566:  MOVLW  13
0568:  MOVWF  00
056A:  DECFSZ 00,F
056C:  BRA    056A
056E:  BRA    0570
....................       i--; 
0570:  DECF   0D,F
....................    } 
0572:  BRA    0522
.................... } 
0574:  RETLW  00
....................  
....................  
....................  
.................... /*#ifndef SRAM_SDA 
.................... #define SRAM_SDA  PIN_D0 
.................... #define SRAM_SCL  PIN_D1 
.................... #endif 
.................... #use i2c(master, sda=SRAM_SDA, scl=SRAM_SCL) 
....................  
.................... void write_ext_eeprom(BYTE address, BYTE data){ 
....................    i2c_start(); 
....................    i2c_write(0xa0); 
....................    i2c_write(address); 
....................    i2c_write(data); 
....................    i2c_stop(); 
.................... } 
....................  
....................  
.................... BYTE read_ext_eeprom(BYTE address){ 
....................    BYTE data; 
....................  
....................    i2c_start(); 
....................    i2c_write(0xa0); 
....................    i2c_write(address); 
....................    i2c_start(); 
....................    i2c_write(0xa1); 
....................    data=i2c_read(0); 
....................    i2c_stop(); 
....................    return(data); 
.................... }*/ 
....................  
.................... void main(void){ 
*
05B4:  CLRF   FF8
05B6:  BCF    FD0.7
05B8:  CLRF   FEA
05BA:  CLRF   FE9
05BC:  CLRF   04
05BE:  CLRF   05
05C0:  CLRF   06
05C2:  MOVF   FC1,W
05C4:  ANDLW  C0
05C6:  IORLW  0F
05C8:  MOVWF  FC1
05CA:  MOVLW  07
05CC:  MOVWF  FB4
....................    HMF6598_InitLcd(); 
05CE:  BRA    034A
....................    Write_i2cEeprom(0x00, 0xff); 
05D0:  CLRF   08
05D2:  CLRF   07
05D4:  MOVLW  FF
05D6:  MOVWF  09
05D8:  BRA    0576
....................    while(true){} 
05DA:  BRA    05DA
....................    /*int i; 
....................  
....................    printf(HMF6598_Printchar, "ABCDEFGHIJKLMNOPQRST;"); 
....................    HMF6598_Gotoxy(0,1); 
....................    printf(HMF6598_Printchar, "UVWXYZ:,.'~^1234567");  
....................    HMF6598_Gotoxy(0,2); 
....................    printf(HMF6598_Printchar, "890!@#$/\&*()=-+[]{}\"");        
....................    HMF6598_Gotoxy(0,3); 
....................    printf(HMF6598_Printchar, "abcdefghijklmnopqrst");      
....................    HMF6598_Gotoxy(0,4); 
....................    printf(HMF6598_Printchar, "uvwxyz_");      
....................    HMF6598_Gotoxy(0,7); 
....................    printf(HMF6598_Printchar, "Total Electronics!");  
....................  
....................    for(i=0;i<128;i++){ 
....................       HMF6598_PutPixel(i,60,ON); 
....................       delay_ms(50); 
....................    } 
....................    HMF6598_circle(64, 32, 30, OFF, ON);   */ 
.................... } 
05DC:  SLEEP 

Configuration Fuses:
   Word  1: CE23   PLL4 CPUDIV1 USBDIV HSPLL FCMEN IESO
   Word  2: 1E38   PUT NOBROWNOUT BORV20 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICPRT NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
