CCS PCH C Compiler, Version 4.114, 93463165               17-jan-15 23:23

               Filename: D:\SkyDrive\Eletronica\PROJETOS PIC CCS\SAN_USB\LCD EDG128BK3WXMGA\index.lst

               ROM used: 1502 bytes (5%)
                         Largest free fragment is 27166
               RAM used: 29 (1%) at main() level
                         46 (2%) worst case
               Stack:    8 worst case (7 in main + 1 for interrupts)

*
1000:  GOTO   15A4
*
1008:  MOVWF  04
100A:  MOVFF  FD8,05
100E:  MOVFF  FE0,06
1012:  MOVLB  0
1014:  MOVFF  FE9,0C
1018:  MOVFF  FEA,07
101C:  MOVFF  FE1,08
1020:  MOVFF  FE2,09
1024:  MOVFF  FD9,0A
1028:  MOVFF  FDA,0B
102C:  MOVFF  FF3,12
1030:  MOVFF  FF4,13
1034:  MOVFF  FFA,14
1038:  MOVFF  FF5,15
103C:  MOVFF  FF6,16
1040:  MOVFF  FF7,17
1044:  MOVFF  00,0E
1048:  MOVFF  01,0F
104C:  MOVFF  02,10
1050:  MOVFF  03,11
1054:  BTFSS  FF2.5
1056:  GOTO   1060
105A:  BTFSC  FF2.2
105C:  GOTO   12AA
1060:  MOVFF  0E,00
1064:  MOVFF  0F,01
1068:  MOVFF  10,02
106C:  MOVFF  11,03
1070:  MOVFF  0C,FE9
1074:  MOVFF  07,FEA
1078:  BSF    07.7
107A:  MOVFF  08,FE1
107E:  MOVFF  09,FE2
1082:  MOVFF  0A,FD9
1086:  MOVFF  0B,FDA
108A:  MOVFF  12,FF3
108E:  MOVFF  13,FF4
1092:  MOVFF  14,FFA
1096:  MOVFF  15,FF5
109A:  MOVFF  16,FF6
109E:  MOVFF  17,FF7
10A2:  MOVF   04,W
10A4:  MOVFF  06,FE0
10A8:  MOVFF  05,FD8
10AC:  RETFIE 0
.................... #include <SanUSB.h> 
.................... ///////////////////http://br.groups.yahoo.com/group/GrupoSanUSB///////////////// 
.................... #include <18F4550.h> //This library 18F4550.h is valid for the whole family USB PIC18Fx5xx 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
....................  
.................... #device ADC=10 
.................... #fuses HSPLL,PLL5, USBDIV,CPUDIV1,VREGEN,NOWDT,NOPROTECT,NOLVP,NODEBUG 
.................... #byte OSCCON=0XFD3 
.................... #use delay(clock=48000000)// USB standard frequency (cpu and timers 12 MIPS = 4/48MHz) 
*
12D0:  CLRF   FEA
12D2:  MOVLW  1D
12D4:  MOVWF  FE9
12D6:  MOVF   FEF,W
12D8:  BZ    12F6
12DA:  MOVLW  0F
12DC:  MOVWF  01
12DE:  CLRF   00
12E0:  DECFSZ 00,F
12E2:  BRA    12E0
12E4:  DECFSZ 01,F
12E6:  BRA    12DE
12E8:  MOVLW  8F
12EA:  MOVWF  00
12EC:  DECFSZ 00,F
12EE:  BRA    12EC
12F0:  NOP   
12F2:  DECFSZ FEF,F
12F4:  BRA    12DA
12F6:  GOTO   142E (RETURN)
.................... //#use rs232(baud=9600, xmit=pin_c6, rcv=pin_c7) 
....................  
.................... //SanUSB program memory allocation 
.................... #define CODE_START 0x1000 
.................... #build(reset=CODE_START, interrupt=CODE_START+0x08) 
.................... #org 0, CODE_START-1 {} 
....................  
.................... void clock_int_4MHz(void)//Se for utilizado habilitar o #use delay(clock=4000000) e desabilitar //delay(clock=48000000) 
.................... { 
....................  //OSCCON=0B01100110; //with dual clock -> cpu and timers  #use delay(clock=4000000) 
....................  while(read_eeprom(0xfd)); 
.................... //#use delay(clock=4000000) // internal Oscillator Clock of 4MHz 
....................                            } 
....................  
.................... #USE SPI (MASTER, CLK=PIN_B1, DI=PIN_C7, DO=PIN_B0, BAUD = 2000000, MODE=0, BITS=8, STREAM=SPI_1, MSB_FIRST) 
12FA:  MOVF   2A,W
12FC:  SUBLW  08
12FE:  BZ    1308
1300:  MOVWF  2B
1302:  RLCF   29,F
1304:  DECFSZ 2B,F
1306:  BRA    1302
1308:  BSF    F94.7
130A:  BCF    F93.0
130C:  BCF    F93.1
130E:  BCF    F8A.1
1310:  MOVFF  2A,2B
1314:  BTFSS  29.7
1316:  BCF    F8A.0
1318:  BTFSC  29.7
131A:  BSF    F8A.0
131C:  RLCF   29,F
131E:  BSF    F8A.1
1320:  RLCF   01,F
1322:  BTFSS  F82.7
1324:  BCF    01.0
1326:  BTFSC  F82.7
1328:  BSF    01.0
132A:  BCF    F8A.1
132C:  DECFSZ 2B,F
132E:  BRA    1314
1330:  GOTO   1342 (RETURN)
....................  
.................... #include "EDG128BK3WXMGA.c" 
.................... // Driver teste para o LCD 128x64 (PowerTip PE12864LRF-004-H/* 
.................... const BYTE TEXT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE  01 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x00, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x00, // / 
....................                          0x3E, 0x51, 0x49, 0x3e, 0x00, // 0      17 
....................                          0x04, 0x02, 0x7F, 0x00, 0x00, // 1 
....................                          0x00, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x00, 0x41, 0x49, 0x49, 0x36, // 3      20 
....................                          0x18, 0x14, 0x12, 0x7F, 0x00, // 4 
....................                          0x00, 0x27, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x32, 0x00, // 6      23 
....................                          0x00, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x36, 0x00, // 8 
....................                          0x26, 0x49, 0x49, 0x3e, 0x00, // 9      26 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x00, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x7e, 0x00, // A      34 
....................                          0x7F, 0x49, 0x49, 0x36, 0x00, // B 
....................                          0x3E, 0x41, 0x41, 0x22, 0x00, // C 
....................                          0x7F, 0x41, 0x41, 0x3e, 0x00, // D      37 
....................                          0x7F, 0x49, 0x49, 0x41, 0x00, // E 
....................                          0x7F, 0x09, 0x09, 0x01, 0x00, // F 
....................                          0x3E, 0x41, 0x49, 0x3a, 0x00, // G      40 
....................                          0x7F, 0x08, 0x08, 0x7f, 0x00, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x3f, 0x00, // J      43 
....................                          0x7F, 0x08, 0x14, 0x63, 0x00, // K 
....................                          0x7F, 0x40, 0x40, 0x00, 0x00, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M      46 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x3e, 0x00, // O 
....................                          0x7F, 0x09, 0x09, 0x06, 0x00, // P      49 
....................                          0x1E, 0x21, 0x21, 0x5e, 0x00, // Q 
....................                          0x7F, 0x09, 0x09, 0x76, 0x00};// R      51 
....................  
.................... const BYTE TEXT2[44][5]={0x26, 0x49, 0x49, 0x32, 0x00, // S 
....................                          0x00, 0x01, 0x7F, 0x01, 0x00, // T 
....................                          0x3F, 0x40, 0x40, 0x3f, 0x00, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x47, 0x00, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x00, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          //0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x38, 0x44, 0x44, 0x7c, 0x00,  // a  
....................                          0x7F, 0x44, 0x44, 0x38, 0x00, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x00, // c 
....................                          0x38, 0x44, 0x44, 0x7f, 0x00, // d 
....................                          0x38, 0x54, 0x54, 0x18, 0x00, // e 
....................                          0x00, 0x04, 0x7E, 0x05, 0x00, // f 
....................                          0x08, 0x54, 0x54, 0x3c, 0x00, // g 
....................                          0x7F, 0x08, 0x04, 0x78, 0x00, // h 
....................                          0x00, 0x00, 0x7a, 0x00, 0x00, // i 
....................                          0x20, 0x00, 0x44, 0x3D, 0x00, // j 
....................                          0x7e, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x04, 0x04, 0x78, 0x00, // n 
....................                          0x38, 0x44, 0x44, 0x38, 0x00, // o 
....................                          0x7C, 0x14, 0x14, 0x08, 0x00, // p 
....................                          0x08, 0x14, 0x14, 0x7c, 0x00, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x00, // r 
....................                          0x08, 0x54, 0x54, 0x20, 0x00, // s 
....................                          0x00, 0x04, 0x3F, 0x44, 0x00, // t 
....................                          0x00, 0x3c, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x3c, 0x00, // y 
....................                          0x00, 0x64, 0x54, 0x4C, 0x00, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
....................  
....................  
.................... #define PE12864_RES   pin_B4 
.................... #define PE12864_CS1   pin_B3 
.................... #define PE12864_A0    pin_B2 
.................... #define PE12864_CLK   pin_B1 
.................... #define PE12864_DATA  pin_B0 
....................  
.................... #define ON   1 
.................... #define OFF  0 
....................  
.................... int8 CurrentLine = 0; 
.................... int8 QuantChrLine = 0; 
.................... int8 OffsetX = 0; 
....................  
.................... void    PE12864_InitLcd(void); 
.................... void    PE12864_Write_command(char byte_command); 
.................... void    PE12864_Write_data(char byte_data); 
.................... void    PE12864_Gotoxy(int8 x, int y); 
.................... void    PE12864_Printchar(char cvar); 
.................... void    PE12864_PutPixel(int8 x,int8 y, int1 COLOR); 
.................... void    PE12864_SerialOut(char byteDC); 
.................... void    clear_screen(void); 
.................... void    newLine(void); 
.................... void    PE12864_circle(int x, int y, int radius, int1 fill, int1 COLOR); 
.................... void    PE12864_line(int x1, int y1, int x2, int y2, int1 COLOR); 
.................... //void    linexy(int8 x1,int8 y1,int8 x2,int8 y2, int1 COLOR); 
....................  
.................... void    PE12864_InitLcd(void){ 
....................     
....................    output_low(PE12864_CS1); // Chip Enabled 
*
1420:  BCF    F93.3
1422:  BCF    F8A.3
....................    output_low(PE12864_RES); 
1424:  BCF    F93.4
1426:  BCF    F8A.4
....................    delay_ms(5); 
1428:  MOVLW  05
142A:  MOVWF  1D
142C:  BRA    12D0
....................    output_high(PE12864_RES);    
142E:  BCF    F93.4
1430:  BSF    F8A.4
....................  
....................    // LCD BIAS SET 
....................    //- PAG 45 - 1010001-BIT    0: 1/9 ou 1: 1/7 ST7565S 
....................    PE12864_Write_command(0xa2); 
1432:  MOVLW  A2
1434:  MOVWF  27
1436:  RCALL  1348
....................    //1010011-BIT  Display Fill  0: Normal  1: Reverse 
....................    PE12864_Write_command(0xa6); // Normal 
1438:  MOVLW  A6
143A:  MOVWF  27
143C:  RCALL  1348
....................    // Commom Output mode Select 
....................    //- PAG 46 -  1100-BIT      0: Normal Direction    1: Reverse Direction    (Ex: 11000*** - Normal Direction) 
....................    PE12864_Write_command(0xc8); 
143E:  MOVLW  C8
1440:  MOVWF  27
1442:  RCALL  1348
....................    // LCD ADC Select 0:normal  1: Reverse 
....................    PE12864_Write_command(0xa0);    
1444:  MOVLW  A0
1446:  MOVWF  27
1448:  RCALL  1348
....................    // CMD Set Start Line  
....................    PE12864_Write_command(0x40);    
144A:  MOVLW  40
144C:  MOVWF  27
144E:  RCALL  1348
....................     
....................    PE12864_Write_command(0x28 | 0x4);  
1450:  MOVLW  2C
1452:  MOVWF  27
1454:  RCALL  1348
....................    PE12864_Write_command(0x28 | 0x6);     
1456:  MOVLW  2E
1458:  MOVWF  27
145A:  RCALL  1348
....................    PE12864_Write_command(0x28 | 0x7);     
145C:  MOVLW  2F
145E:  MOVWF  27
1460:  RCALL  1348
....................    delay_us(5);    
1462:  MOVLW  13
1464:  MOVWF  00
1466:  DECFSZ 00,F
1468:  BRA    1466
146A:  BRA    146C
....................    PE12864_Write_command(0x20 | 0x6);  // resistor Ratio 
146C:  MOVLW  26
146E:  MOVWF  27
1470:  RCALL  1348
....................    clear_screen(); 
1472:  BRA    13F0
....................    PE12864_Write_command(0xaf); // Display ON 
1474:  MOVLW  AF
1476:  MOVWF  27
1478:  RCALL  1348
....................    PE12864_Write_command(0xa4); // all points Normal 
147A:  MOVLW  A4
147C:  MOVWF  27
147E:  RCALL  1348
....................  
....................    //Set Brightness   
....................    PE12864_Write_command(0x81);  
1480:  MOVLW  81
1482:  MOVWF  27
1484:  RCALL  1348
....................    PE12864_Write_command(0x1a); 
1486:  MOVLW  1A
1488:  MOVWF  27
148A:  RCALL  1348
.................... } 
148C:  GOTO   15D4 (RETURN)
....................  
.................... void PE12864_SerialOut(char byteDC){ 
....................   //int i; 
....................   output_low(PE12864_CS1);   
*
1334:  BCF    F93.3
1336:  BCF    F8A.3
....................   /*for (i=8; i>0; i--) { 
....................     output_low(PE12864_CLK); 
....................     if ((byteDC&0x80)==0) 
....................       output_low(PE12864_DATA); 
....................     else 
....................       output_high(PE12864_DATA); 
....................     output_high(PE12864_CLK); 
....................     byteDC<<=0x01; 
....................   }*/ 
....................   spi_xfer(SPI_1, byteDC);   
1338:  MOVFF  28,29
133C:  MOVLW  08
133E:  MOVWF  2A
1340:  BRA    12FA
....................   output_high(PE12864_CS1); 
1342:  BCF    F93.3
1344:  BSF    F8A.3
.................... } 
1346:  RETLW  00
.................... void    PE12864_Write_command(char byte_command){ 
....................   output_low(PE12864_A0);          // Write Command Enabled 
1348:  BCF    F93.2
134A:  BCF    F8A.2
....................   PE12864_SerialOut(byte_command); 
134C:  MOVFF  27,28
1350:  RCALL  1334
.................... } 
1352:  RETLW  00
.................... void    PE12864_Write_data(char byte_data){ 
....................   output_high(PE12864_A0);         // Write data Enabled 
*
13D8:  BCF    F93.2
13DA:  BSF    F8A.2
....................   PE12864_SerialOut(byte_data); 
13DC:  MOVFF  22,28
13E0:  RCALL  1334
....................   //Buffer[OffsetX][CurrentLine] = byte_data;   
....................   OffsetX++; 
13E2:  INCF   1B,F
....................   PE12864_Gotoxy(OffsetX,CurrentLine); 
13E4:  MOVFF  1B,23
13E8:  MOVFF  19,24
13EC:  RCALL  137C
.................... } 
13EE:  RETLW  00
.................... void newLine(){ 
....................   if(CurrentLine < 7){  // New Line Command 
*
1490:  MOVF   19,W
1492:  SUBLW  06
1494:  BNC   14B0
....................       PE12864_Write_command((CurrentLine+1)|0xb0);  // Set Page Address to 0 (0 a 7) 
1496:  MOVLW  01
1498:  ADDWF  19,W
149A:  IORLW  B0
149C:  MOVWF  21
149E:  MOVWF  27
14A0:  RCALL  1348
....................       PE12864_Write_command(0x00);  // Set LSB for index Column 
14A2:  CLRF   27
14A4:  RCALL  1348
....................       PE12864_Write_command(0x10);  // Set MSB for index Column    
14A6:  MOVLW  10
14A8:  MOVWF  27
14AA:  RCALL  1348
....................       CurrentLine+=1; 
14AC:  MOVLW  01
14AE:  ADDWF  19,F
....................   } 
....................   QuantChrLine = 1; 
14B0:  MOVLW  01
14B2:  MOVWF  1A
....................   OffsetX = 0; 
14B4:  CLRF   1B
.................... } 
14B6:  GOTO   14C6 (RETURN)
.................... void clear_screen(void) { 
....................    int p, c; 
....................    for(p = 0; p < 8; p++) { 
*
13F0:  CLRF   1D
13F2:  MOVF   1D,W
13F4:  SUBLW  07
13F6:  BNC   1416
....................       for(c = 0; c < 128; c++) { 
13F8:  CLRF   1E
13FA:  MOVF   1E,W
13FC:  SUBLW  7F
13FE:  BNC   1412
....................          PE12864_Gotoxy(c,p); 
1400:  MOVFF  1E,23
1404:  MOVFF  1D,24
1408:  RCALL  137C
....................          PE12864_Write_data(0x00); 
140A:  CLRF   22
140C:  RCALL  13D8
....................          //Buffer[c][p] = 0x00;         
....................       } 
140E:  INCF   1E,F
1410:  BRA    13FA
....................    } 
1412:  INCF   1D,F
1414:  BRA    13F2
....................    PE12864_Gotoxy(0,0);    
1416:  CLRF   23
1418:  CLRF   24
141A:  RCALL  137C
.................... } 
141C:  GOTO   1474 (RETURN)
.................... void    PE12864_Gotoxy(int x, int y){ 
*
137C:  CLRF   25
....................    int8 OffsetChr = 0; 
....................     
....................    PE12864_Write_command(0xb0 | y); 
137E:  MOVF   24,W
1380:  IORLW  B0
1382:  MOVWF  26
1384:  MOVWF  27
1386:  RCALL  1348
....................    PE12864_Write_command((0x00 | x) & 0x0f); 
1388:  MOVF   23,W
138A:  ANDLW  0F
138C:  MOVWF  26
138E:  MOVWF  27
1390:  RCALL  1348
....................    PE12864_Write_command(0x10|(x>>4)); 
1392:  SWAPF  23,W
1394:  MOVWF  00
1396:  MOVLW  0F
1398:  ANDWF  00,F
139A:  MOVF   00,W
139C:  IORLW  10
139E:  MOVWF  26
13A0:  MOVWF  27
13A2:  RCALL  1348
....................     
....................    OffsetChr = (x+1)/6; 
13A4:  MOVLW  01
13A6:  ADDWF  23,W
13A8:  MOVWF  27
13AA:  MOVWF  28
13AC:  MOVLW  06
13AE:  MOVWF  29
13B0:  RCALL  1354
13B2:  MOVFF  01,25
....................    if((x+1)%6) 
13B6:  MOVLW  01
13B8:  ADDWF  23,W
13BA:  MOVWF  27
13BC:  MOVWF  28
13BE:  MOVLW  06
13C0:  MOVWF  29
13C2:  RCALL  1354
13C4:  MOVF   00,W
13C6:  BZ    13CA
....................       OffsetChr++;    
13C8:  INCF   25,F
....................    CurrentLine = y; 
13CA:  MOVFF  24,19
....................    QuantChrLine = OffsetChr; 
13CE:  MOVFF  25,1A
....................    OffsetX = x; 
13D2:  MOVFF  23,1B
.................... } 
13D6:  RETLW  00
.................... void    PE12864_Printchar(char cvar){ 
....................    int i; 
....................    if (QuantChrLine > 21)   
*
14BA:  MOVF   1A,W
14BC:  SUBLW  15
14BE:  BC    14C4
....................        newLine();  
14C0:  BRA    1490
....................    else 
14C2:  BRA    14C6
....................        QuantChrLine++;     
14C4:  INCF   1A,F
....................    if(cvar == 0x20) 
14C6:  MOVF   1F,W
14C8:  SUBLW  20
14CA:  BNZ   14DE
....................       for(i=0;i<2;i++) 
14CC:  CLRF   20
14CE:  MOVF   20,W
14D0:  SUBLW  01
14D2:  BNC   14DC
....................          PE12864_Write_data(0x00); 
14D4:  CLRF   22
14D6:  RCALL  13D8
14D8:  INCF   20,F
14DA:  BRA    14CE
....................    else{ 
14DC:  BRA    157A
....................       for(i=0;i<5;i++){ 
14DE:  CLRF   20
14E0:  MOVF   20,W
14E2:  SUBLW  04
14E4:  BNC   157A
....................          if (cvar < 0x53){ 
14E6:  MOVF   1F,W
14E8:  SUBLW  52
14EA:  BNC   1532
....................             if(TEXT[cvar-0x20][i])          
14EC:  MOVLW  20
14EE:  SUBWF  1F,W
14F0:  MULLW  05
14F2:  MOVF   FF3,W
14F4:  CLRF   22
14F6:  MOVWF  21
14F8:  CLRF   03
14FA:  MOVF   20,W
14FC:  ADDWF  21,W
14FE:  MOVWF  01
1500:  MOVF   22,W
1502:  ADDWFC 03,F
1504:  MOVF   01,W
1506:  RCALL  10AE
1508:  MOVWF  01
150A:  MOVF   01,F
150C:  BZ    1530
....................                PE12864_Write_data(TEXT[cvar-0x20][i]);       
150E:  MOVLW  20
1510:  SUBWF  1F,W
1512:  MULLW  05
1514:  MOVF   FF3,W
1516:  CLRF   22
1518:  MOVWF  21
151A:  CLRF   03
151C:  MOVF   20,W
151E:  ADDWF  21,W
1520:  MOVWF  01
1522:  MOVF   22,W
1524:  ADDWFC 03,F
1526:  MOVF   01,W
1528:  RCALL  10AE
152A:  MOVWF  21
152C:  MOVWF  22
152E:  RCALL  13D8
....................          } 
....................          else { 
1530:  BRA    1576
....................             if(TEXT2[cvar-0x53][i])                
1532:  MOVLW  53
1534:  SUBWF  1F,W
1536:  MULLW  05
1538:  MOVF   FF3,W
153A:  CLRF   22
153C:  MOVWF  21
153E:  CLRF   03
1540:  MOVF   20,W
1542:  ADDWF  21,W
1544:  MOVWF  01
1546:  MOVF   22,W
1548:  ADDWFC 03,F
154A:  MOVF   01,W
154C:  RCALL  11BE
154E:  MOVWF  01
1550:  MOVF   01,F
1552:  BZ    1576
....................                PE12864_Write_data(TEXT2[cvar-0x53][i]);                
1554:  MOVLW  53
1556:  SUBWF  1F,W
1558:  MULLW  05
155A:  MOVF   FF3,W
155C:  CLRF   22
155E:  MOVWF  21
1560:  CLRF   03
1562:  MOVF   20,W
1564:  ADDWF  21,W
1566:  MOVWF  01
1568:  MOVF   22,W
156A:  ADDWFC 03,F
156C:  MOVF   01,W
156E:  RCALL  11BE
1570:  MOVWF  21
1572:  MOVWF  22
1574:  RCALL  13D8
....................          } 
....................       } 
1576:  INCF   20,F
1578:  BRA    14E0
....................    } 
....................    PE12864_Write_data(0x00); 
157A:  CLRF   22
157C:  RCALL  13D8
.................... } 
157E:  GOTO   1596 (RETURN)
....................  
....................  
.................... void PE12864_PutPixel(int x, int y, int1 COLOR){ 
....................    byte BytePlot, tempByte; 
....................    if((x > 127)||(y > 63)) 
....................       return; 
....................    BytePlot = 0; 
....................    BytePlot |= 1; 
....................    PE12864_Gotoxy(x,(y/8)); 
....................    BytePlot<<=(y%8); 
....................    tempByte = BytePlot;    
....................    //BytePlot|=Buffer[x][y/8];       
....................    if(COLOR == OFF) 
....................       BytePlot-=tempByte; 
....................    PE12864_Write_data(BytePlot); 
....................     
....................    /*   if(COLOR == ON) 
....................       BytePlot|=Buffer[x][y/8];       
....................    else{ 
....................       tempByte = BytePlot; 
....................       BytePlot|=Buffer[x][y/8];        
....................       BytePlot-=tempByte; 
....................       //BytePlot = ((BytePlot | Buffer[x][y/8]) - BytePlot);  
....................    }*/ 
.................... } 
....................  
.................... void PE12864_circle(int x, int y, int radius, int1 fill, int1 COLOR){ 
....................    signed int a, b, P; 
....................    a = 0; 
....................    b = radius; 
....................    P = 1 - radius; 
....................    do{ 
....................       if(fill){ 
....................          PE12864_line(x-a, y+b, x+a, y+b, color); 
....................          PE12864_line(x-a, y-b, x+a, y-b, color); 
....................          PE12864_line(x-b, y+a, x+b, y+a, color); 
....................          PE12864_line(x-b, y-a, x+b, y-a, color); 
....................       } 
....................       else{ 
....................          PE12864_PutPixel(a+x, b+y, color); 
....................          PE12864_PutPixel(b+x, a+y, color); 
....................          PE12864_PutPixel(x-a, b+y, color); 
....................          PE12864_PutPixel(x-b, a+y, color); 
....................          PE12864_PutPixel(b+x, y-a, color); 
....................          PE12864_PutPixel(a+x, y-b, color); 
....................          PE12864_PutPixel(x-a, y-b, color); 
....................          PE12864_PutPixel(x-b, y-a, color); 
....................       } 
....................       if(P < 0) 
....................          P+= 3 + 2*a++; 
....................       else 
....................          P+= 5 + 2*(a++ - b--); 
....................     } while(a <= b); 
.................... } 
....................  
.................... void PE12864_line(int x1, int y1, int x2, int y2, int1 COLOR){ 
....................    signed int  x, y, addx, addy, dx, dy; 
....................    signed long P; 
....................    int i; 
....................    dx = abs((signed int)(x2 - x1)); 
....................    dy = abs((signed int)(y2 - y1)); 
....................    x = x1; 
....................    y = y1; 
....................  
....................    if(x1 > x2) 
....................       addx = -1; 
....................    else 
....................       addx = 1; 
....................    if(y1 > y2) 
....................       addy = -1; 
....................    else 
....................       addy = 1; 
....................    if(dx >= dy){ 
....................       P = 2*dy - dx; 
....................       for(i=0; i<=dx; ++i){ 
....................          PE12864_PutPixel(x, y, COLOR); 
....................          if(P < 0){ 
....................             P += 2*dy; 
....................             x += addx; 
....................          } 
....................          else{ 
....................             P += 2*dy - 2*dx; 
....................             x += addx; 
....................             y += addy; 
....................          } 
....................       } 
....................    } 
....................    else{ 
....................       P = 2*dx - dy; 
....................       for(i=0; i<=dy; ++i){ 
....................          PE12864_PutPixel(x, y, COLOR); 
....................  
....................          if(P < 0){ 
....................             P += 2*dx; 
....................             y += addy; 
....................          } 
....................          else{ 
....................             P += 2*dx - 2*dy; 
....................             x += addx; 
....................             y += addy; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... /*void linexy(int8 x1,int8 y1,int8 x2,int8 y2, int1 COLOR){ 
....................    int length_x, length_y, i; 
....................    float divResult; 
....................    length_x = abs((signed int)(x2 - x1)); 
....................    length_y = abs((signed int)(y2 - y1)); 
....................     
....................    if(length_x < length_y){ 
....................       divResult = (float)(length_x / length_y); 
....................       for(i = 0; i < length_y+1;i++) 
....................          PE12864_Putpixel(x1+ceil(divResult*i), y1+i, ON); 
....................    } 
....................    else{ 
....................       divResult = (float)(length_y / length_x); 
....................       for(i = 0; i < length_x+1;i++) 
....................          PE12864_Putpixel(x1+i, y1+ceil(divResult*i), ON); 
....................    }    
.................... } 
.................... */ 
....................  
.................... #define LED_STATUS   pin_b7 
....................  
.................... int tempo; 
....................  
.................... #int_TIMER0 
.................... void  TIMER0_isr(void){ 
....................    tempo++; 
*
12AA:  INCF   1C,F
....................    if(tempo == 45){   //  46 * 21,8ms =~ 1002,8ms ou 1,002 segundos  
12AC:  MOVF   1C,W
12AE:  SUBLW  2D
12B0:  BNZ   12B8
....................       tempo=0; 
12B2:  CLRF   1C
....................       output_toggle(LED_STATUS); 
12B4:  BCF    F93.7
12B6:  BTG    F8A.7
....................    } 
.................... } 
....................  
12B8:  BCF    FF2.2
12BA:  GOTO   1060
.................... void main(){ 
*
15A4:  CLRF   FF8
15A6:  BCF    FD0.7
15A8:  BSF    07.7
15AA:  CLRF   FEA
15AC:  CLRF   FE9
15AE:  BSF    F94.7
15B0:  BCF    F93.0
15B2:  BCF    F93.1
15B4:  BCF    F8A.1
15B6:  CLRF   19
15B8:  CLRF   1A
15BA:  CLRF   1B
15BC:  MOVF   FC1,W
15BE:  ANDLW  C0
15C0:  IORLW  0F
15C2:  MOVWF  FC1
15C4:  MOVLW  07
15C6:  MOVWF  FB4
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256|RTCC_8_bit);      //21.8 ms overflow 
15C8:  MOVLW  C7
15CA:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
15CC:  BSF    FF2.5
....................    enable_interrupts(GLOBAL); 
15CE:  MOVLW  C0
15D0:  IORWF  FF2,F
....................    PE12864_InitLcd(); 
15D2:  BRA    1420
....................    printf(PE12864_Printchar, "Teste LCD 128x64"); 
15D4:  MOVLW  BE
15D6:  MOVWF  FF6
15D8:  MOVLW  12
15DA:  MOVWF  FF7
15DC:  BRA    1582
....................    while(true){} 
15DE:  BRA    15DE
.................... } 
15E0:  SLEEP 

Configuration Fuses:
   Word  1: CE24   PLL5 CPUDIV1 USBDIV HSPLL FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV20 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICPRT NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
