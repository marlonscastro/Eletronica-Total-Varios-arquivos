CCS PCM C Compiler, Version 4.114, 93463165               21-jan-15 20:15

               Filename: D:\SkyDrive\Eletronica\PROJETOS PIC CCS\SAN_USB\LCD SIEMENS C65 130X130\main.lst

               ROM used: 1580 words (19%)
                         Largest free fragment is 2048
               RAM used: 58 (16%) at main() level
                         93 (25%) worst case
               Stack:    6 worst case (5 in main + 1 for interrupts)

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   46F
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  MOVF   7B,W
0016:  MOVWF  27
0017:  BCF    03.7
0018:  BCF    03.5
0019:  BTFSS  0B.5
001A:  GOTO   01D
001B:  BTFSC  0B.2
001C:  GOTO   030
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   27,W
0028:  MOVWF  7B
0029:  MOVF   20,W
002A:  MOVWF  0A
002B:  SWAPF  21,W
002C:  MOVWF  03
002D:  SWAPF  7F,F
002E:  SWAPF  7F,W
002F:  RETFIE
0030:  BCF    0A.3
0031:  BCF    0A.4
0032:  GOTO   221
.................... #include <16F876.h> 
.................... //////// Standard Header file for the PIC16F876 device //////////////// 
.................... #device PIC16F876 
.................... #list 
....................  
.................... #FUSES NOWDT, HS, NOPUT, NOBROWNOUT, NOLVP, NOCPD, NOWRT, NODEBUG, NOPROTECT 
.................... #use delay(clock=16000000) 
*
0256:  MOVLW  54
0257:  MOVWF  04
0258:  BCF    03.7
0259:  MOVF   00,W
025A:  BTFSC  03.2
025B:  GOTO   26A
025C:  MOVLW  05
025D:  MOVWF  78
025E:  CLRF   77
025F:  DECFSZ 77,F
0260:  GOTO   25F
0261:  DECFSZ 78,F
0262:  GOTO   25E
0263:  MOVLW  2E
0264:  MOVWF  77
0265:  DECFSZ 77,F
0266:  GOTO   265
0267:  GOTO   268
0268:  DECFSZ 00,F
0269:  GOTO   25C
026A:  RETURN
.................... #USE SPI (MASTER, CLK=PIN_B3, DI=PIN_C7, DO=PIN_B2, BAUD = 2000000, MODE=0, BITS=8, STREAM=SPI_1, MSB_FIRST) 
026B:  MOVF   73,W
026C:  SUBLW  08
026D:  BTFSC  03.2
026E:  GOTO   273
026F:  MOVWF  74
0270:  RLF    72,F
0271:  DECFSZ 74,F
0272:  GOTO   270
0273:  BSF    28.7
0274:  MOVF   28,W
0275:  BSF    03.5
0276:  MOVWF  07
0277:  BCF    06.2
0278:  BCF    06.3
0279:  BCF    03.5
027A:  BCF    06.3
027B:  MOVF   73,W
027C:  MOVWF  74
027D:  BTFSS  72.7
027E:  BCF    06.2
027F:  BTFSC  72.7
0280:  BSF    06.2
0281:  RLF    72,F
0282:  BSF    06.3
0283:  RLF    78,F
0284:  BTFSS  07.7
0285:  BCF    78.0
0286:  BTFSC  07.7
0287:  BSF    78.0
0288:  BCF    06.3
0289:  DECFSZ 74,F
028A:  GOTO   27D
028B:  BCF    0A.3
028C:  BCF    0A.4
028D:  GOTO   293 (RETURN)
....................  
.................... #include "c65_S6B33B2.c" 
.................... // ***************************************************************************** 
.................... // 
.................... // ***************************************************************************** 
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
*
0486:  BCF    03.5
0487:  CLRF   29
0488:  CLRF   2A
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... #define OSC 0x02      // Oscillation mode set 
.................... #define DRVOUT 0x10   // Driver output mode set 
.................... #define DCDCSEL 0x20  // DC-DC select 
.................... #define BIAS 0x22     // Bias set 
.................... #define DCDCCLK 0x24  // DCDC clock division set 
.................... #define DCDCCTL 0x26  // DCDC and AMP on/off set 
.................... #define TEMPCOM 0x28  // Temperature compensation set 
.................... #define CONT1 0x2A    // Contrast control 1 
.................... #define CONT2 0x2B    // Contrast control 2 
.................... #define STBYOFF 0x2C  // Standby off 
.................... #define STBYON 0x2D   // Standby on 
.................... #define ADRMODE 0x30  // Adressing mode set 
.................... #define ROWVEC 0x32   // Row vector mode set 
.................... #define NLINV 0x34    // N-line invertion set 
.................... #define FRAFRE 0x36   // Frame frequency control 
.................... #define ENTRY 0x40    // Entry mode set 
.................... #define XSET 0x42     // X-adress area set 
.................... #define YSET 0x43     // Y-adress area set 
.................... #define DISON 0x51    // Display on 
.................... #define DISOFF 0x50   // Display off 
....................  
.................... // 8-bit color definitions 
.................... #define WHITE 0xFF 
.................... #define BLACK 0x00 
.................... #define RED 0xE0 
.................... #define GREEN 0x1C 
.................... #define BLUE 0x03 
.................... #define PINK 0xE3 
.................... #define LBLUE 0x1F 
.................... #define YELLOW 0xFC 
.................... #define ORANGE 0xF0 
.................... /* 
.................... ***************************************************************************** 
.................... Pinout 
.................... | 1 Led- 
.................... | 2 Led+ 
.................... | 3 NC 
.................... | 4 GND 
.................... | 5 2V9 
.................... | 6 DATA 
.................... | 7 CLK 
.................... | 8 RS 
.................... | 9 RST 
.................... | 10 CS 
.................... ***************************************************************************** 
.................... */ 
....................  
.................... #define LCD_CS              pin_b6 
.................... #define LCD_RESET           pin_b5 
.................... #define LCD_RS              pin_b4 
.................... #define LCD_SCK             pin_b3 
.................... #define LCD_DATA            pin_b2 
....................  
.................... BYTE const font8x12[] = { 
....................  
....................   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,        // sp        0x20 
....................   0x00,0x30,0x78,0x78,0x78,0x30,0x30,0x00,0x30,0x30,0x00,0x00,        // !         0x21 
....................   0x00,0x66,0x66,0x66,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,        // "         0x22 
....................   0x00,0x6C,0x6C,0xFE,0x6C,0x6C,0x6C,0xFE,0x6C,0x6C,0x00,0x00,        // #         0x23 
....................   0x30,0x30,0x7C,0xC0,0xC0,0x78,0x0C,0x0C,0xF8,0x30,0x30,0x00,        // $         0x24 
....................   0x00,0x00,0x00,0xC4,0xCC,0x18,0x30,0x60,0xCC,0x8C,0x00,0x00,        // %         0x25 
....................   0x00,0x70,0xD8,0xD8,0x70,0xFA,0xDE,0xCC,0xDC,0x76,0x00,0x00,        // &         0x26 
....................   0x00,0x30,0x30,0x30,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,        // Grad      0x27 
....................   0x00,0x0C,0x18,0x30,0x60,0x60,0x60,0x30,0x18,0x0C,0x00,0x00,        // (         0x28 
....................   0x00,0x60,0x30,0x18,0x0C,0x0C,0x0C,0x18,0x30,0x60,0x00,0x00,        // )         0x29 
....................   0x00,0x00,0x00,0x66,0x3C,0xFF,0x3C,0x66,0x00,0x00,0x00,0x00,        // *         0x2A 
....................   0x00,0x00,0x00,0x18,0x18,0x7E,0x18,0x18,0x00,0x00,0x00,0x00,        // +         0x2B 
....................   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x38,0x60,0x00,        // ,         0x2C 
....................   0x00,0x00,0x00,0x00,0x00,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,        // -         0x2D 
....................   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x38,0x00,0x00,        // .         0x2E 
....................   0x00,0x00,0x02,0x06,0x0C,0x18,0x30,0x60,0xC0,0x80,0x00,0x00,        // /         0x2F  
....................   0x00,0x7C,0xC6,0xCE,0xDE,0xD6,0xF6,0xE6,0xC6,0x7C,0x00,0x00,        // 0         0x30 
....................   0x00,0x10,0x30,0xF0,0x30,0x30,0x30,0x30,0x30,0xFC,0x00,0x00,        // 1         0x31 
....................   0x00,0x78,0xCC,0xCC,0x0C,0x18,0x30,0x60,0xCC,0xFC,0x00,0x00,        // 2         0x32 
....................   0x00,0x78,0xCC,0x0C,0x0C,0x38,0x0C,0x0C,0xCC,0x78,0x00,0x00,        // 3         0x33 
....................   0x00,0x0C,0x1C,0x3C,0x6C,0xCC,0xFE,0x0C,0x0C,0x1E,0x00,0x00,        // 4         0x34 
....................   0x00,0xFC,0xC0,0xC0,0xC0,0xF8,0x0C,0x0C,0xCC,0x78,0x00,0x00,        // 5         0x35 
....................   0x00,0x38,0x60,0xC0,0xC0,0xF8,0xCC,0xCC,0xCC,0x78,0x00,0x00,        // 6         0x36 
....................   0x00,0xFE,0xC6,0xC6,0x06,0x0C,0x18,0x30,0x30,0x30,0x00,0x00,        // 7         0x37 
....................   0x00,0x78,0xCC,0xCC,0xCC,0x78,0xCC,0xCC,0xCC,0x78,0x00,0x00,        // 8         0x38 
....................   0x00,0x78,0xCC,0xCC,0xCC,0x7C,0x18,0x18,0x30,0x70,0x00,0x00,        // 9         0x39 
....................   0x00,0x00,0x00,0x38,0x38,0x00,0x00,0x38,0x38,0x00,0x00,0x00,        // :         0x3A 
....................   0x00,0x00,0x00,0x38,0x38,0x00,0x00,0x38,0x38,0x18,0x30,0x00,        // ;         0x3B 
....................   0x00,0x0C,0x18,0x30,0x60,0xC0,0x60,0x30,0x18,0x0C,0x00,0x00,        // <         0x3C 
....................   0x00,0x00,0x00,0x00,0x7E,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,        // =         0x3D 
....................   0x00,0x60,0x30,0x18,0x0C,0x06,0x0C,0x18,0x30,0x60,0x00,0x00,        // >         0x3E 
....................   0x00,0x78,0xCC,0x0C,0x18,0x30,0x30,0x00,0x30,0x30,0x00,0x00,        // ?         0x3F 
....................   0x00,0x7C,0xC6,0xC6,0xDE,0xDE,0xDE,0xC0,0xC0,0x7C,0x00,0x00,        // @         0x40 
....................   0x00,0x30,0x78,0xCC,0xCC,0xCC,0xFC,0xCC,0xCC,0xCC,0x00,0x00,        // A         0x41 
....................   0x00,0xFC,0x66,0x66,0x66,0x7C,0x66,0x66,0x66,0xFC,0x00,0x00,        // B         0x42 
....................   0x00,0x3C,0x66,0xC6,0xC0,0xC0,0xC0,0xC6,0x66,0x3C,0x00,0x00,        // C         0x43 
....................   0x00,0xF8,0x6C,0x66,0x66,0x66,0x66,0x66,0x6C,0xF8,0x00,0x00,        // D         0x44 
....................   0x00,0xFE,0x62,0x60,0x64,0x7C,0x64,0x60,0x62,0xFE,0x00,0x00,        // E         0x45 
....................   0x00,0xFE,0x66,0x62,0x64,0x7C,0x64,0x60,0x60,0xF0,0x00,0x00,        // F         0x46 
....................   0x00,0x3C,0x66,0xC6,0xC0,0xC0,0xCE,0xC6,0x66,0x3E,0x00,0x00,        // G         0x47 
....................   0x00,0xCC,0xCC,0xCC,0xCC,0xFC,0xCC,0xCC,0xCC,0xCC,0x00,0x00,        // H         0x48 
....................   0x00,0x78,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x78,0x00,0x00,        // I         0x49 
....................   0x00,0x1E,0x0C,0x0C,0x0C,0x0C,0xCC,0xCC,0xCC,0x78,0x00,0x00,        // J         0x4A 
....................   0x00,0xE6,0x66,0x6C,0x6C,0x78,0x6C,0x6C,0x66,0xE6,0x00,0x00,        // K         0x4B 
....................   0x00,0xF0,0x60,0x60,0x60,0x60,0x62,0x66,0x66,0xFE,0x00,0x00,        // L         0x4C 
....................   0x00,0xC6,0xEE,0xFE,0xFE,0xD6,0xC6,0xC6,0xC6,0xC6,0x00,0x00,        // M         0x4D 
....................   0x00,0xC6,0xC6,0xE6,0xF6,0xFE,0xDE,0xCE,0xC6,0xC6,0x00,0x00,        // N         0x4E 
....................   0x00,0x38,0x6C,0xC6,0xC6,0xC6,0xC6,0xC6,0x6C,0x38,0x00,0x00,        // O         0x4F 
....................   0x00,0xFC,0x66,0x66,0x66,0x7C,0x60,0x60,0x60,0xF0,0x00,0x00,        // P         0x50 
....................   0x00,0x38,0x6C,0xC6,0xC6,0xC6,0xCE,0xDE,0x7C,0x0C,0x1E,0x00,        // Q         0x51 
....................   0x00,0xFC,0x66,0x66,0x66,0x7C,0x6C,0x66,0x66,0xE6,0x00,0x00,        // R         0x52 
....................   0x00,0x78,0xCC,0xCC,0xC0,0x70,0x18,0xCC,0xCC,0x78,0x00,0x00,        // S         0x53 
....................   0x00,0xFC,0xB4,0x30,0x30,0x30,0x30,0x30,0x30,0x78,0x00,0x00,        // T         0x54 
....................   0x00,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0x78,0x00,0x00,        // U         0x55 
....................   0x00,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0x78,0x30,0x00,0x00,        // V         0x56 
....................   0x00,0xC6,0xC6,0xC6,0xC6,0xD6,0xD6,0x6C,0x6C,0x6C,0x00,0x00,        // W         0x57 
....................   0x00,0xCC,0xCC,0xCC,0x78,0x30,0x78,0xCC,0xCC,0xCC,0x00,0x00,        // X         0x58 
....................   0x00,0xCC,0xCC,0xCC,0xCC,0x78,0x30,0x30,0x30,0x78,0x00,0x00,        // Y         0x59 
....................   0x00,0xFE,0xCE,0x98,0x18,0x30,0x60,0x62,0xC6,0xFE,0x00,0x00,        // Z         0x5A 
....................   0x00,0x3C,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x3C,0x00,0x00,        // [ -       0x5B 
....................   0x00,0x00,0x80,0xC0,0x60,0x30,0x18,0x0C,0x06,0x02,0x00,0x00,        // backslash 0x5C 
....................   0x00,0x3C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x3C,0x00,0x00,        // ]         0x5D 
....................   0x10,0x38,0x6C,0xC6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,        // ^         0x5E 
....................   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,        // _         0x5F 
....................   0x30,0x30,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,        // '         0x60 
....................   0x00,0x00,0x00,0x00,0x78,0x0C,0x7C,0xCC,0xCC,0x76,0x00,0x00,        // a         0x61 
....................   0x00,0xE0,0x60,0x60,0x7C,0x66,0x66,0x66,0x66,0xDC,0x00,0x00,        // b         0x62 
....................   0x00,0x00,0x00,0x00,0x78,0xCC,0xC0,0xC0,0xCC,0x78,0x00,0x00,        // c         0x63 
....................   0x00,0x1C,0x0C,0x0C,0x7C,0xCC,0xCC,0xCC,0xCC,0x76,0x00,0x00,        // d         0x64 
....................   0x00,0x00,0x00,0x00,0x78,0xCC,0xFC,0xC0,0xCC,0x78,0x00,0x00,        // e         0x65 
....................   0x00,0x38,0x6C,0x60,0x60,0xF8,0x60,0x60,0x60,0xF0,0x00,0x00,        // f         0x66 
....................   0x00,0x00,0x00,0x00,0x76,0xCC,0xCC,0xCC,0x7C,0x0C,0xCC,0x78,        // g         0x67 
....................   0x00,0xE0,0x60,0x60,0x6C,0x76,0x66,0x66,0x66,0xE6,0x00,0x00,        // h         0x68 
....................   0x00,0x18,0x18,0x00,0x78,0x18,0x18,0x18,0x18,0x7E,0x00,0x00,        // i         0x69 
....................   0x00,0x0C,0x0C,0x00,0x3C,0x0C,0x0C,0x0C,0x0C,0xCC,0xCC,0x78,        // j         0x6A 
....................   0x00,0xE0,0x60,0x60,0x66,0x6C,0x78,0x6C,0x66,0xE6,0x00,0x00,        // k         0x6B 
....................   0x00,0x78,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x7E,0x00,0x00,        // l         0x6C 
....................   0x00,0x00,0x00,0x00,0xFC,0xD6,0xD6,0xD6,0xD6,0xC6,0x00,0x00,        // m         0x6D 
....................   0x00,0x00,0x00,0x00,0xF8,0xCC,0xCC,0xCC,0xCC,0xCC,0x00,0x00,        // n         0x6E 
....................   0x00,0x00,0x00,0x00,0x78,0xCC,0xCC,0xCC,0xCC,0x78,0x00,0x00,        // o         0x6F 
....................   0x00,0x00,0x00,0x00,0xDC,0x66,0x66,0x66,0x66,0x7C,0x60,0xF0,        // p         0x70 
....................   0x00,0x00,0x00,0x00,0x76,0xCC,0xCC,0xCC,0xCC,0x7C,0x0C,0x1E,        // q         0x71 
....................   0x00,0x00,0x00,0x00,0xEC,0x6E,0x76,0x60,0x60,0xF0,0x00,0x00,        // r         0x72 
....................   0x00,0x00,0x00,0x00,0x78,0xCC,0x60,0x18,0xCC,0x78,0x00,0x00,        // s         0x73 
....................   0x00,0x00,0x20,0x60,0xFC,0x60,0x60,0x60,0x6C,0x38,0x00,0x00,        // t         0x74 
....................   0x00,0x00,0x00,0x00,0xCC,0xCC,0xCC,0xCC,0xCC,0x76,0x00,0x00,        // u         0x75 
....................   0x00,0x00,0x00,0x00,0xCC,0xCC,0xCC,0xCC,0x78,0x30,0x00,0x00,        // v         0x76 
....................   0x00,0x00,0x00,0x00,0xC6,0xC6,0xD6,0xD6,0x6C,0x6C,0x00,0x00,        // w         0x77 
....................   0x00,0x00,0x00,0x00,0xC6,0x6C,0x38,0x38,0x6C,0xC6,0x00,0x00,        // x         0x78 
....................   0x00,0x00,0x00,0x00,0x66,0x66,0x66,0x66,0x3C,0x0C,0x18,0xF0,        // y         0x79 
....................   0x00,0x00,0x00,0x00,0xFC,0x8C,0x18,0x60,0xC4,0xFC,0x00,0x00,        // z         0x7A 
....................   0x00,0x1C,0x30,0x30,0x60,0xC0,0x60,0x30,0x30,0x1C,0x00,0x00,        // {         0x7B 
....................   0x00,0x18,0x18,0x18,0x18,0x00,0x18,0x18,0x18,0x18,0x00,0x00,        // |         0x7C 
....................   0x00,0xE0,0x30,0x30,0x18,0x0C,0x18,0x30,0x30,0xE0,0x00,0x00,        // }         0x7D 
....................   0x00,0x73,0xDA,0xCE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,        // ->        0x7E 
....................   0x00,0x00,0x00,0x10,0x38,0x6C,0xC6,0xC6,0xFE,0x00,0x00,0x00,        // <-        0x7F 
.................... }; 
....................  
.................... //-------------------------------------------------------------------------------------- 
....................  
....................  
....................  
.................... BYTE const font8x8[] = { 
....................   0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,  // Leerzeichen 0x20  
....................   0x00,0x00,0x00,0xF2,0xF2,0x00,0x00,0x00,  // ! 
....................   0x00,0xE0,0xE0,0x00,0x00,0xE0,0xE0,0x00,  // " 
....................   0x28,0xFE,0xFE,0x28,0x28,0xFE,0xFE,0x28,  // # 
....................   0x00,0x48,0x5C,0xD6,0xD6,0x74,0x24,0x00,  // $ 
....................   0x00,0xC6,0x66,0x30,0x18,0xCC,0xC6,0x00,  // % 
....................   0x0A,0x4E,0xEE,0xB2,0xB2,0xFE,0x4C,0x00,  // & 
....................   0x00,0x80,0xC0,0x60,0x20,0x00,0x00,0x00,  // ' 
....................   0x00,0x00,0x82,0xC6,0x7C,0x38,0x00,0x00,  // ( 
....................   0x00,0x00,0x38,0x7C,0xC6,0x82,0x00,0x00,  // ) 
....................   0x10,0x54,0x7C,0x38,0x38,0x7C,0x54,0x10,  // * 
....................   0x00,0x10,0x10,0x7C,0x7C,0x10,0x10,0x00,  // + 
....................   0x00,0x00,0x00,0x06,0x07,0x01,0x00,0x00,  // , 
....................   0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x00,  // - 
....................   0x00,0x00,0x00,0x06,0x06,0x00,0x00,0x00,  // . 
....................   0x40,0x60,0x30,0x18,0x0C,0x06,0x02,0x00,  // / 
....................   0x00,0x7C,0xFE,0xA2,0x92,0xFE,0x7C,0x00,  // 0  0x30 
....................   0x00,0x02,0x02,0xFE,0xFE,0x22,0x02,0x00,  // 1 
....................   0x00,0x62,0xF2,0x92,0x8A,0xCE,0x46,0x00,  // 2 
....................   0x00,0x6C,0xFE,0x92,0x92,0xC6,0x44,0x00,  // 3 
....................   0x08,0xFE,0xFE,0x68,0x28,0x18,0x18,0x00,  // 4 
....................   0x00,0x9C,0xBE,0xA2,0xA2,0xE6,0xE4,0x00,  // 5 
....................   0x00,0x4C,0xDE,0x92,0x92,0xFE,0x7C,0x00,  // 6 
....................   0x00,0xC0,0xE0,0xBE,0x9E,0xC0,0xC0,0x00,  // 7 
....................   0x00,0x6C,0xFE,0x92,0x92,0xFE,0x6C,0x00,  // 8 
....................   0x00,0x7C,0xFE,0x92,0x92,0xF6,0x64,0x00,  // 9 
....................   0x00,0x00,0x00,0x24,0x24,0x00,0x00,0x00,  // : 
....................   0x00,0x00,0x00,0x26,0x27,0x01,0x00,0x00,  // ; 
....................   0x00,0x82,0x82,0xC6,0x6C,0x38,0x10,0x00,  // < 
....................   0x00,0x28,0x28,0x28,0x28,0x28,0x28,0x00,  // = 
....................   0x00,0x10,0x38,0x6C,0xC6,0x82,0x82,0x00,  // > 
....................   0x00,0x60,0xF0,0x9A,0x8A,0xC0,0x40,0x00,  // ? 
....................   0x00,0x74,0xF2,0xB2,0x82,0xFE,0x7C,0x00,  // @ 
....................   0x00,0x3E,0x7E,0xD0,0xD0,0x7E,0x3E,0x00,  // A  0x41 65 
....................   0x00,0x6C,0xFE,0x92,0x92,0xFE,0xFE,0x00,  // B 
....................   0x00,0x44,0xC6,0x82,0x82,0xFE,0x7C,0x00,  // C 
....................   0x00,0x38,0x7C,0xC6,0x82,0xFE,0xFE,0x00,  // D 
....................   0x00,0x82,0x82,0x92,0x92,0xFE,0xFE,0x00,  // E 
....................   0x00,0x80,0x80,0x90,0x90,0xFE,0xFE,0x00,  // F 
....................   0x00,0x5C,0xDE,0x92,0x82,0xFE,0x7C,0x00,  // G 
....................   0x00,0xFE,0xFE,0x10,0x10,0xFE,0xFE,0x00,  // H 
....................   0x00,0x00,0x82,0xFE,0xFE,0x82,0x00,0x00,  // I 
....................   0x00,0x80,0xFC,0xFE,0x82,0x06,0x04,0x00,  // J 
....................   0x00,0x82,0xC6,0x6C,0x38,0xFE,0xFE,0x00,  // K 
....................   0x00,0x02,0x02,0x02,0x02,0xFE,0xFE,0x00,  // L 
....................   0xFE,0xFE,0x60,0x30,0x60,0xFE,0xFE,0x00,  // M 
....................   0x00,0xFE,0xFE,0x38,0x70,0xFE,0xFE,0x00,  // N 
....................   0x00,0x7C,0xFE,0x82,0x82,0xFE,0x7C,0x00,  // O 
....................   0x00,0x60,0xF0,0x90,0x90,0xFE,0xFE,0x00,  // P 
....................   0x00,0x7A,0xFE,0x86,0x84,0xFC,0x78,0x00,  // Q 
....................   0x00,0x62,0xF6,0x9C,0x98,0xFE,0xFE,0x00,  // R 
....................   0x00,0x4C,0xDE,0x92,0x92,0xF6,0x64,0x00,  // S 
....................   0x00,0x80,0x80,0xFE,0xFE,0x80,0x80,0x00,  // T 
....................   0x00,0xFC,0xFE,0x02,0x02,0xFE,0xFC,0x00,  // U 
....................   0x00,0xF8,0xFC,0x06,0x06,0xFC,0xF8,0x00,  // V 
....................   0xFE,0xFE,0x0C,0x18,0x0C,0xFE,0xFE,0x00,  // W 
....................   0x00,0xC6,0xEE,0x38,0x38,0xEE,0xC6,0x00,  // X 
....................   0x00,0xE0,0xF0,0x1E,0x1E,0xF0,0xE0,0x00,  // Y 
....................   0x00,0xC2,0xE2,0xB2,0x9A,0x8E,0x86,0x00,  // Z 
....................   0x00,0x00,0x82,0x82,0xFE,0xFE,0x00,0x00,  // [ 
....................   0x40,0x60,0x30,0x18,0x0C,0x06,0x02,0x00,  // backslash 
....................   0x00,0x00,0xFE,0xFE,0x82,0x82,0x00,0x00,  // ] 
....................   0x00,0x80,0xC0,0x60,0x20,0x00,0x00,0x00,  // ^ 
....................   0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,  // _ 
....................   0x00,0x80,0xC0,0x60,0x20,0x00,0x00,0x00,  // ` 
....................   0x00,0x1E,0x3E,0x2A,0x2A,0x2E,0x04,0x00,  // a 
....................   0x00,0x0C,0x1E,0x12,0x12,0x7E,0x7E,0x00,  // b 
....................   0x00,0x00,0x22,0x22,0x22,0x3E,0x1C,0x00,  // c 
....................   0x00,0x7E,0x7E,0x12,0x12,0x1E,0x0C,0x00,  // d 
....................   0x00,0x18,0x3A,0x2A,0x2A,0x3E,0x1C,0x00,  // e 
....................   0x00,0x50,0x50,0x7E,0x3E,0x10,0x00,0x00,  // f 
....................   0x00,0x3E,0x3F,0x25,0x25,0x3D,0x19,0x00,  // g 
....................   0x00,0x0E,0x1E,0x10,0x10,0x7E,0x7E,0x00,  // h 
....................   0x00,0x00,0x02,0x5E,0x5E,0x12,0x00,0x00,  // i 
....................   0x00,0x5E,0x5F,0x01,0x01,0x01,0x00,0x00,  // j 
....................   0x00,0x02,0x16,0x1C,0x08,0x7E,0x7E,0x00,  // k 
....................   0x00,0x00,0x02,0x7E,0x7E,0x42,0x00,0x00,  // l 
....................   0x1E,0x3E,0x38,0x1C,0x18,0x3E,0x3E,0x00,  // m 
....................   0x00,0x1E,0x3E,0x20,0x20,0x3E,0x3E,0x00,  // n 
....................   0x00,0x1C,0x3E,0x22,0x22,0x3E,0x1C,0x00,  // o 
....................   0x00,0x18,0x3C,0x24,0x24,0x3F,0x3F,0x00,  // p 
....................   0x00,0x3F,0x3F,0x24,0x24,0x3C,0x18,0x00,  // q 
....................   0x00,0x10,0x30,0x20,0x20,0x3E,0x3E,0x00,  // r 
....................   0x00,0x24,0x2E,0x2A,0x2A,0x3A,0x12,0x00,  // s 
....................   0x00,0x22,0x22,0x7E,0x7C,0x20,0x20,0x00,  // t 
....................   0x00,0x3E,0x3E,0x02,0x02,0x3E,0x3C,0x00,  // u 
....................   0x00,0x38,0x3C,0x06,0x06,0x3C,0x38,0x00,  // v 
....................   0x38,0x3E,0x0E,0x1C,0x0E,0x3E,0x38,0x00,  // w 
....................   0x00,0x22,0x36,0x1C,0x1C,0x36,0x22,0x00,  // x 
....................   0x00,0x3C,0x3E,0x07,0x05,0x3D,0x39,0x00,  // y 
....................   0x00,0x22,0x32,0x3A,0x2E,0x26,0x22,0x00,  // z 
....................   0x00,0x00,0x82,0x82,0xFE,0xFE,0x00,0x00,  // ] 
....................   0x00,0x44,0x92,0x92,0x7A,0x3E,0x16,0x02,  // Pfund 
....................   0x00,0x00,0xFE,0xFE,0x82,0x82,0x00,0x00,  // [ 
....................   0x00,0x10,0x30,0x7F,0x7F,0x30,0x10,0x00,  // Pfeil hoch 
....................   0x18,0x18,0x18,0x18,0x7E,0x3C,0x18,0x00,  // Pfeil links 
.................... }; 
....................  
.................... BYTE const font5x8_1[240]={ 
.................... 0x00,0x00,0x00,0x00,0x00,   // 20 space          ASCII table for NOKIA LCD: 96 rows * 5 bytes= 480 bytes 
....................   0x00,0x00,0x5f,0x00,0x00,   // 21 ! 
....................   0x00,0x07,0x00,0x07,0x00,   // 22 " 
....................   0x14,0x7f,0x14,0x7f,0x14,   // 23 # 
....................   0x24,0x2a,0x7f,0x2a,0x12,   // 24 $ 
....................   0x23,0x13,0x08,0x64,0x62,   // 25 % 
....................   0x36,0x49,0x55,0x22,0x50,   // 26 & 
....................   0x00,0x05,0x03,0x00,0x00,   // 27 ' 
....................   0x00,0x1c,0x22,0x41,0x00,   // 28 ( 
....................   0x00,0x41,0x22,0x1c,0x00,   // 29 ) 
....................   0x14,0x08,0x3e,0x08,0x14,   // 2a * 
....................   0x08,0x08,0x3e,0x08,0x08,   // 2b + 
....................   0x00,0x50,0x30,0x00,0x00,   // 2c , 
....................   0x08,0x08,0x08,0x08,0x08,   // 2d - 
....................   0x00,0x60,0x60,0x00,0x00,   // 2e . 
....................   0x20,0x10,0x08,0x04,0x02,   // 2f / 
....................   0x3e,0x51,0x49,0x45,0x3e,   // 30 0 
....................   0x00,0x42,0x7f,0x40,0x00,   // 31 1 
....................   0x42,0x61,0x51,0x49,0x46,   // 32 2 
....................   0x21,0x41,0x45,0x4b,0x31,   // 33 3 
....................   0x18,0x14,0x12,0x7f,0x10,   // 34 4 
....................   0x27,0x45,0x45,0x45,0x39,   // 35 5 
....................   0x3c,0x4a,0x49,0x49,0x30,   // 36 6 
....................   0x01,0x71,0x09,0x05,0x03,   // 37 7 
....................   0x36,0x49,0x49,0x49,0x36,   // 38 8 
....................   0x06,0x49,0x49,0x29,0x1e,   // 39 9 
....................   0x00,0x36,0x36,0x00,0x00,   // 3a : 
....................   0x00,0x56,0x36,0x00,0x00,   // 3b ; 
....................   0x08,0x14,0x22,0x41,0x00,   // 3c < 
....................   0x14,0x14,0x14,0x14,0x14,   // 3d = 
....................   0x00,0x41,0x22,0x14,0x08,   // 3e > 
....................   0x02,0x01,0x51,0x09,0x06,   // 3f ? 
....................   0x32,0x49,0x79,0x41,0x3e,   // 40 @ 
....................   0x7e,0x11,0x11,0x11,0x7e,   // 41 A 
....................   0x7f,0x49,0x49,0x49,0x36,   // 42 B 
....................   0x3e,0x41,0x41,0x41,0x22,   // 43 C 
....................   0x7f,0x41,0x41,0x22,0x1c,   // 44 D 
....................   0x7f,0x49,0x49,0x49,0x41,   // 45 E 
....................   0x7f,0x09,0x09,0x09,0x01,   // 46 F 
....................   0x3e,0x41,0x49,0x49,0x7a,   // 47 G 
....................   0x7f,0x08,0x08,0x08,0x7f,   // 48 H 
....................   0x00,0x41,0x7f,0x41,0x00,   // 49 I 
....................   0x20,0x40,0x41,0x3f,0x01,   // 4a J 
....................   0x7f,0x08,0x14,0x22,0x41,   // 4b K 
....................   0x7f,0x40,0x40,0x40,0x40,   // 4c L 
....................   0x7f,0x02,0x0c,0x02,0x7f,   // 4d M 
....................   0x7f,0x04,0x08,0x10,0x7f,   // 4e N 
....................   0x3e,0x41,0x41,0x41,0x3e    // 4f O 
.................... };    
....................  
....................  
.................... BYTE const font5x8_2[240]=            { 
....................   0x7f,0x09,0x09,0x09,0x06,   // 50 P 
....................   0x3e,0x41,0x51,0x21,0x5e,   // 51 Q 
....................   0x7f,0x09,0x19,0x29,0x46,   // 52 R 
....................   0x46,0x49,0x49,0x49,0x31,   // 53 S 
....................   0x01,0x01,0x7f,0x01,0x01,   // 54 T 
....................   0x3f,0x40,0x40,0x40,0x3f,   // 55 U 
....................   0x1f,0x20,0x40,0x20,0x1f,   // 56 V 
....................   0x3f,0x40,0x38,0x40,0x3f,   // 57 W 
....................   0x63,0x14,0x08,0x14,0x63,   // 58 X 
....................   0x07,0x08,0x70,0x08,0x07,   // 59 Y 
....................   0x61,0x51,0x49,0x45,0x43,   // 5a Z 
....................   0x00,0x7f,0x41,0x41,0x00,   // 5b [ 
....................   0x02,0x04,0x08,0x10,0x20,   // 5c 
....................   0x00,0x41,0x41,0x7f,0x00,   // 5d 
....................   0x04,0x02,0x01,0x02,0x04,   // 5e 
....................   0x40,0x40,0x40,0x40,0x40,   // 5f 
....................   0x00,0x01,0x02,0x04,0x00,   // 60 
....................   0x20,0x54,0x54,0x54,0x78,   // 61 a 
....................   0x7f,0x48,0x44,0x44,0x38,   // 62 b 
....................   0x38,0x44,0x44,0x44,0x20,   // 63 c 
....................   0x38,0x44,0x44,0x48,0x7f,   // 64 d 
....................   0x38,0x54,0x54,0x54,0x18,   // 65 e 
....................   0x08,0x7e,0x09,0x01,0x02,   // 66 f 
....................   0x0c,0x52,0x52,0x52,0x3e,   // 67 g 
....................   0x7f,0x08,0x04,0x04,0x78,   // 68 h 
....................   0x00,0x44,0x7d,0x40,0x00,   // 69 i 
....................   0x20,0x40,0x44,0x3d,0x00,   // 6a j 
....................   0x7f,0x10,0x28,0x44,0x00,   // 6b k 
....................   0x00,0x41,0x7f,0x40,0x00,   // 6c l 
....................   0x7c,0x04,0x18,0x04,0x78,   // 6d m 
....................   0x7c,0x08,0x04,0x04,0x78,   // 6e n 
....................   0x38,0x44,0x44,0x44,0x38,   // 6f o 
....................   0x7c,0x14,0x14,0x14,0x08,   // 70 p 
....................   0x08,0x14,0x14,0x18,0x7c,   // 71 q 
....................   0x7c,0x08,0x04,0x04,0x08,   // 72 r 
....................   0x48,0x54,0x54,0x54,0x20,   // 73 s 
....................   0x04,0x3f,0x44,0x40,0x20,   // 74 t 
....................   0x3c,0x40,0x40,0x20,0x7c,   // 75 u 
....................   0x1c,0x20,0x40,0x20,0x1c,   // 76 v 
....................   0x3c,0x40,0x30,0x40,0x3c,   // 77 w 
....................   0x44,0x28,0x10,0x28,0x44,   // 78 x 
....................   0x0c,0x50,0x50,0x50,0x3c,   // 79 y 
....................   0x44,0x64,0x54,0x4c,0x44,   // 7a z 
....................   0x00,0x08,0x36,0x41,0x00,   // 7b 
....................   0x00,0x00,0x7f,0x00,0x00,   // 7c 
....................   0x00,0x41,0x36,0x08,0x00,   // 7d 
....................   0x10,0x08,0x08,0x10,0x08,   // 7e 
....................   0x78,0x46,0x41,0x46,0x78    // 7f 
.................... }; 
....................  
....................  
.................... int fY = 0; 
.................... int fX = 0; 
.................... int16 Back; 
.................... int16 Front; 
....................  
.................... void initlcd(void); 
.................... void lcdfill(char color); 
.................... void lcdcommand(unsigned char dta); 
.................... void lcddata(unsigned char dta); 
.................... void write_lcd(unsigned char b); 
.................... void drawpixel(unsigned char x,unsigned char y,unsigned char color); 
....................  
.................... void lcddata(unsigned char dta){ 
....................    output_bit(LCD_CS, 0); 
*
0368:  BCF    06.6
0369:  BSF    03.5
036A:  BCF    06.6
....................    output_bit(LCD_RS, 1); 
036B:  BCF    03.5
036C:  BSF    06.4
036D:  BSF    03.5
036E:  BCF    06.4
....................    write_lcd(dta); 
036F:  BCF    03.5
0370:  MOVF   68,W
0371:  MOVWF  71
0372:  CALL   28E
....................    output_bit(LCD_CS, 1); 
0373:  BSF    06.6
0374:  BSF    03.5
0375:  BCF    06.6
.................... } 
0376:  BCF    03.5
0377:  RETURN
.................... // ***************************************************************************** 
.................... // 
.................... // ***************************************************************************** 
.................... void lcdcommand(unsigned char dta){ 
....................    output_bit(LCD_CS, 0); 
*
0294:  BCF    06.6
0295:  BSF    03.5
0296:  BCF    06.6
....................    output_bit(LCD_RS, 0); 
0297:  BCF    03.5
0298:  BCF    06.4
0299:  BSF    03.5
029A:  BCF    06.4
....................    write_lcd(dta); 
029B:  MOVF   70,W
029C:  MOVWF  71
029D:  BCF    03.5
029E:  CALL   28E
....................    output_bit(LCD_CS, 1); 
029F:  BSF    06.6
02A0:  BSF    03.5
02A1:  BCF    06.6
.................... } 
02A2:  BCF    03.5
02A3:  RETURN
.................... // ***************************************************************************** 
.................... // 
.................... // ***************************************************************************** 
.................... void write_lcd(unsigned char b){ 
....................    //spi_write(b); 
....................    spi_xfer(SPI_1, b);    
*
028E:  MOVF   71,W
028F:  MOVWF  72
0290:  MOVLW  08
0291:  MOVWF  73
0292:  GOTO   26B
.................... } 
0293:  RETURN
.................... // ***************************************************************************** 
.................... // 
.................... // ***************************************************************************** 
.................... void lcdcommand16(unsigned char cmd, unsigned char param){ 
....................    output_bit(LCD_CS, 0); 
*
02A4:  BCF    06.6
02A5:  BSF    03.5
02A6:  BCF    06.6
....................    output_bit(LCD_RS, 0); 
02A7:  BCF    03.5
02A8:  BCF    06.4
02A9:  BSF    03.5
02AA:  BCF    06.4
....................    write_lcd(cmd); 
02AB:  BCF    03.5
02AC:  MOVF   53,W
02AD:  MOVWF  71
02AE:  CALL   28E
....................    write_lcd(param); 
02AF:  MOVF   54,W
02B0:  MOVWF  71
02B1:  CALL   28E
....................    output_bit(LCD_CS, 1); 
02B2:  BSF    06.6
02B3:  BSF    03.5
02B4:  BCF    06.6
.................... } 
02B5:  BCF    03.5
02B6:  RETURN
.................... // ***************************************************************************** 
.................... // 
.................... // ***************************************************************************** 
.................... void initlcd(void){ 
.................... // ------  Hardware reset ------  
....................    output_bit(LCD_RESET, 0);    
*
02EB:  BCF    06.5
02EC:  BSF    03.5
02ED:  BCF    06.5
....................    output_bit(LCD_SCK, 1); 
02EE:  BCF    03.5
02EF:  BSF    06.3
02F0:  BSF    03.5
02F1:  BCF    06.3
....................    output_bit(LCD_DATA, 1); 
02F2:  BCF    03.5
02F3:  BSF    06.2
02F4:  BSF    03.5
02F5:  BCF    06.2
....................    output_bit(LCD_RS, 1); 
02F6:  BCF    03.5
02F7:  BSF    06.4
02F8:  BSF    03.5
02F9:  BCF    06.4
....................    output_bit(LCD_CS, 1); 
02FA:  BCF    03.5
02FB:  BSF    06.6
02FC:  BSF    03.5
02FD:  BCF    06.6
....................    output_bit(LCD_RESET, 1); 
02FE:  BCF    03.5
02FF:  BSF    06.5
0300:  BSF    03.5
0301:  BCF    06.5
....................     
....................    //lcdcommand(DISOFF); 
....................    lcdcommand(STBYOFF);        // STANDBY off 
0302:  MOVLW  2C
0303:  MOVWF  70
0304:  BCF    03.5
0305:  CALL   294
....................    lcdcommand16(OSC,0x01);     // P = 0x01 Oscillator on 
0306:  MOVLW  02
0307:  MOVWF  53
0308:  MOVLW  01
0309:  MOVWF  54
030A:  CALL   2A4
....................    lcdcommand16(DRVOUT,0x34);  // P = 0x30 Driver output 
030B:  MOVLW  10
030C:  MOVWF  53
030D:  MOVLW  34
030E:  MOVWF  54
030F:  CALL   2A4
....................    lcdcommand16(DCDCSEL,0x01); // P = 0x01 DC-DC Select 
0310:  MOVLW  20
0311:  MOVWF  53
0312:  MOVLW  01
0313:  MOVWF  54
0314:  CALL   2A4
....................    lcdcommand16(BIAS,0x01);    // P = 0x01 Bias SET 
0315:  MOVLW  22
0316:  MOVWF  53
0317:  MOVLW  01
0318:  MOVWF  54
0319:  CALL   2A4
....................    lcdcommand16(DCDCCLK,0x05); // P = 0x05 DCDC Clock 
031A:  MOVLW  24
031B:  MOVWF  53
031C:  MOVLW  05
031D:  MOVWF  54
031E:  CALL   2A4
....................    lcdcommand16(DCDCCTL,0x0f); // P = 0x0F DCDC ON 
031F:  MOVLW  26
0320:  MOVWF  53
0321:  MOVLW  0F
0322:  MOVWF  54
0323:  CALL   2A4
....................    lcdcommand16(TEMPCOM,0x00); // P = 0x00 Temp 
0324:  MOVLW  28
0325:  MOVWF  53
0326:  CLRF   54
0327:  CALL   2A4
....................    lcdcommand16(CONT1,0xB5);   // P = 0xA5 Contrast 1  
0328:  MOVLW  2A
0329:  MOVWF  53
032A:  MOVLW  B5
032B:  MOVWF  54
032C:  CALL   2A4
....................    lcdcommand16(ADRMODE,0x41); // P = 0x01 256 colors, 
032D:  MOVLW  30
032E:  MOVWF  53
032F:  MOVLW  41
0330:  MOVWF  54
0331:  CALL   2A4
....................    lcdcommand16(ROWVEC,0x01);  // P = 0x01 Row Vector 
0332:  MOVLW  32
0333:  MOVWF  53
0334:  MOVLW  01
0335:  MOVWF  54
0336:  CALL   2A4
....................    lcdcommand16(NLINV,0x82);   // P = 0x82 Forcing invertion on,every 2 blocks 
0337:  MOVLW  34
0338:  MOVWF  53
0339:  MOVLW  82
033A:  MOVWF  54
033B:  CALL   2A4
....................    lcdcommand16(ENTRY,0x00);   // P = 0x00 Entry mode   
033C:  MOVLW  40
033D:  MOVWF  53
033E:  CLRF   54
033F:  CALL   2A4
....................    lcdfill(BLACK); 
0340:  CLRF   53
0341:  CALL   2B7
....................    lcdcommand(DISON);          // Disp On 
0342:  MOVLW  51
0343:  MOVWF  70
0344:  CALL   294
....................    } 
0345:  BCF    0A.3
0346:  BCF    0A.4
0347:  GOTO   49B (RETURN)
.................... // ***************************************************************************** 
.................... // 
.................... // ***************************************************************************** 
.................... void lcdfill(char color){ 
....................    unsigned long i; 
....................    output_bit(LCD_CS, 0);    
*
02B7:  BCF    06.6
02B8:  BSF    03.5
02B9:  BCF    06.6
....................    output_bit(LCD_RS, 0); 
02BA:  BCF    03.5
02BB:  BCF    06.4
02BC:  BSF    03.5
02BD:  BCF    06.4
....................    write_lcd(XSET); 
02BE:  MOVLW  42
02BF:  MOVWF  71
02C0:  BCF    03.5
02C1:  CALL   28E
....................    write_lcd(0); 
02C2:  CLRF   71
02C3:  CALL   28E
....................    write_lcd(131); 
02C4:  MOVLW  83
02C5:  MOVWF  71
02C6:  CALL   28E
....................    write_lcd(YSET); 
02C7:  MOVLW  43
02C8:  MOVWF  71
02C9:  CALL   28E
....................    write_lcd(0); 
02CA:  CLRF   71
02CB:  CALL   28E
....................    write_lcd(131); 
02CC:  MOVLW  83
02CD:  MOVWF  71
02CE:  CALL   28E
....................    output_bit(LCD_RS, 1); 
02CF:  BSF    06.4
02D0:  BSF    03.5
02D1:  BCF    06.4
....................    for(i = 0; i < (132*132); i++) 
02D2:  BCF    03.5
02D3:  CLRF   55
02D4:  CLRF   54
02D5:  MOVF   55,W
02D6:  SUBLW  44
02D7:  BTFSS  03.0
02D8:  GOTO   2E6
02D9:  BTFSS  03.2
02DA:  GOTO   2DF
02DB:  MOVF   54,W
02DC:  SUBLW  0F
02DD:  BTFSS  03.0
02DE:  GOTO   2E6
....................       write_lcd(color); 
02DF:  MOVF   53,W
02E0:  MOVWF  71
02E1:  CALL   28E
02E2:  INCF   54,F
02E3:  BTFSC  03.2
02E4:  INCF   55,F
02E5:  GOTO   2D5
....................    output_bit(LCD_CS, 1);    
02E6:  BSF    06.6
02E7:  BSF    03.5
02E8:  BCF    06.6
.................... } 
02E9:  BCF    03.5
02EA:  RETURN
.................... // ************************************************************************************* 
.................... // 
.................... // ************************************************************************************* 
.................... void drawpixel(unsigned char x,unsigned char y,unsigned char color){ 
....................    output_bit(LCD_CS, 0); 
....................    output_bit(LCD_RS, 0);    
....................    write_lcd(XSET); 
....................    write_lcd(x); 
....................    write_lcd(x); 
....................    write_lcd(YSET); 
....................    write_lcd(y); 
....................    write_lcd(y); 
....................    output_bit(LCD_RS, 1); 
....................    write_lcd(color); //RRRGGGBB 
....................    output_bit(LCD_CS, 1); 
.................... } 
....................  
.................... void setFillArea(int X, int Y, int Width, int Height){ 
*
0348:  MOVLW  02
0349:  ADDWF  68,W
034A:  MOVWF  6C
034B:  MOVLW  02
034C:  ADDWF  68,W
034D:  ADDWF  6A,W
034E:  MOVWF  6D
034F:  MOVF   69,W
0350:  MOVWF  6E
0351:  MOVF   6B,W
0352:  ADDWF  69,W
0353:  ADDLW  FF
0354:  MOVWF  6F
....................    int StartX = 2 + X; 
....................    int EndX = 2 + X + Width; 
....................     
....................    int StartY = Y; 
....................    int EndY = Y + Height - 1; 
....................     
....................    lcdcommand(XSET);  
0355:  MOVLW  42
0356:  MOVWF  70
0357:  CALL   294
....................    lcdcommand(StartX);  
0358:  MOVF   6C,W
0359:  MOVWF  70
035A:  CALL   294
....................    lcdcommand(EndX); 
035B:  MOVF   6D,W
035C:  MOVWF  70
035D:  CALL   294
....................    lcdcommand(YSET);  
035E:  MOVLW  43
035F:  MOVWF  70
0360:  CALL   294
....................    lcdcommand(StartY);  
0361:  MOVF   6E,W
0362:  MOVWF  70
0363:  CALL   294
....................    lcdcommand(EndY);    
0364:  MOVF   6F,W
0365:  MOVWF  70
0366:  CALL   294
....................     
.................... /*   int StartX = 2 + X; 
....................    int EndX = 2 + X + Width; 
....................     
....................    int StartY = Y; 
....................    int EndY = Y + Height - 1; 
....................     
....................    lcdcommand(XSET);  
....................    lcdcommand(StartX);  
....................    lcdcommand(EndX); 
....................    lcdcommand(YSET);  
....................    lcdcommand(StartY);  
....................    lcdcommand(EndY);  */    
.................... } 
0367:  RETURN
....................  
.................... void putChar(int16 BackColor, int16 FrontColor, char C, int X, int Y){ 
....................    setFillArea(X, Y, 5, 8); 
*
0428:  MOVF   63,W
0429:  MOVWF  68
042A:  MOVF   64,W
042B:  MOVWF  69
042C:  MOVLW  05
042D:  MOVWF  6A
042E:  MOVLW  08
042F:  MOVWF  6B
0430:  CALL   348
....................    int i, j, Line; 
....................  
....................    for (i = 0; i < 5; i++){ 
0431:  CLRF   65
0432:  MOVF   65,W
0433:  SUBLW  04
0434:  BTFSS  03.0
0435:  GOTO   46A
....................       if (C<0x50)       
0436:  MOVF   62,W
0437:  SUBLW  4F
0438:  BTFSS  03.0
0439:  GOTO   446
....................          Line = font5x8_1[(((C&0xff)-0x20)*5+i)]; 
043A:  MOVF   62,W
043B:  ADDLW  E0
043C:  MOVWF  69
043D:  MOVWF  6A
043E:  MOVLW  05
043F:  MOVWF  6B
0440:  CALL   3E8
0441:  MOVF   65,W
0442:  ADDWF  78,W
0443:  CALL   033
0444:  MOVWF  78
0445:  MOVWF  67
....................       if (C>0x4f) 
0446:  MOVF   62,W
0447:  SUBLW  4F
0448:  BTFSC  03.0
0449:  GOTO   456
....................          Line = font5x8_2[(((C&0xff)-0x50)*5+i)]; 
044A:  MOVF   62,W
044B:  ADDLW  B0
044C:  MOVWF  69
044D:  MOVWF  6A
044E:  MOVLW  05
044F:  MOVWF  6B
0450:  CALL   3E8
0451:  MOVF   65,W
0452:  ADDWF  78,W
0453:  CALL   12A
0454:  MOVWF  78
0455:  MOVWF  67
....................       for (j = 0; j < 8; j++){ 
0456:  CLRF   66
0457:  MOVF   66,W
0458:  SUBLW  07
0459:  BTFSS  03.0
045A:  GOTO   468
....................          if (Line & 0x01){ // Line & 0x80     
045B:  BTFSS  67.0
045C:  GOTO   461
....................             lcddata(FrontColor); 
045D:  MOVF   60,W
045E:  MOVWF  68
045F:  CALL   368
....................          } 
....................          else{ 
0460:  GOTO   464
....................             lcddata(BackColor); 
0461:  MOVF   5E,W
0462:  MOVWF  68
0463:  CALL   368
....................          } 
....................          Line = Line >> 1;   // Line = Line << 1; 
0464:  BCF    03.0
0465:  RRF    67,F
....................       } 
0466:  INCF   66,F
0467:  GOTO   457
....................    }  
0468:  INCF   65,F
0469:  GOTO   432
.................... } 
.................... void drawBox(int16 Color, int X, int Y, int Width, int Height){    
....................    setFillArea(X, Y, Width, Height); 
*
0378:  MOVF   55,W
0379:  MOVWF  68
037A:  MOVF   56,W
037B:  MOVWF  69
037C:  MOVF   57,W
037D:  MOVWF  6A
037E:  MOVF   58,W
037F:  MOVWF  6B
0380:  CALL   348
....................    int i, j, Line; 
....................   
....................    for (i = 0; i < Width; i++){ 
0381:  CLRF   59
0382:  MOVF   57,W
0383:  SUBWF  59,W
0384:  BTFSC  03.0
0385:  GOTO   394
....................       Line = 0xff; 
0386:  MOVLW  FF
0387:  MOVWF  5B
....................       for (j = 0; j < Height; j++) 
0388:  CLRF   5A
0389:  MOVF   58,W
038A:  SUBWF  5A,W
038B:  BTFSC  03.0
038C:  GOTO   392
....................          lcddata(Color); 
038D:  MOVF   53,W
038E:  MOVWF  68
038F:  CALL   368
0390:  INCF   5A,F
0391:  GOTO   389
....................    }  
0392:  INCF   59,F
0393:  GOTO   382
.................... } 
0394:  RETURN
.................... void setXY(int X, int Y){ 
....................   fX = X; 
....................   fY = Y; 
.................... } 
....................  
.................... void setFrontColor(int16 Color){ 
....................   Front = Color; 
.................... } 
....................  
.................... void setBackColor(int16 Color){ 
....................   Back = Color; 
.................... } 
....................  
.................... void putText(int16 BackColor, int16 FrontColor, char* Text, int Length, int X, int Y){ 
....................   int i; 
....................   for (i = 0; i < Length; i++){ 
*
040D:  CLRF   5C
040E:  MOVF   59,W
040F:  SUBWF  5C,W
0410:  BTFSC  03.0
0411:  GOTO   46E
....................     putChar(BackColor,FrontColor,Text[i],X,Y); 
0412:  MOVF   5C,W
0413:  ADDWF  57,W
0414:  MOVWF  04
0415:  BCF    03.7
0416:  BTFSC  58.0
0417:  BSF    03.7
0418:  MOVF   00,W
0419:  MOVWF  5D
041A:  MOVF   54,W
041B:  MOVWF  5F
041C:  MOVF   53,W
041D:  MOVWF  5E
041E:  MOVF   56,W
041F:  MOVWF  61
0420:  MOVF   55,W
0421:  MOVWF  60
0422:  MOVF   5D,W
0423:  MOVWF  62
0424:  MOVF   5A,W
0425:  MOVWF  63
0426:  MOVF   5B,W
0427:  MOVWF  64
....................     X +=6; 
*
046A:  MOVLW  06
046B:  ADDWF  5A,F
....................   }       
046C:  INCF   5C,F
046D:  GOTO   40E
.................... } 
046E:  RETURN
....................  
.................... void writeLn(char* Text){ 
....................    putText(Back, Front, Text, strlen(Text), fX, fY); 
....................    fY+=12; 
.................... } 
....................  
....................  
.................... #define LED_STATUS   pin_b7 
....................  
.................... int tempo; 
.................... char text[30]; 
....................  
.................... #int_TIMER0 
.................... void  TIMER0_isr(void){ 
....................    tempo++; 
*
0221:  INCF   31,F
....................    if(tempo == 70){   //  46 * 21,8ms =~ 1002,8ms ou 1,002 segundos  
0222:  MOVF   31,W
0223:  SUBLW  46
0224:  BTFSS  03.2
0225:  GOTO   22C
....................       tempo=0; 
0226:  CLRF   31
....................       output_toggle(LED_STATUS); 
0227:  BSF    03.5
0228:  BCF    06.7
0229:  MOVLW  80
022A:  BCF    03.5
022B:  XORWF  06,F
....................    } 
....................    output_toggle(pin_c4);    
022C:  BCF    28.4
022D:  MOVF   28,W
022E:  BSF    03.5
022F:  MOVWF  07
0230:  MOVLW  10
0231:  BCF    03.5
0232:  XORWF  07,F
.................... } 
0233:  BCF    0B.2
0234:  BCF    0A.3
0235:  BCF    0A.4
0236:  GOTO   01D
.................... void main(void){ 
*
0255:  DATA 00,00
*
046F:  CLRF   04
0470:  BCF    03.7
0471:  MOVLW  1F
0472:  ANDWF  03,F
0473:  MOVLW  FF
0474:  MOVWF  28
0475:  BSF    28.7
0476:  MOVF   28,W
0477:  BSF    03.5
0478:  MOVWF  07
0479:  BCF    06.2
047A:  BCF    06.3
047B:  BCF    03.5
047C:  BCF    06.3
047D:  CLRF   2B
047E:  CLRF   2C
047F:  CLRF   51
0480:  CLRF   50
0481:  BSF    03.5
0482:  BSF    1F.0
0483:  BSF    1F.1
0484:  BSF    1F.2
0485:  BCF    1F.3
....................    int i; 
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_32|RTCC_8_bit);  //RTCC_DIV_256    //21.8 ms overflow 
*
0489:  BSF    03.5
048A:  MOVF   01,W
048B:  ANDLW  C0
048C:  IORLW  04
048D:  MOVWF  01
....................    setup_adc_ports(NO_ANALOGS); 
048E:  BSF    1F.0
048F:  BSF    1F.1
0490:  BSF    1F.2
0491:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
0492:  BCF    03.5
0493:  BCF    1F.0
....................    enable_interrupts(INT_TIMER0); 
0494:  BSF    0B.5
....................    enable_interrupts(GLOBAL);    
0495:  MOVLW  C0
0496:  IORWF  0B,F
....................     
....................    delay_ms(200); 
0497:  MOVLW  C8
0498:  MOVWF  54
0499:  CALL   256
....................    initlcd(); 
049A:  GOTO   2EB
....................    lcdfill(0b11100000);   // 0bRRRGGGBB 
049B:  MOVLW  E0
049C:  MOVWF  53
049D:  CALL   2B7
....................    delay_ms(300); 
049E:  MOVLW  02
049F:  MOVWF  53
04A0:  MOVLW  96
04A1:  MOVWF  54
04A2:  CALL   256
04A3:  DECFSZ 53,F
04A4:  GOTO   4A0
....................    lcdfill(0b00011100);   // 0bRRRGGGBB 
04A5:  MOVLW  1C
04A6:  MOVWF  53
04A7:  CALL   2B7
....................    delay_ms(300); 
04A8:  MOVLW  02
04A9:  MOVWF  53
04AA:  MOVLW  96
04AB:  MOVWF  54
04AC:  CALL   256
04AD:  DECFSZ 53,F
04AE:  GOTO   4AA
....................    lcdfill(0b00000011);   // 0bRRRGGGBB 
04AF:  MOVLW  03
04B0:  MOVWF  53
04B1:  CALL   2B7
....................    delay_ms(300);    
04B2:  MOVLW  02
04B3:  MOVWF  53
04B4:  MOVLW  96
04B5:  MOVWF  54
04B6:  CALL   256
04B7:  DECFSZ 53,F
04B8:  GOTO   4B4
....................    lcdfill(0b00000000);   // 0bRRRGGGBB 
04B9:  CLRF   53
04BA:  CALL   2B7
....................    delay_ms(500); 
04BB:  MOVLW  02
04BC:  MOVWF  53
04BD:  MOVLW  FA
04BE:  MOVWF  54
04BF:  CALL   256
04C0:  DECFSZ 53,F
04C1:  GOTO   4BD
....................     
....................    drawBox(WHITE, 0, 0, 10, 130); 
04C2:  CLRF   54
04C3:  MOVLW  FF
04C4:  MOVWF  53
04C5:  CLRF   55
04C6:  CLRF   56
04C7:  MOVLW  0A
04C8:  MOVWF  57
04C9:  MOVLW  82
04CA:  MOVWF  58
04CB:  CALL   378
....................    drawBox(BLACK, 10, 0, 10, 130); 
04CC:  CLRF   54
04CD:  CLRF   53
04CE:  MOVLW  0A
04CF:  MOVWF  55
04D0:  CLRF   56
04D1:  MOVWF  57
04D2:  MOVLW  82
04D3:  MOVWF  58
04D4:  CALL   378
....................    drawBox(RED,   20, 0, 10, 130); 
04D5:  CLRF   54
04D6:  MOVLW  E0
04D7:  MOVWF  53
04D8:  MOVLW  14
04D9:  MOVWF  55
04DA:  CLRF   56
04DB:  MOVLW  0A
04DC:  MOVWF  57
04DD:  MOVLW  82
04DE:  MOVWF  58
04DF:  CALL   378
....................    drawBox(GREEN, 30, 0, 10, 130); 
04E0:  CLRF   54
04E1:  MOVLW  1C
04E2:  MOVWF  53
04E3:  MOVLW  1E
04E4:  MOVWF  55
04E5:  CLRF   56
04E6:  MOVLW  0A
04E7:  MOVWF  57
04E8:  MOVLW  82
04E9:  MOVWF  58
04EA:  CALL   378
....................    drawBox(BLUE,  40, 0, 10, 130); 
04EB:  CLRF   54
04EC:  MOVLW  03
04ED:  MOVWF  53
04EE:  MOVLW  28
04EF:  MOVWF  55
04F0:  CLRF   56
04F1:  MOVLW  0A
04F2:  MOVWF  57
04F3:  MOVLW  82
04F4:  MOVWF  58
04F5:  CALL   378
....................    drawBox(PINK,  50, 0, 10, 130); 
04F6:  CLRF   54
04F7:  MOVLW  E3
04F8:  MOVWF  53
04F9:  MOVLW  32
04FA:  MOVWF  55
04FB:  CLRF   56
04FC:  MOVLW  0A
04FD:  MOVWF  57
04FE:  MOVLW  82
04FF:  MOVWF  58
0500:  CALL   378
....................    drawBox(BLUE, 60, 0, 10, 130); 
0501:  CLRF   54
0502:  MOVLW  03
0503:  MOVWF  53
0504:  MOVLW  3C
0505:  MOVWF  55
0506:  CLRF   56
0507:  MOVLW  0A
0508:  MOVWF  57
0509:  MOVLW  82
050A:  MOVWF  58
050B:  CALL   378
....................    drawBox(YELLOW,70, 0, 10, 130); 
050C:  CLRF   54
050D:  MOVLW  FC
050E:  MOVWF  53
050F:  MOVLW  46
0510:  MOVWF  55
0511:  CLRF   56
0512:  MOVLW  0A
0513:  MOVWF  57
0514:  MOVLW  82
0515:  MOVWF  58
0516:  CALL   378
....................    drawBox(ORANGE,80, 0, 10, 130);  
0517:  CLRF   54
0518:  MOVLW  F0
0519:  MOVWF  53
051A:  MOVLW  50
051B:  MOVWF  55
051C:  CLRF   56
051D:  MOVLW  0A
051E:  MOVWF  57
051F:  MOVLW  82
0520:  MOVWF  58
0521:  CALL   378
....................    drawBox(WHITE, 90, 0, 10, 130); 
0522:  CLRF   54
0523:  MOVLW  FF
0524:  MOVWF  53
0525:  MOVLW  5A
0526:  MOVWF  55
0527:  CLRF   56
0528:  MOVLW  0A
0529:  MOVWF  57
052A:  MOVLW  82
052B:  MOVWF  58
052C:  CALL   378
....................    drawBox(BLACK, 100, 0, 10, 130); 
052D:  CLRF   54
052E:  CLRF   53
052F:  MOVLW  64
0530:  MOVWF  55
0531:  CLRF   56
0532:  MOVLW  0A
0533:  MOVWF  57
0534:  MOVLW  82
0535:  MOVWF  58
0536:  CALL   378
....................    drawBox(RED,   110, 0, 10, 130); 
0537:  CLRF   54
0538:  MOVLW  E0
0539:  MOVWF  53
053A:  MOVLW  6E
053B:  MOVWF  55
053C:  CLRF   56
053D:  MOVLW  0A
053E:  MOVWF  57
053F:  MOVLW  82
0540:  MOVWF  58
0541:  CALL   378
....................    drawBox(GREEN, 120, 0, 10, 130); 
0542:  CLRF   54
0543:  MOVLW  1C
0544:  MOVWF  53
0545:  MOVLW  78
0546:  MOVWF  55
0547:  CLRF   56
0548:  MOVLW  0A
0549:  MOVWF  57
054A:  MOVLW  82
054B:  MOVWF  58
054C:  CALL   378
....................    delay_ms(2000); 
054D:  MOVLW  08
054E:  MOVWF  53
054F:  MOVLW  FA
0550:  MOVWF  54
0551:  CALL   256
0552:  DECFSZ 53,F
0553:  GOTO   54F
....................  
....................    lcdfill(BLACK); 
0554:  CLRF   53
0555:  CALL   2B7
....................  
....................    /*putChar(BLACK, WHITE, 'a', 0, 0);*/ 
....................   
....................    sprintf(text, "Teste Siemens C65"); 
0556:  CLRF   51
0557:  MOVLW  32
0558:  MOVWF  50
0559:  MOVLW  37
055A:  BSF    03.6
055B:  MOVWF  0D
055C:  MOVLW  02
055D:  MOVWF  0F
055E:  BCF    03.6
055F:  CALL   3A2
....................    putText(BLACK, WHITE, text, 17, 0, 0);   
0560:  CLRF   54
0561:  CLRF   53
0562:  CLRF   56
0563:  MOVLW  FF
0564:  MOVWF  55
0565:  CLRF   58
0566:  MOVLW  32
0567:  MOVWF  57
0568:  MOVLW  11
0569:  MOVWF  59
056A:  CLRF   5A
056B:  CLRF   5B
056C:  CALL   40D
....................    delay_ms(300); 
056D:  MOVLW  02
056E:  MOVWF  53
056F:  MOVLW  96
0570:  MOVWF  54
0571:  CALL   256
0572:  DECFSZ 53,F
0573:  GOTO   56F
....................    drawBox(BLUE, 0, 94, 130, 10); 
0574:  CLRF   54
0575:  MOVLW  03
0576:  MOVWF  53
0577:  CLRF   55
0578:  MOVLW  5E
0579:  MOVWF  56
057A:  MOVLW  82
057B:  MOVWF  57
057C:  MOVLW  0A
057D:  MOVWF  58
057E:  CALL   378
....................    delay_ms(300);    
057F:  MOVLW  02
0580:  MOVWF  53
0581:  MOVLW  96
0582:  MOVWF  54
0583:  CALL   256
0584:  DECFSZ 53,F
0585:  GOTO   581
....................    sprintf(text, "RBJ.NET Electronics"); 
0586:  CLRF   51
0587:  MOVLW  32
0588:  MOVWF  50
0589:  MOVLW  40
058A:  BSF    03.6
058B:  MOVWF  0D
058C:  MOVLW  02
058D:  MOVWF  0F
058E:  BCF    03.6
058F:  CALL   3A2
....................    putText(BLUE, WHITE, text, 19, 10, 96);   
0590:  CLRF   54
0591:  MOVLW  03
0592:  MOVWF  53
0593:  CLRF   56
0594:  MOVLW  FF
0595:  MOVWF  55
0596:  CLRF   58
0597:  MOVLW  32
0598:  MOVWF  57
0599:  MOVLW  13
059A:  MOVWF  59
059B:  MOVLW  0A
059C:  MOVWF  5A
059D:  MOVLW  60
059E:  MOVWF  5B
059F:  CALL   40D
....................    delay_ms(300); 
05A0:  MOVLW  02
05A1:  MOVWF  53
05A2:  MOVLW  96
05A3:  MOVWF  54
05A4:  CALL   256
05A5:  DECFSZ 53,F
05A6:  GOTO   5A2
....................    sprintf(text, "-- Driver By Marlon --"); 
05A7:  CLRF   51
05A8:  MOVLW  32
05A9:  MOVWF  50
05AA:  MOVLW  4A
05AB:  BSF    03.6
05AC:  MOVWF  0D
05AD:  MOVLW  02
05AE:  MOVWF  0F
05AF:  BCF    03.6
05B0:  CALL   3A2
....................    putText(BLACK, WHITE, text, 22, 0, 110);   
05B1:  CLRF   54
05B2:  CLRF   53
05B3:  CLRF   56
05B4:  MOVLW  FF
05B5:  MOVWF  55
05B6:  CLRF   58
05B7:  MOVLW  32
05B8:  MOVWF  57
05B9:  MOVLW  16
05BA:  MOVWF  59
05BB:  CLRF   5A
05BC:  MOVLW  6E
05BD:  MOVWF  5B
05BE:  CALL   40D
....................    drawBox(GREEN, 20, 20, 30, 30); 
05BF:  CLRF   54
05C0:  MOVLW  1C
05C1:  MOVWF  53
05C2:  MOVLW  14
05C3:  MOVWF  55
05C4:  MOVWF  56
05C5:  MOVLW  1E
05C6:  MOVWF  57
05C7:  MOVWF  58
05C8:  CALL   378
....................    delay_ms(300); 
05C9:  MOVLW  02
05CA:  MOVWF  53
05CB:  MOVLW  96
05CC:  MOVWF  54
05CD:  CALL   256
05CE:  DECFSZ 53,F
05CF:  GOTO   5CB
....................    drawBox(BLUE, 50, 20, 30, 30);     
05D0:  CLRF   54
05D1:  MOVLW  03
05D2:  MOVWF  53
05D3:  MOVLW  32
05D4:  MOVWF  55
05D5:  MOVLW  14
05D6:  MOVWF  56
05D7:  MOVLW  1E
05D8:  MOVWF  57
05D9:  MOVWF  58
05DA:  CALL   378
....................    delay_ms(300); 
05DB:  MOVLW  02
05DC:  MOVWF  53
05DD:  MOVLW  96
05DE:  MOVWF  54
05DF:  CALL   256
05E0:  DECFSZ 53,F
05E1:  GOTO   5DD
....................    drawBox(RED, 80, 20, 30, 30); 
05E2:  CLRF   54
05E3:  MOVLW  E0
05E4:  MOVWF  53
05E5:  MOVLW  50
05E6:  MOVWF  55
05E7:  MOVLW  14
05E8:  MOVWF  56
05E9:  MOVLW  1E
05EA:  MOVWF  57
05EB:  MOVWF  58
05EC:  CALL   378
....................    delay_ms(300); 
05ED:  MOVLW  02
05EE:  MOVWF  53
05EF:  MOVLW  96
05F0:  MOVWF  54
05F1:  CALL   256
05F2:  DECFSZ 53,F
05F3:  GOTO   5EF
....................     
....................    drawBox(PINK, 20, 52, 30, 30); 
05F4:  CLRF   54
05F5:  MOVLW  E3
05F6:  MOVWF  53
05F7:  MOVLW  14
05F8:  MOVWF  55
05F9:  MOVLW  34
05FA:  MOVWF  56
05FB:  MOVLW  1E
05FC:  MOVWF  57
05FD:  MOVWF  58
05FE:  CALL   378
....................    delay_ms(300); 
05FF:  MOVLW  02
0600:  MOVWF  53
0601:  MOVLW  96
0602:  MOVWF  54
0603:  CALL   256
0604:  DECFSZ 53,F
0605:  GOTO   601
....................    drawBox(ORANGE, 50, 53, 30, 30);     
0606:  CLRF   54
0607:  MOVLW  F0
0608:  MOVWF  53
0609:  MOVLW  32
060A:  MOVWF  55
060B:  MOVLW  35
060C:  MOVWF  56
060D:  MOVLW  1E
060E:  MOVWF  57
060F:  MOVWF  58
0610:  CALL   378
....................    delay_ms(300); 
0611:  MOVLW  02
0612:  MOVWF  53
0613:  MOVLW  96
0614:  MOVWF  54
0615:  CALL   256
0616:  DECFSZ 53,F
0617:  GOTO   613
....................    drawBox(YELLOW, 80, 52, 30, 30); 
0618:  CLRF   54
0619:  MOVLW  FC
061A:  MOVWF  53
061B:  MOVLW  50
061C:  MOVWF  55
061D:  MOVLW  34
061E:  MOVWF  56
061F:  MOVLW  1E
0620:  MOVWF  57
0621:  MOVWF  58
0622:  CALL   378
....................    delay_ms(300); 
0623:  MOVLW  02
0624:  MOVWF  53
0625:  MOVLW  96
0626:  MOVWF  54
0627:  CALL   256
0628:  DECFSZ 53,F
0629:  GOTO   625
....................  
....................    while(true){} 
062A:  GOTO   62A
.................... } 
....................  
.................... //--------------------------------------------------------------------------------- 
062B:  SLEEP

Configuration Fuses:
   Word  1: 3D3A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
