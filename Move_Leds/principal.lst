CCS PCM C Compiler, Version 4.074, 10898               12-abr-10 00:56

               Filename: principal.lst

               ROM used: 286 words (14%)
                         Largest free fragment is 1762
               RAM used: 11 (5%) at main() level
                         15 (7%) worst case
               Stack:    2 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0DB
0003:  NOP
.................... // Display Sete Segmentos  
....................  
.................... #include <16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
.................... #list 
....................  
.................... #use delay(clock=4000000) 
0004:  MOVLW  28
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETLW  00
.................... #FUSES XT                    
....................  
....................    byte mat[] = {  
....................          0b01000000, // 0000 0010  0 
....................          0b00100100, // 0010 0100  1 
....................          0b00010000  // 0000 1000  2 
....................          //    321       123 
....................    }; 
*
00E1:  MOVLW  40
00E2:  MOVWF  20
00E3:  MOVLW  24
00E4:  MOVWF  21
00E5:  MOVLW  10
00E6:  MOVWF  22
....................  
.................... void mover(int comando){ 
....................    /* ---- COMANDOS ---- 
....................       1: Direita 
....................       2: Esquerda 
....................       3: Cima 
....................       4: Baixo 
....................    */ 
....................    int i, x; 
....................    boolean flag = false; 
*
0019:  BCF    27.0
....................    for(i = 0; i <= 2; i++) 
001A:  CLRF   25
001B:  MOVF   25,W
001C:  SUBLW  02
001D:  BTFSS  03.0
001E:  GOTO   0D7
....................       for(x = 1; x <= 3; x++) 
001F:  MOVLW  01
0020:  MOVWF  26
0021:  MOVF   26,W
0022:  SUBLW  03
0023:  BTFSS  03.0
0024:  GOTO   0D5
....................       if(!flag){ 
0025:  BTFSC  27.0
0026:  GOTO   0D3
....................          if(bit_test(mat[i], x)){ 
0027:  MOVLW  20
0028:  ADDWF  25,W
0029:  MOVWF  04
002A:  BCF    03.7
002B:  MOVF   00,W
002C:  MOVWF  28
002D:  MOVWF  77
002E:  MOVF   26,W
002F:  MOVWF  78
0030:  BTFSC  03.2
0031:  GOTO   036
0032:  BCF    03.0
0033:  RRF    77,F
0034:  DECFSZ 78,F
0035:  GOTO   032
0036:  BTFSS  77.0
0037:  GOTO   0D3
....................             bit_clear(mat[i], x); 
0038:  MOVLW  20
0039:  ADDWF  25,W
003A:  MOVWF  04
003B:  BCF    03.7
003C:  MOVLW  01
003D:  MOVWF  77
003E:  MOVF   26,W
003F:  MOVWF  78
0040:  BTFSC  03.2
0041:  GOTO   046
0042:  BCF    03.0
0043:  RLF    77,F
0044:  DECFSZ 78,F
0045:  GOTO   042
0046:  MOVF   77,W
0047:  XORLW  FF
0048:  ANDWF  00,F
....................             flag = true;             
0049:  BSF    27.0
....................             if(comando == 1){ 
004A:  DECFSZ 24,W
004B:  GOTO   069
....................                if(x == 3) 
004C:  MOVF   26,W
004D:  SUBLW  03
004E:  BTFSS  03.2
004F:  GOTO   056
....................                   bit_set(mat[i], 1); 
0050:  MOVLW  20
0051:  ADDWF  25,W
0052:  MOVWF  04
0053:  BCF    03.7
0054:  BSF    00.1
....................                else 
0055:  GOTO   069
....................                   bit_set(mat[i], x+1); 
0056:  MOVLW  20
0057:  ADDWF  25,W
0058:  MOVWF  04
0059:  BCF    03.7
005A:  MOVLW  01
005B:  ADDWF  26,W
005C:  MOVWF  28
005D:  MOVLW  01
005E:  MOVWF  77
005F:  MOVF   28,W
0060:  MOVWF  78
0061:  BTFSC  03.2
0062:  GOTO   067
0063:  BCF    03.0
0064:  RLF    77,F
0065:  DECFSZ 78,F
0066:  GOTO   063
0067:  MOVF   77,W
0068:  IORWF  00,F
....................             } 
....................             if(comando == 2){ 
0069:  MOVF   24,W
006A:  SUBLW  02
006B:  BTFSS  03.2
006C:  GOTO   088
....................                if(x == 1) 
006D:  DECFSZ 26,W
006E:  GOTO   075
....................                   bit_set(mat[i], 3); 
006F:  MOVLW  20
0070:  ADDWF  25,W
0071:  MOVWF  04
0072:  BCF    03.7
0073:  BSF    00.3
....................                else 
0074:  GOTO   088
....................                   bit_set(mat[i], x-1); 
0075:  MOVLW  20
0076:  ADDWF  25,W
0077:  MOVWF  04
0078:  BCF    03.7
0079:  MOVLW  01
007A:  SUBWF  26,W
007B:  MOVWF  28
007C:  MOVLW  01
007D:  MOVWF  77
007E:  MOVF   28,W
007F:  MOVWF  78
0080:  BTFSC  03.2
0081:  GOTO   086
0082:  BCF    03.0
0083:  RLF    77,F
0084:  DECFSZ 78,F
0085:  GOTO   082
0086:  MOVF   77,W
0087:  IORWF  00,F
....................             }             
....................             if(comando == 3){ 
0088:  MOVF   24,W
0089:  SUBLW  03
008A:  BTFSS  03.2
008B:  GOTO   0AD
....................                if(i == 0) 
008C:  MOVF   25,F
008D:  BTFSS  03.2
008E:  GOTO   09C
....................                   bit_set(mat[2], x); 
008F:  MOVLW  01
0090:  MOVWF  77
0091:  MOVF   26,W
0092:  MOVWF  78
0093:  BTFSC  03.2
0094:  GOTO   099
0095:  BCF    03.0
0096:  RLF    77,F
0097:  DECFSZ 78,F
0098:  GOTO   095
0099:  MOVF   77,W
009A:  IORWF  22,F
....................                else 
009B:  GOTO   0AD
....................                   bit_set(mat[i-1], x); 
009C:  MOVLW  01
009D:  SUBWF  25,W
009E:  ADDLW  20
009F:  MOVWF  04
00A0:  BCF    03.7
00A1:  MOVLW  01
00A2:  MOVWF  77
00A3:  MOVF   26,W
00A4:  MOVWF  78
00A5:  BTFSC  03.2
00A6:  GOTO   0AB
00A7:  BCF    03.0
00A8:  RLF    77,F
00A9:  DECFSZ 78,F
00AA:  GOTO   0A7
00AB:  MOVF   77,W
00AC:  IORWF  00,F
....................             }  
....................             if(comando == 4){ 
00AD:  MOVF   24,W
00AE:  SUBLW  04
00AF:  BTFSS  03.2
00B0:  GOTO   0D3
....................                if(i == 2) 
00B1:  MOVF   25,W
00B2:  SUBLW  02
00B3:  BTFSS  03.2
00B4:  GOTO   0C2
....................                   bit_set(mat[0], x); 
00B5:  MOVLW  01
00B6:  MOVWF  77
00B7:  MOVF   26,W
00B8:  MOVWF  78
00B9:  BTFSC  03.2
00BA:  GOTO   0BF
00BB:  BCF    03.0
00BC:  RLF    77,F
00BD:  DECFSZ 78,F
00BE:  GOTO   0BB
00BF:  MOVF   77,W
00C0:  IORWF  20,F
....................                else 
00C1:  GOTO   0D3
....................                   bit_set(mat[i+1], x); 
00C2:  MOVLW  01
00C3:  ADDWF  25,W
00C4:  ADDLW  20
00C5:  MOVWF  04
00C6:  BCF    03.7
00C7:  MOVLW  01
00C8:  MOVWF  77
00C9:  MOVF   26,W
00CA:  MOVWF  78
00CB:  BTFSC  03.2
00CC:  GOTO   0D1
00CD:  BCF    03.0
00CE:  RLF    77,F
00CF:  DECFSZ 78,F
00D0:  GOTO   0CD
00D1:  MOVF   77,W
00D2:  IORWF  00,F
....................             }  
....................          } 
....................       }          
00D3:  INCF   26,F
00D4:  GOTO   021
00D5:  INCF   25,F
00D6:  GOTO   01B
....................    delay_ms(120);       
00D7:  MOVLW  78
00D8:  MOVWF  28
00D9:  CALL   004
.................... } 
00DA:  RETLW  00
....................  
.................... void main() 
.................... {   
00DB:  CLRF   04
00DC:  BCF    03.7
00DD:  MOVLW  1F
00DE:  ANDWF  03,F
00DF:  MOVLW  07
00E0:  MOVWF  1F
....................    int var; 
....................    while(true){ 
....................       for(var = 0; var < 3; var++){ 
*
00E7:  CLRF   23
00E8:  MOVF   23,W
00E9:  SUBLW  02
00EA:  BTFSS  03.0
00EB:  GOTO   0FC
....................          output_b(mat[var]); 
00EC:  MOVLW  20
00ED:  ADDWF  23,W
00EE:  MOVWF  04
00EF:  BCF    03.7
00F0:  MOVF   00,W
00F1:  MOVWF  24
00F2:  BSF    03.5
00F3:  CLRF   06
00F4:  BCF    03.5
00F5:  MOVF   24,W
00F6:  MOVWF  06
....................          delay_ms(8); 
00F7:  MOVLW  08
00F8:  MOVWF  28
00F9:  CALL   004
....................       } 
00FA:  INCF   23,F
00FB:  GOTO   0E8
....................       if(!input(pin_A0)){ 
00FC:  BSF    03.5
00FD:  BSF    05.0
00FE:  BCF    03.5
00FF:  BTFSC  05.0
0100:  GOTO   104
....................          mover(2); 
0101:  MOVLW  02
0102:  MOVWF  24
0103:  CALL   019
....................       } 
....................       if(!input(pin_A1)){ 
0104:  BSF    03.5
0105:  BSF    05.1
0106:  BCF    03.5
0107:  BTFSC  05.1
0108:  GOTO   10C
....................          mover(1); 
0109:  MOVLW  01
010A:  MOVWF  24
010B:  CALL   019
....................       }       
....................       if(!input(pin_A2)){ 
010C:  BSF    03.5
010D:  BSF    05.2
010E:  BCF    03.5
010F:  BTFSC  05.2
0110:  GOTO   114
....................          mover(3); 
0111:  MOVLW  03
0112:  MOVWF  24
0113:  CALL   019
....................       }       
....................       if(!input(pin_A3)){ 
0114:  BSF    03.5
0115:  BSF    05.3
0116:  BCF    03.5
0117:  BTFSC  05.3
0118:  GOTO   11C
....................          mover(4); 
0119:  MOVLW  04
011A:  MOVWF  24
011B:  CALL   019
....................       }             
....................    } 
011C:  GOTO   0E7
.................... } 
011D:  SLEEP

Configuration Fuses:
   Word  1: 3F61   XT NOWDT PUT NOPROTECT BROWNOUT MCLR NOLVP NOCPD
