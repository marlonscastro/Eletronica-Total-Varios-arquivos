CCS PCM C Compiler, Version 4.114, 93505388               20-jul-12 22:20

               Filename: E:\SkyDrive\Eletronica\PROJETOS PIC CCS\16F628A_SERIAL\index.lst

               ROM used: 287 words (14%)
                         Largest free fragment is 1761
               RAM used: 93 (42%) at main() level
                         95 (42%) worst case
               Stack:    1 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   075
0003:  NOP
.................... #include <16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
.................... #list 
....................  
.................... #use delay(clock=4000000) 
.................... #FUSES NOWDT, NOBROWNOUT, PUT, XT    
....................  
.................... #use rs232(baud=9600, parity=N, xmit=PIN_A2, rcv=PIN_A3, STREAM=gprs)   // GPRS 
*
0046:  BSF    03.5
0047:  BCF    05.2
0048:  BCF    03.5
0049:  BCF    05.2
004A:  MOVLW  08
004B:  MOVWF  78
004C:  GOTO   04D
004D:  NOP
004E:  BSF    78.7
004F:  GOTO   05E
0050:  BCF    78.7
0051:  RRF    7D,F
0052:  BTFSC  03.0
0053:  BSF    05.2
0054:  BTFSS  03.0
0055:  BCF    05.2
0056:  BSF    78.6
0057:  GOTO   05E
0058:  BCF    78.6
0059:  DECFSZ 78,F
005A:  GOTO   051
005B:  GOTO   05C
005C:  NOP
005D:  BSF    05.2
005E:  MOVLW  1C
005F:  MOVWF  04
0060:  DECFSZ 04,F
0061:  GOTO   060
0062:  GOTO   063
0063:  BTFSC  78.7
0064:  GOTO   050
0065:  BTFSC  78.6
0066:  GOTO   058
0067:  RETURN
.................... #use rs232(baud=9600, parity=N, xmit=PIN_A0, rcv=PIN_A1, STREAM=serial)   // Ecoar na Serial 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
*
0085:  CLRF   20
0086:  CLRF   21
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... char *retNum(char *str, char* strret){ 
....................    int i = 0, j = 0, cont = 0; 
....................    if (strlen(str) > 20){ 
....................       while(i < strlen(str)){ 
....................          if(cont == 1){ 
....................             strret[j] = str[i]; 
....................             j++; 
....................          } 
....................          if (str[i] == '\"' ){ 
....................             cont++; 
....................             if(cont == 2){ 
....................                fputs("ATH\r", gprs);             
....................                strret[j-1] = '\0'; 
....................                break; 
....................             } 
....................          } 
....................          i++; 
....................       } 
....................       return strret; 
....................    } 
.................... } 
....................  
.................... void main(){ 
*
0075:  CLRF   04
0076:  BCF    03.7
0077:  MOVLW  1F
0078:  ANDWF  03,F
0079:  BSF    03.5
007A:  BCF    05.2
007B:  BCF    03.5
007C:  BSF    05.2
007D:  BSF    03.5
007E:  BCF    05.0
007F:  BCF    03.5
0080:  BSF    05.0
0081:  CLRF   23
0082:  CLRF   22
0083:  MOVLW  07
0084:  MOVWF  1F
....................    char temp[12]; 
....................    char chr[35]; 
....................    //char vet[] = "\r\nRING\r\n+CLIP: \"85851611\",161,\"\",,\"\",0\r\n"; 
....................    char vet[35];    
....................    while(true){ 
....................       /* 
....................       delay_ms(2000); 
....................       fprintf(serial, "%s", vet); 
....................       fprintf(serial, "Numero: %s ", retNum(vet, temp)); 
....................       */ 
....................       /*fgets(vet,gprs); 
....................       if ((strlen(vet) > 30)){ 
....................          fputs(retNum(vet, temp), serial); 
....................          break; 
....................       }*/  
....................       fputs("ATH\r", gprs);         
*
0087:  CLRF   7B
0088:  MOVF   7B,W
0089:  CALL   004
008A:  IORLW  00
008B:  BTFSC  03.2
008C:  GOTO   091
008D:  INCF   7B,F
008E:  MOVWF  7D
008F:  CALL   046
0090:  GOTO   088
0091:  MOVLW  0D
0092:  MOVWF  7D
0093:  CALL   046
0094:  MOVLW  0A
0095:  MOVWF  7D
0096:  CALL   046
....................    } 
0097:  GOTO   087
....................    //sprintf(chr, "AT+CMGS=\"%s\"\r", retNum(vet, temp));       
....................    sprintf(chr, "AT+CMGS=\"%s\"\r", temp);                   
0098:  CLRF   23
0099:  MOVLW  30
009A:  MOVWF  22
009B:  CLRF   7B
009C:  MOVF   7B,W
009D:  CALL   00D
009E:  INCF   7B,F
009F:  MOVWF  77
00A0:  MOVWF  7D
00A1:  CALL   068
00A2:  MOVLW  09
00A3:  SUBWF  7B,W
00A4:  BTFSS  03.2
00A5:  GOTO   09C
00A6:  MOVLW  24
00A7:  MOVWF  04
00A8:  BCF    03.7
00A9:  MOVLW  00
00AA:  IORWF  00,W
00AB:  BTFSC  03.2
00AC:  GOTO   0BD
00AD:  CLRF   7C
00AE:  MOVF   04,W
00AF:  MOVWF  7B
00B0:  BCF    7C.0
00B1:  BTFSC  03.7
00B2:  BSF    7C.0
00B3:  MOVF   00,W
00B4:  MOVWF  7D
00B5:  CALL   068
00B6:  MOVF   7B,W
00B7:  MOVWF  04
00B8:  BCF    03.7
00B9:  BTFSC  7C.0
00BA:  BSF    03.7
00BB:  INCF   04,F
00BC:  GOTO   0A9
00BD:  MOVLW  22
00BE:  MOVWF  7D
00BF:  CALL   068
00C0:  MOVLW  0D
00C1:  MOVWF  7D
00C2:  CALL   068
....................        fputs("AT+CMGF=1\r", gprs); 
00C3:  CLRF   7B
00C4:  MOVF   7B,W
00C5:  CALL   01F
00C6:  IORLW  00
00C7:  BTFSC  03.2
00C8:  GOTO   0CD
00C9:  INCF   7B,F
00CA:  MOVWF  7D
00CB:  CALL   046
00CC:  GOTO   0C4
00CD:  MOVLW  0D
00CE:  MOVWF  7D
00CF:  CALL   046
00D0:  MOVLW  0A
00D1:  MOVWF  7D
00D2:  CALL   046
....................          fputs(chr, gprs); 
00D3:  MOVLW  30
00D4:  MOVWF  04
00D5:  BCF    03.7
00D6:  MOVLW  00
00D7:  IORWF  00,W
00D8:  BTFSC  03.2
00D9:  GOTO   0EA
00DA:  CLRF   7C
00DB:  MOVF   04,W
00DC:  MOVWF  7B
00DD:  BCF    7C.0
00DE:  BTFSC  03.7
00DF:  BSF    7C.0
00E0:  MOVF   00,W
00E1:  MOVWF  7D
00E2:  CALL   046
00E3:  MOVF   7B,W
00E4:  MOVWF  04
00E5:  BCF    03.7
00E6:  BTFSC  7C.0
00E7:  BSF    03.7
00E8:  INCF   04,F
00E9:  GOTO   0D6
00EA:  MOVLW  0D
00EB:  MOVWF  7D
00EC:  CALL   046
00ED:  MOVLW  0A
00EE:  MOVWF  7D
00EF:  CALL   046
....................          sprintf(chr, "Teste de mensagem%c", 0x1a); 
00F0:  CLRF   23
00F1:  MOVLW  30
00F2:  MOVWF  22
00F3:  CLRF   7B
00F4:  MOVF   7B,W
00F5:  CALL   02E
00F6:  INCF   7B,F
00F7:  MOVWF  77
00F8:  MOVWF  7D
00F9:  CALL   068
00FA:  MOVLW  11
00FB:  SUBWF  7B,W
00FC:  BTFSS  03.2
00FD:  GOTO   0F4
00FE:  MOVLW  1A
00FF:  MOVWF  7D
0100:  CALL   068
....................          fputs(chr, gprs); 
0101:  MOVLW  30
0102:  MOVWF  04
0103:  BCF    03.7
0104:  MOVLW  00
0105:  IORWF  00,W
0106:  BTFSC  03.2
0107:  GOTO   118
0108:  CLRF   7C
0109:  MOVF   04,W
010A:  MOVWF  7B
010B:  BCF    7C.0
010C:  BTFSC  03.7
010D:  BSF    7C.0
010E:  MOVF   00,W
010F:  MOVWF  7D
0110:  CALL   046
0111:  MOVF   7B,W
0112:  MOVWF  04
0113:  BCF    03.7
0114:  BTFSC  7C.0
0115:  BSF    03.7
0116:  INCF   04,F
0117:  GOTO   104
0118:  MOVLW  0D
0119:  MOVWF  7D
011A:  CALL   046
011B:  MOVLW  0A
011C:  MOVWF  7D
011D:  CALL   046
....................           
....................  
....................   // fputs(temp, serial); 
....................    /*char chr[35]; 
....................   
....................    delay_ms(3000); 
....................    fputs("AT+CMGF=1\r", gprs); 
....................    delay_ms(1000); 
....................    fputs("AT+CMGS=\"8185851611\"\r", gprs); 
....................    delay_ms(2000); 
....................    sprintf(chr, "Lt:08 00.8226S\r\nLg:034 54.5643W%c", 0x1a); 
....................    fputs(chr, gprs);    
....................     
....................    while(true){ 
....................       fgets(chr,gprs); 
....................       fputs(chr, serial); 
....................    }*/ 
.................... } 
....................  
.................... /* 
....................  
....................  
.................... #fuses HS,NOWDT,NOPROTECT 
.................... #include <16f628A.H> 
.................... #include <string.h> 
.................... #use delay(clock=4000000) 
.................... #use rs232(baud=9600, xmit=PIN_B2, rcv=PIN_B1) 
....................  
.................... #int_rda 
.................... trata(void){ 
....................    output_low(pin_b0); 
.................... } 
....................  
.................... void main(){ 
....................    enable_interrupts(INT_RDA); 
....................    enable_interrupts(GLOBAL); 
....................    printf("Isso funciona\n\r"); 
....................    output_high(pin_b0); 
....................    while(True){ 
....................       output_high(pin_b5); 
....................       delay_ms(500); 
....................       output_low(pin_b5); 
....................       delay_ms(500); 
....................    } 
.................... } */ 
011E:  SLEEP

Configuration Fuses:
   Word  1: 3F21   NOWDT PUT XT MCLR NOBROWNOUT NOLVP NOCPD NOPROTECT
