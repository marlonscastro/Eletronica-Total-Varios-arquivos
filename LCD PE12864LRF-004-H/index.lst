CCS PCM C Compiler, Version 4.114, 93460303               25-out-12 11:50

               Filename: D:\SkyDrive\Eletronica\PROJETOS PIC CCS\16F628A LCD PE12864LRF-004-H\index.lst

               ROM used: 909 words (44%)
                         Largest free fragment is 1139
               RAM used: 9 (4%) at main() level
                         21 (9%) worst case
               Stack:    5 locations

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   376
0003:  NOP
.................... #include <16f628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
.................... #list 
....................  
.................... #use delay(clock=4000000) 
*
0289:  MOVLW  23
028A:  MOVWF  04
028B:  BCF    03.7
028C:  MOVF   00,W
028D:  BTFSC  03.2
028E:  GOTO   29D
028F:  MOVLW  01
0290:  MOVWF  78
0291:  CLRF   77
0292:  DECFSZ 77,F
0293:  GOTO   292
0294:  DECFSZ 78,F
0295:  GOTO   291
0296:  MOVLW  4A
0297:  MOVWF  77
0298:  DECFSZ 77,F
0299:  GOTO   298
029A:  GOTO   29B
029B:  DECFSZ 00,F
029C:  GOTO   28F
.................... #FUSES NOWDT, NOBROWNOUT, PUT, XT   
.................... #include "DriverPE12864LRF.c" 
.................... // Driver teste para o LCD 128x64 (PowerTip PE12864LRF-004-H/* 
.................... const BYTE TEXT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE  01 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x00, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x00, // / 
....................                          0x3E, 0x51, 0x49, 0x3e, 0x00, // 0      17 
....................                          0x04, 0x02, 0x7F, 0x00, 0x00, // 1 
....................                          0x00, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x00, 0x41, 0x49, 0x49, 0x36, // 3      20 
....................                          0x18, 0x14, 0x12, 0x7F, 0x00, // 4 
....................                          0x00, 0x27, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x32, 0x00, // 6      23 
....................                          0x00, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x36, 0x00, // 8 
....................                          0x26, 0x49, 0x49, 0x3e, 0x00, // 9      26 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x00, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x7e, 0x00, // A      34 
....................                          0x7F, 0x49, 0x49, 0x36, 0x00, // B 
....................                          0x3E, 0x41, 0x41, 0x22, 0x00, // C 
....................                          0x7F, 0x41, 0x41, 0x3e, 0x00, // D      37 
....................                          0x7F, 0x49, 0x49, 0x41, 0x00, // E 
....................                          0x7F, 0x09, 0x09, 0x01, 0x00, // F 
....................                          0x3E, 0x41, 0x49, 0x3a, 0x00, // G      40 
....................                          0x7F, 0x08, 0x08, 0x7f, 0x00, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x3f, 0x00, // J      43 
....................                          0x7F, 0x08, 0x14, 0x63, 0x00, // K 
....................                          0x7F, 0x40, 0x40, 0x00, 0x00, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M      46 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x3e, 0x00, // O 
....................                          0x7F, 0x09, 0x09, 0x06, 0x00, // P      49 
....................                          0x1E, 0x21, 0x21, 0x5e, 0x00, // Q 
....................                          0x7F, 0x09, 0x09, 0x76, 0x00};// R      51 
....................  
.................... const BYTE TEXT2[44][5]={0x26, 0x49, 0x49, 0x32, 0x00, // S 
....................                          0x00, 0x01, 0x7F, 0x01, 0x00, // T 
....................                          0x3F, 0x40, 0x40, 0x3f, 0x00, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x47, 0x00, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x00, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          //0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x38, 0x44, 0x44, 0x7c, 0x00,  // a  
....................                          0x7F, 0x44, 0x44, 0x38, 0x00, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x00, // c 
....................                          0x38, 0x44, 0x44, 0x7f, 0x00, // d 
....................                          0x38, 0x54, 0x54, 0x18, 0x00, // e 
....................                          0x00, 0x04, 0x7E, 0x05, 0x00, // f 
....................                          0x08, 0x54, 0x54, 0x3c, 0x00, // g 
....................                          0x7F, 0x08, 0x04, 0x78, 0x00, // h 
....................                          0x00, 0x00, 0x7a, 0x00, 0x00, // i 
....................                          0x20, 0x00, 0x44, 0x3D, 0x00, // j 
....................                          0x7e, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x04, 0x04, 0x78, 0x00, // n 
....................                          0x38, 0x44, 0x44, 0x38, 0x00, // o 
....................                          0x7C, 0x14, 0x14, 0x08, 0x00, // p 
....................                          0x08, 0x14, 0x14, 0x7c, 0x00, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x00, // r 
....................                          0x08, 0x54, 0x54, 0x20, 0x00, // s 
....................                          0x00, 0x04, 0x3F, 0x44, 0x00, // t 
....................                          0x00, 0x3c, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x3c, 0x00, // y 
....................                          0x00, 0x64, 0x54, 0x4C, 0x00, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
....................  
....................  
.................... #define PE12864_A0    pin_A0 
.................... #define PE12864_RES   pin_A1 
.................... #define PE12864_CS1   pin_B7 
.................... #define PE12864_CLK   pin_B6 
.................... #define PE12864_DATA  pin_B5 
....................  
.................... #define ON   1 
.................... #define OFF  0 
....................  
.................... int8 CurrentLine = 0; 
.................... int8 QuantChrLine = 0; 
.................... int8 OffsetX = 0; 
....................  
.................... void    PE12864_InitLcd(void); 
.................... void    PE12864_Write_command(char byte_command); 
.................... void    PE12864_Write_data(char byte_data); 
.................... void    PE12864_Gotoxy(int8 x, int y); 
.................... void    PE12864_Printchar(char cvar); 
.................... void    PE12864_PutPixel(int8 x,int8 y, int1 COLOR); 
.................... void    PE12864_SerialOut(char byteDC); 
.................... void    clear_screen(void); 
.................... void    newLine(void); 
.................... void    PE12864_circle(int x, int y, int radius, int1 fill, int1 COLOR); 
.................... void    PE12864_line(int x1, int y1, int x2, int y2, int1 COLOR); 
.................... //void    linexy(int8 x1,int8 y1,int8 x2,int8 y2, int1 COLOR); 
....................  
.................... void    PE12864_InitLcd(void){ 
....................     
....................    output_low(PE12864_CS1); // Chip Enabled 
*
027F:  BSF    03.5
0280:  BCF    06.7
0281:  BCF    03.5
0282:  BCF    06.7
....................    output_low(PE12864_RES); 
0283:  BSF    03.5
0284:  BCF    05.1
0285:  BCF    03.5
0286:  BCF    05.1
....................    delay_ms(5); 
0287:  MOVLW  05
0288:  MOVWF  23
....................    output_high(PE12864_RES);    
*
029D:  BSF    03.5
029E:  BCF    05.1
029F:  BCF    03.5
02A0:  BSF    05.1
....................  
....................    // LCD BIAS SET 
....................    //- PAG 45 - 1010001-BIT    0: 1/9 ou 1: 1/7 ST7565S 
....................    PE12864_Write_command(0xa2); 
02A1:  MOVLW  A2
02A2:  MOVWF  2C
02A3:  CALL   226
....................    //1010011-BIT  Display Fill  0: Normal  1: Reverse 
....................    PE12864_Write_command(0xa6); // Normal 
02A4:  MOVLW  A6
02A5:  MOVWF  2C
02A6:  CALL   226
....................    // Commom Output mode Select 
....................    //- PAG 46 -  1100-BIT      0: Normal Direction    1: Reverse Direction    (Ex: 11000*** - Normal Direction) 
....................    PE12864_Write_command(0xc8); 
02A7:  MOVLW  C8
02A8:  MOVWF  2C
02A9:  CALL   226
....................    // LCD ADC Select 0:normal  1: Reverse 
....................    PE12864_Write_command(0xa0);    
02AA:  MOVLW  A0
02AB:  MOVWF  2C
02AC:  CALL   226
....................    // CMD Set Start Line  
....................    PE12864_Write_command(0x40);    
02AD:  MOVLW  40
02AE:  MOVWF  2C
02AF:  CALL   226
....................     
....................    PE12864_Write_command(0x28 | 0x4);  
02B0:  MOVLW  2C
02B1:  MOVWF  2C
02B2:  CALL   226
....................    PE12864_Write_command(0x28 | 0x6);     
02B3:  MOVLW  2E
02B4:  MOVWF  2C
02B5:  CALL   226
....................    PE12864_Write_command(0x28 | 0x7);     
02B6:  MOVLW  2F
02B7:  MOVWF  2C
02B8:  CALL   226
....................    delay_us(5);    
02B9:  GOTO   2BA
02BA:  GOTO   2BB
02BB:  NOP
....................    PE12864_Write_command(0x20 | 0x6);  // resistor Ratio 
02BC:  MOVLW  26
02BD:  MOVWF  2C
02BE:  CALL   226
....................    clear_screen(); 
....................    PE12864_Write_command(0xaf); // Display ON 
*
02D7:  MOVLW  AF
02D8:  MOVWF  2C
02D9:  CALL   226
....................    PE12864_Write_command(0xa4); // all points Normal 
02DA:  MOVLW  A4
02DB:  MOVWF  2C
02DC:  CALL   226
....................  
....................    //Set Brightness   
....................    PE12864_Write_command(0x81);  
02DD:  MOVLW  81
02DE:  MOVWF  2C
02DF:  CALL   226
....................    PE12864_Write_command(0x1a); 
02E0:  MOVLW  1A
02E1:  MOVWF  2C
02E2:  CALL   226
.................... } 
02E3:  GOTO   380 (RETURN)
....................  
.................... void PE12864_SerialOut(char byteDC){ 
....................   int i; 
....................   output_low(PE12864_CS1);   
*
01FF:  BSF    03.5
0200:  BCF    06.7
0201:  BCF    03.5
0202:  BCF    06.7
....................   for (i=8; i>0; i--) { 
0203:  MOVLW  08
0204:  MOVWF  2E
0205:  MOVF   2E,F
0206:  BTFSC  03.2
0207:  GOTO   221
....................     output_low(PE12864_CLK); 
0208:  BSF    03.5
0209:  BCF    06.6
020A:  BCF    03.5
020B:  BCF    06.6
....................     if ((byteDC&0x80)==0) 
020C:  MOVF   2D,W
020D:  ANDLW  80
020E:  BTFSS  03.2
020F:  GOTO   215
....................       output_low(PE12864_DATA); 
0210:  BSF    03.5
0211:  BCF    06.5
0212:  BCF    03.5
0213:  BCF    06.5
....................     else 
0214:  GOTO   219
....................       output_high(PE12864_DATA); 
0215:  BSF    03.5
0216:  BCF    06.5
0217:  BCF    03.5
0218:  BSF    06.5
....................     output_high(PE12864_CLK); 
0219:  BSF    03.5
021A:  BCF    06.6
021B:  BCF    03.5
021C:  BSF    06.6
....................     byteDC<<=0x01; 
021D:  BCF    03.0
021E:  RLF    2D,F
....................   } 
021F:  DECF   2E,F
0220:  GOTO   205
....................   output_high(PE12864_CS1); 
0221:  BSF    03.5
0222:  BCF    06.7
0223:  BCF    03.5
0224:  BSF    06.7
.................... } 
0225:  RETURN
.................... void    PE12864_Write_command(char byte_command){ 
....................   output_low(PE12864_A0);          // Write Command Enabled 
0226:  BSF    03.5
0227:  BCF    05.0
0228:  BCF    03.5
0229:  BCF    05.0
....................   PE12864_SerialOut(byte_command); 
022A:  MOVF   2C,W
022B:  MOVWF  2D
022C:  CALL   1FF
.................... } 
022D:  RETURN
.................... void    PE12864_Write_data(char byte_data){ 
....................   output_high(PE12864_A0);         // Write data Enabled 
*
0271:  BSF    03.5
0272:  BCF    05.0
0273:  BCF    03.5
0274:  BSF    05.0
....................   PE12864_SerialOut(byte_data); 
0275:  MOVF   27,W
0276:  MOVWF  2D
0277:  CALL   1FF
....................   //Buffer[OffsetX][CurrentLine] = byte_data;   
....................   OffsetX++; 
0278:  INCF   22,F
....................   PE12864_Gotoxy(OffsetX,CurrentLine); 
0279:  MOVF   22,W
027A:  MOVWF  28
027B:  MOVF   20,W
027C:  MOVWF  29
027D:  CALL   243
.................... } 
027E:  RETURN
.................... void newLine(){ 
....................   if(CurrentLine < 7){  // New Line Command 
*
030D:  MOVF   20,W
030E:  SUBLW  06
030F:  BTFSS  03.0
0310:  GOTO   31E
....................       PE12864_Write_command((CurrentLine+1)|0xb0);  // Set Page Address to 0 (0 a 7) 
0311:  MOVLW  01
0312:  ADDWF  20,W
0313:  IORLW  B0
0314:  MOVWF  26
0315:  MOVWF  2C
0316:  CALL   226
....................       PE12864_Write_command(0x00);  // Set LSB for index Column 
0317:  CLRF   2C
0318:  CALL   226
....................       PE12864_Write_command(0x10);  // Set MSB for index Column    
0319:  MOVLW  10
031A:  MOVWF  2C
031B:  CALL   226
....................       CurrentLine+=1; 
031C:  MOVLW  01
031D:  ADDWF  20,F
....................   } 
....................   QuantChrLine = 1; 
031E:  MOVLW  01
031F:  MOVWF  21
....................   OffsetX = 0; 
0320:  CLRF   22
.................... } 
.................... void clear_screen(void) { 
....................    int p, c; 
....................    for(p = 0; p < 8; p++) { 
*
02BF:  CLRF   23
02C0:  MOVF   23,W
02C1:  SUBLW  07
02C2:  BTFSS  03.0
02C3:  GOTO   2D4
....................       for(c = 0; c < 128; c++) { 
02C4:  CLRF   24
02C5:  MOVF   24,W
02C6:  SUBLW  7F
02C7:  BTFSS  03.0
02C8:  GOTO   2D2
....................          PE12864_Gotoxy(c,p); 
02C9:  MOVF   24,W
02CA:  MOVWF  28
02CB:  MOVF   23,W
02CC:  MOVWF  29
02CD:  CALL   243
....................          PE12864_Write_data(0x00); 
02CE:  CLRF   27
02CF:  CALL   271
....................          //Buffer[c][p] = 0x00;         
....................       } 
02D0:  INCF   24,F
02D1:  GOTO   2C5
....................    } 
02D2:  INCF   23,F
02D3:  GOTO   2C0
....................    PE12864_Gotoxy(0,0);    
02D4:  CLRF   28
02D5:  CLRF   29
02D6:  CALL   243
.................... } 
.................... void    PE12864_Gotoxy(int x, int y){ 
*
0243:  CLRF   2A
....................    int8 OffsetChr = 0; 
....................     
....................    PE12864_Write_command(0xb0 | y); 
0244:  MOVF   29,W
0245:  IORLW  B0
0246:  MOVWF  2B
0247:  MOVWF  2C
0248:  CALL   226
....................    PE12864_Write_command((0x00 | x) & 0x0f); 
0249:  MOVF   28,W
024A:  ANDLW  0F
024B:  MOVWF  2B
024C:  MOVWF  2C
024D:  CALL   226
....................    PE12864_Write_command(0x10|(x>>4)); 
024E:  SWAPF  28,W
024F:  MOVWF  77
0250:  MOVLW  0F
0251:  ANDWF  77,F
0252:  MOVF   77,W
0253:  IORLW  10
0254:  MOVWF  2B
0255:  MOVWF  2C
0256:  CALL   226
....................     
....................    OffsetChr = (x+1)/6; 
0257:  MOVLW  01
0258:  ADDWF  28,W
0259:  MOVWF  2C
025A:  MOVWF  2D
025B:  MOVLW  06
025C:  MOVWF  2E
025D:  CALL   22E
025E:  MOVF   78,W
025F:  MOVWF  2A
....................    if((x+1)%6) 
0260:  MOVLW  01
0261:  ADDWF  28,W
0262:  MOVWF  2C
0263:  MOVWF  2D
0264:  MOVLW  06
0265:  MOVWF  2E
0266:  CALL   22E
0267:  MOVF   77,W
0268:  BTFSS  03.2
....................       OffsetChr++;    
0269:  INCF   2A,F
....................    CurrentLine = y; 
026A:  MOVF   29,W
026B:  MOVWF  20
....................    QuantChrLine = OffsetChr; 
026C:  MOVF   2A,W
026D:  MOVWF  21
....................    OffsetX = x; 
026E:  MOVF   28,W
026F:  MOVWF  22
.................... } 
0270:  RETURN
.................... void    PE12864_Printchar(char cvar){ 
....................    int i; 
....................    if (QuantChrLine > 21)   
*
0309:  MOVF   21,W
030A:  SUBLW  15
030B:  BTFSC  03.0
030C:  GOTO   322
....................        newLine();  
....................    else 
*
0321:  GOTO   323
....................        QuantChrLine++;     
0322:  INCF   21,F
....................    if(cvar == 0x20) 
0323:  MOVF   24,W
0324:  SUBLW  20
0325:  BTFSS  03.2
0326:  GOTO   331
....................       for(i=0;i<2;i++) 
0327:  CLRF   25
0328:  MOVF   25,W
0329:  SUBLW  01
032A:  BTFSS  03.0
032B:  GOTO   330
....................          PE12864_Write_data(0x00); 
032C:  CLRF   27
032D:  CALL   271
032E:  INCF   25,F
032F:  GOTO   328
....................    else{ 
0330:  GOTO   373
....................       for(i=0;i<5;i++){ 
0331:  CLRF   25
0332:  MOVF   25,W
0333:  SUBLW  04
0334:  BTFSS  03.0
0335:  GOTO   373
....................          if (cvar < 0x53){ 
0336:  MOVF   24,W
0337:  SUBLW  52
0338:  BTFSS  03.0
0339:  GOTO   356
....................             if(TEXT[cvar-0x20][i])          
033A:  MOVLW  20
033B:  SUBWF  24,W
033C:  MOVWF  27
033D:  MOVWF  28
033E:  MOVLW  05
033F:  MOVWF  29
0340:  CALL   2E4
0341:  MOVF   25,W
0342:  ADDWF  78,W
0343:  CALL   004
0344:  MOVWF  78
0345:  MOVF   78,F
0346:  BTFSC  03.2
0347:  GOTO   355
....................                PE12864_Write_data(TEXT[cvar-0x20][i]);       
0348:  MOVLW  20
0349:  SUBWF  24,W
034A:  MOVWF  27
034B:  MOVWF  28
034C:  MOVLW  05
034D:  MOVWF  29
034E:  CALL   2E4
034F:  MOVF   25,W
0350:  ADDWF  78,W
0351:  CALL   004
0352:  MOVWF  26
0353:  MOVWF  27
0354:  CALL   271
....................          } 
....................          else { 
0355:  GOTO   371
....................             if(TEXT2[cvar-0x53][i])                
0356:  MOVLW  53
0357:  SUBWF  24,W
0358:  MOVWF  27
0359:  MOVWF  28
035A:  MOVLW  05
035B:  MOVWF  29
035C:  CALL   2E4
035D:  MOVF   25,W
035E:  ADDWF  78,W
035F:  CALL   10A
0360:  MOVWF  78
0361:  MOVF   78,F
0362:  BTFSC  03.2
0363:  GOTO   371
....................                PE12864_Write_data(TEXT2[cvar-0x53][i]);                
0364:  MOVLW  53
0365:  SUBWF  24,W
0366:  MOVWF  27
0367:  MOVWF  28
0368:  MOVLW  05
0369:  MOVWF  29
036A:  CALL   2E4
036B:  MOVF   25,W
036C:  ADDWF  78,W
036D:  CALL   10A
036E:  MOVWF  26
036F:  MOVWF  27
0370:  CALL   271
....................          } 
....................       } 
0371:  INCF   25,F
0372:  GOTO   332
....................    } 
....................    PE12864_Write_data(0x00); 
0373:  CLRF   27
0374:  CALL   271
.................... } 
0375:  GOTO   387 (RETURN)
....................  
....................  
.................... void PE12864_PutPixel(int x, int y, int1 COLOR){ 
....................    byte BytePlot, tempByte; 
....................    if((x > 127)||(y > 63)) 
....................       return; 
....................    BytePlot = 0; 
....................    BytePlot |= 1; 
....................    PE12864_Gotoxy(x,(y/8)); 
....................    BytePlot<<=(y%8); 
....................    tempByte = BytePlot;    
....................    //BytePlot|=Buffer[x][y/8];       
....................    if(COLOR == OFF) 
....................       BytePlot-=tempByte; 
....................    PE12864_Write_data(BytePlot); 
....................     
....................    /*   if(COLOR == ON) 
....................       BytePlot|=Buffer[x][y/8];       
....................    else{ 
....................       tempByte = BytePlot; 
....................       BytePlot|=Buffer[x][y/8];        
....................       BytePlot-=tempByte; 
....................       //BytePlot = ((BytePlot | Buffer[x][y/8]) - BytePlot);  
....................    }*/ 
.................... } 
....................  
.................... void PE12864_circle(int x, int y, int radius, int1 fill, int1 COLOR){ 
....................    signed int a, b, P; 
....................    a = 0; 
....................    b = radius; 
....................    P = 1 - radius; 
....................    do{ 
....................       if(fill){ 
....................          PE12864_line(x-a, y+b, x+a, y+b, color); 
....................          PE12864_line(x-a, y-b, x+a, y-b, color); 
....................          PE12864_line(x-b, y+a, x+b, y+a, color); 
....................          PE12864_line(x-b, y-a, x+b, y-a, color); 
....................       } 
....................       else{ 
....................          PE12864_PutPixel(a+x, b+y, color); 
....................          PE12864_PutPixel(b+x, a+y, color); 
....................          PE12864_PutPixel(x-a, b+y, color); 
....................          PE12864_PutPixel(x-b, a+y, color); 
....................          PE12864_PutPixel(b+x, y-a, color); 
....................          PE12864_PutPixel(a+x, y-b, color); 
....................          PE12864_PutPixel(x-a, y-b, color); 
....................          PE12864_PutPixel(x-b, y-a, color); 
....................       } 
....................       if(P < 0) 
....................          P+= 3 + 2*a++; 
....................       else 
....................          P+= 5 + 2*(a++ - b--); 
....................     } while(a <= b); 
.................... } 
....................  
.................... void PE12864_line(int x1, int y1, int x2, int y2, int1 COLOR){ 
....................    signed int  x, y, addx, addy, dx, dy; 
....................    signed long P; 
....................    int i; 
....................    dx = abs((signed int)(x2 - x1)); 
....................    dy = abs((signed int)(y2 - y1)); 
....................    x = x1; 
....................    y = y1; 
....................  
....................    if(x1 > x2) 
....................       addx = -1; 
....................    else 
....................       addx = 1; 
....................    if(y1 > y2) 
....................       addy = -1; 
....................    else 
....................       addy = 1; 
....................    if(dx >= dy){ 
....................       P = 2*dy - dx; 
....................       for(i=0; i<=dx; ++i){ 
....................          PE12864_PutPixel(x, y, COLOR); 
....................          if(P < 0){ 
....................             P += 2*dy; 
....................             x += addx; 
....................          } 
....................          else{ 
....................             P += 2*dy - 2*dx; 
....................             x += addx; 
....................             y += addy; 
....................          } 
....................       } 
....................    } 
....................    else{ 
....................       P = 2*dx - dy; 
....................       for(i=0; i<=dy; ++i){ 
....................          PE12864_PutPixel(x, y, COLOR); 
....................  
....................          if(P < 0){ 
....................             P += 2*dx; 
....................             y += addy; 
....................          } 
....................          else{ 
....................             P += 2*dx - 2*dy; 
....................             x += addx; 
....................             y += addy; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... /*void linexy(int8 x1,int8 y1,int8 x2,int8 y2, int1 COLOR){ 
....................    int length_x, length_y, i; 
....................    float divResult; 
....................    length_x = abs((signed int)(x2 - x1)); 
....................    length_y = abs((signed int)(y2 - y1)); 
....................     
....................    if(length_x < length_y){ 
....................       divResult = (float)(length_x / length_y); 
....................       for(i = 0; i < length_y+1;i++) 
....................          PE12864_Putpixel(x1+ceil(divResult*i), y1+i, ON); 
....................    } 
....................    else{ 
....................       divResult = (float)(length_y / length_x); 
....................       for(i = 0; i < length_x+1;i++) 
....................          PE12864_Putpixel(x1+i, y1+ceil(divResult*i), ON); 
....................    }    
.................... } 
.................... */ 
....................  
....................  
.................... void main(void){ 
0376:  CLRF   04
0377:  BCF    03.7
0378:  MOVLW  1F
0379:  ANDWF  03,F
037A:  CLRF   20
037B:  CLRF   21
037C:  CLRF   22
037D:  MOVLW  07
037E:  MOVWF  1F
....................    PE12864_InitLcd(); 
037F:  GOTO   27F
....................    printf(PE12864_Printchar, "Teste LCD 128x64"); 
0380:  CLRF   23
0381:  MOVF   23,W
0382:  CALL   1EA
0383:  INCF   23,F
0384:  MOVWF  77
0385:  MOVWF  24
0386:  GOTO   309
0387:  MOVLW  10
0388:  SUBWF  23,W
0389:  BTFSS  03.2
038A:  GOTO   381
....................    while(true){} 
038B:  GOTO   38B
.................... } 
038C:  SLEEP

Configuration Fuses:
   Word  1: 3F21   NOWDT PUT XT MCLR NOBROWNOUT NOLVP NOCPD NOPROTECT
