CCS PCM C Compiler, Version 4.114, 93480876               22-mai-12 19:28

               Filename: E:\SkyDrive\Eletronica\PROJETOS PIC CCS\Interrupcao SERIAL 16F628A\index.lst

               ROM used: 318 words (16%)
                         Largest free fragment is 1730
               RAM used: 59 (26%) at main() level
                         63 (28%) worst case
               Stack:    3 worst case (1 in main + 2 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0FA
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  27
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  BCF    03.7
0019:  BCF    03.5
001A:  MOVLW  8C
001B:  MOVWF  04
001C:  BTFSS  00.5
001D:  GOTO   020
001E:  BTFSC  0C.5
001F:  GOTO   08A
0020:  BTFSS  0B.5
0021:  GOTO   024
0022:  BTFSC  0B.2
0023:  GOTO   04E
0024:  MOVF   22,W
0025:  MOVWF  04
0026:  MOVF   23,W
0027:  MOVWF  77
0028:  MOVF   24,W
0029:  MOVWF  78
002A:  MOVF   25,W
002B:  MOVWF  79
002C:  MOVF   26,W
002D:  MOVWF  7A
002E:  MOVF   27,W
002F:  MOVWF  0A
0030:  SWAPF  21,W
0031:  MOVWF  03
0032:  SWAPF  7F,F
0033:  SWAPF  7F,W
0034:  RETFIE
.................... #include <16f628a.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
.................... #list 
....................  
.................... #FUSES NOWDT, NOBROWNOUT, PUT, XT    
.................... #use delay(clock=4000000) 
*
00E5:  MOVLW  56
00E6:  MOVWF  04
00E7:  BCF    03.7
00E8:  MOVF   00,W
00E9:  BTFSC  03.2
00EA:  GOTO   0F9
00EB:  MOVLW  01
00EC:  MOVWF  78
00ED:  CLRF   77
00EE:  DECFSZ 77,F
00EF:  GOTO   0EE
00F0:  DECFSZ 78,F
00F1:  GOTO   0ED
00F2:  MOVLW  4A
00F3:  MOVWF  77
00F4:  DECFSZ 77,F
00F5:  GOTO   0F4
00F6:  GOTO   0F7
00F7:  DECFSZ 00,F
00F8:  GOTO   0EB
00F9:  RETURN
....................  
.................... #use rs232(baud=9600, parity=N, xmit=PIN_B2, rcv=PIN_B1, STREAM=gprs)       // GPRS 
....................  
.................... //#use rs232(baud=9600, parity=N, xmit=PIN_B2, rcv=PIN_B1, STREAM=serial)     // Ecoar na Serial 
.................... //#use rs232(baud=9600, parity=N, xmit=PIN_A2, rcv=PIN_A3, STREAM=gprs)       // GPRS 
.................... #use rs232(baud=9600, parity=N, xmit=PIN_A0, rcv=PIN_A1, STREAM=serial)   // Ecoar na Serial 
*
0068:  BSF    03.5
0069:  BCF    05.0
006A:  BCF    03.5
006B:  BCF    05.0
006C:  MOVLW  08
006D:  MOVWF  78
006E:  GOTO   06F
006F:  NOP
0070:  BSF    78.7
0071:  GOTO   080
0072:  BCF    78.7
0073:  RRF    59,F
0074:  BTFSC  03.0
0075:  BSF    05.0
0076:  BTFSS  03.0
0077:  BCF    05.0
0078:  BSF    78.6
0079:  GOTO   080
007A:  BCF    78.6
007B:  DECFSZ 78,F
007C:  GOTO   073
007D:  GOTO   07E
007E:  NOP
007F:  BSF    05.0
0080:  MOVLW  1C
0081:  MOVWF  04
0082:  DECFSZ 04,F
0083:  GOTO   082
0084:  GOTO   085
0085:  BTFSC  78.7
0086:  GOTO   072
0087:  BTFSC  78.6
0088:  GOTO   07A
0089:  RETURN
....................  
.................... char chr[40]; 
.................... int cont = 0; 
.................... int i = 0; 
.................... Boolean OK = false, timeOut = false; 
....................  
.................... #INT_TIMER0 
.................... void TimeOut_Timer(){ 
....................  
....................    static boolean led; 
*
0110:  BCF    52.2
....................    static int16 conta; 
0111:  CLRF   53
0112:  CLRF   54
....................  
....................    /* 
....................    4Mhz / 4       = 1Mhz    
....................    1Mhz / 64      = 15625 Hz (15,6 Khz) 
....................    Periodo        = 0,000064 (64uS) 
....................    0,000064 x 256 = 0,016384 (16,38ms) 
....................    0,016384 x 20  = 0,327 s 
....................    */ 
....................  
....................    conta++; 
*
004E:  INCF   53,F
004F:  BTFSC  03.2
0050:  INCF   54,F
....................    if (conta == 20){ 
0051:  MOVF   53,W
0052:  SUBLW  14
0053:  BTFSS  03.2
0054:  GOTO   065
0055:  MOVF   54,F
0056:  BTFSS  03.2
0057:  GOTO   065
....................       timeOut = true; 
0058:  BSF    52.1
....................       conta=0; 
0059:  CLRF   54
005A:  CLRF   53
....................       led = !led;  // inverte o led 
005B:  MOVLW  04
005C:  XORWF  52,F
....................       output_bit (pin_b0,led); 
005D:  BTFSC  52.2
005E:  GOTO   061
005F:  BCF    06.0
0060:  GOTO   062
0061:  BSF    06.0
0062:  BSF    03.5
0063:  BCF    06.0
0064:  BCF    03.5
....................    }    
.................... } 
....................  
0065:  BCF    0B.2
0066:  BCF    0A.3
0067:  GOTO   024
.................... #INT_RDA 
.................... void serial_isr(){  
....................    //disable_interrupts(INT_RDA); 
....................     
....................    set_timer0(0); 
*
008A:  CLRF   01
....................    clear_interrupt(int_timer0); 
008B:  BCF    0B.2
....................    enable_interrupts(INT_TIMER0);   
008C:  BSF    0B.5
....................     
....................    if(timeOut){ 
008D:  BTFSS  52.1
008E:  GOTO   0A0
....................       fputs("Sem Recepção", serial); 
008F:  CLRF   57
0090:  MOVF   57,W
0091:  CALL   035
0092:  IORLW  00
0093:  BTFSC  03.2
0094:  GOTO   099
0095:  INCF   57,F
0096:  MOVWF  59
0097:  CALL   068
0098:  GOTO   090
0099:  MOVLW  0D
009A:  MOVWF  59
009B:  CALL   068
009C:  MOVLW  0A
009D:  MOVWF  59
009E:  CALL   068
....................       timeOut = false; 
009F:  BCF    52.1
....................    } 
....................     
....................    while(kbhit(gprs)){ 
00A0:  BTFSS  0C.5
00A1:  GOTO   0E1
....................       chr[i] = fgetc(gprs); 
00A2:  MOVLW  28
00A3:  ADDWF  51,W
00A4:  MOVWF  04
00A5:  BCF    03.7
00A6:  BTFSS  0C.5
00A7:  GOTO   0A6
00A8:  MOVF   1A,W
00A9:  MOVWF  00
....................       if (chr[i] == '\n'){ 
00AA:  MOVLW  28
00AB:  ADDWF  51,W
00AC:  MOVWF  04
00AD:  BCF    03.7
00AE:  MOVF   00,W
00AF:  SUBLW  0A
00B0:  BTFSS  03.2
00B1:  GOTO   0DF
....................          cont++; 
00B2:  INCF   50,F
....................          if(cont == 3){ 
00B3:  MOVF   50,W
00B4:  SUBLW  03
00B5:  BTFSS  03.2
00B6:  GOTO   0DE
....................             cont = 0; 
00B7:  CLRF   50
....................             chr[i+1] = '\0'; 
00B8:  MOVLW  01
00B9:  ADDWF  51,W
00BA:  ADDLW  28
00BB:  MOVWF  04
00BC:  BCF    03.7
00BD:  CLRF   00
....................             i = 0; 
00BE:  CLRF   51
....................             OK = true; 
00BF:  BSF    52.0
....................             fputs(chr, serial);             
00C0:  MOVLW  28
00C1:  MOVWF  04
00C2:  BCF    03.7
00C3:  MOVLW  00
00C4:  IORWF  00,W
00C5:  BTFSC  03.2
00C6:  GOTO   0D7
00C7:  CLRF   58
00C8:  MOVF   04,W
00C9:  MOVWF  57
00CA:  BCF    58.0
00CB:  BTFSC  03.7
00CC:  BSF    58.0
00CD:  MOVF   00,W
00CE:  MOVWF  59
00CF:  CALL   068
00D0:  MOVF   57,W
00D1:  MOVWF  04
00D2:  BCF    03.7
00D3:  BTFSC  58.0
00D4:  BSF    03.7
00D5:  INCF   04,F
00D6:  GOTO   0C3
00D7:  MOVLW  0D
00D8:  MOVWF  59
00D9:  CALL   068
00DA:  MOVLW  0A
00DB:  MOVWF  59
00DC:  CALL   068
....................             break; 
00DD:  GOTO   0E1
....................          } 
....................       } else i++; 
00DE:  GOTO   0E0
00DF:  INCF   51,F
....................    } 
00E0:  GOTO   0A0
....................    disable_interrupts(INT_TIMER0);    
00E1:  BCF    0B.5
....................    // output_high(pin_b0);    
.................... } 
....................  
00E2:  BCF    0C.5
00E3:  BCF    0A.3
00E4:  GOTO   024
.................... void main(){ 
*
00FA:  CLRF   04
00FB:  BCF    03.7
00FC:  MOVLW  1F
00FD:  ANDWF  03,F
00FE:  MOVLW  19
00FF:  BSF    03.5
0100:  MOVWF  19
0101:  MOVLW  A6
0102:  MOVWF  18
0103:  MOVLW  90
0104:  BCF    03.5
0105:  MOVWF  18
0106:  BSF    03.5
0107:  BCF    05.0
0108:  BCF    03.5
0109:  BSF    05.0
010A:  CLRF   50
010B:  CLRF   51
010C:  BCF    52.0
010D:  BCF    52.1
010E:  MOVLW  07
010F:  MOVWF  1F
....................    enable_interrupts(GLOBAL); 
*
0113:  MOVLW  C0
0114:  IORWF  0B,F
....................    enable_interrupts(INT_RDA);  
0115:  BSF    03.5
0116:  BSF    0C.5
....................    setup_timer_0(RTCC_INTERNAL | RTCC_DIV_64); 
0117:  MOVF   01,W
0118:  ANDLW  C0
0119:  IORLW  05
011A:  MOVWF  01
....................    //enable_interrupts(INT_TIMER0); 
....................    //while(true){} 
....................    /*while(true){ 
....................       if (!OK) 
....................          fputs("AT\r", gprs); 
....................       while(true){ 
....................          if(OK){ 
....................             OK = false; 
....................             break;  
....................          } 
....................       } 
....................       delay_ms(1000); 
....................    }*/ 
....................       delay_ms(2000); 
011B:  MOVLW  08
011C:  BCF    03.5
011D:  MOVWF  55
011E:  MOVLW  FA
011F:  MOVWF  56
0120:  CALL   0E5
0121:  DECFSZ 55,F
0122:  GOTO   11E
....................       fputs("AT\r", gprs);       
0123:  CLRF   55
0124:  MOVF   55,W
0125:  CALL   046
0126:  IORLW  00
0127:  BTFSC  03.2
0128:  GOTO   12E
0129:  INCF   55,F
012A:  BTFSS  0C.4
012B:  GOTO   12A
012C:  MOVWF  19
012D:  GOTO   124
012E:  MOVLW  0D
012F:  BTFSS  0C.4
0130:  GOTO   12F
0131:  MOVWF  19
0132:  MOVLW  0A
0133:  BTFSS  0C.4
0134:  GOTO   133
0135:  MOVWF  19
....................       delay_ms(5000);       
0136:  MOVLW  14
0137:  MOVWF  55
0138:  MOVLW  FA
0139:  MOVWF  56
013A:  CALL   0E5
013B:  DECFSZ 55,F
013C:  GOTO   138
.................... }  
....................  
....................  
....................  
.................... /* 
....................  
....................  
.................... #int_timer0 
.................... void timer0isr(){                                                                        
....................    if (waitfor)  
....................       --waitfor; 
....................    else  
....................       RC_timeout=true; 
.................... } 
....................  
.................... void ftget_string(char *s, int max, int ticks){ 
....................    int len; 
....................    char c; 
....................    waitfor=ticks; 
....................    RC_timeout=false;                                              
....................  
....................    set_timer0(0); 
....................    clear_interrupt(int_timer0); 
....................    enable_interrupts(INT_TIMER0); 
....................    --max; 
....................    len=0; 
....................    do{ 
....................       while(!kbhit(GSM)){ 
....................          if(RC_timeout){ 
....................             c=10; 
....................             break; 
....................          } 
....................       } 
....................       if (kbhit(GSM)) 
....................       c=fgetc(GSM); 
....................       if ((c>=' ')&&(c<='~')) 
....................          if(len<=max){ 
....................             s[len++]=c; 
....................          } 
....................    }while(c!=10); 
....................    s[len]=0; 
....................    disable_interrupts(INT_TIMER0); 
.................... }  
.................... */ 
013D:  SLEEP

Configuration Fuses:
   Word  1: 3F21   NOWDT PUT XT MCLR NOBROWNOUT NOLVP NOCPD NOPROTECT
