CCS PCM C Compiler, Version 4.114, 93483988               01-mai-14 18:20

               Filename: D:\SkyDrive\Eletronica\PROJETOS PIC CCS\MATRIZ 8X8 TETRIS Bicolor\principal.lst

               ROM used: 466 words (11%)
                         Largest free fragment is 2048
               RAM used: 48 (25%) at main() level
                         51 (27%) worst case
               Stack:    1 worst case (0 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   099
0003:  NOP
0004:  BTFSS  0A.3
0005:  BCF    0A.4
0006:  BTFSC  0A.3
0007:  BSF    0A.4
0008:  BCF    0A.3
0009:  BTFSC  03.5
000A:  GOTO   00F
000B:  MOVWF  24
000C:  SWAPF  03,W
000D:  MOVWF  25
000E:  GOTO   014
000F:  BCF    03.5
0010:  MOVWF  24
0011:  SWAPF  03,W
0012:  MOVWF  25
0013:  BSF    25.1
0014:  BTFSS  0A.4
0015:  BCF    0A.3
0016:  BTFSC  0A.4
0017:  BSF    0A.3
0018:  BCF    0A.4
0019:  MOVF   0A,W
001A:  MOVWF  2B
001B:  CLRF   0A
001C:  BCF    03.7
001D:  SWAPF  24,F
001E:  MOVF   04,W
001F:  MOVWF  26
0020:  MOVF   20,W
0021:  MOVWF  27
0022:  MOVF   21,W
0023:  MOVWF  28
0024:  MOVF   22,W
0025:  MOVWF  29
0026:  MOVF   23,W
0027:  MOVWF  2A
0028:  BCF    03.5
0029:  BTFSS  0B.5
002A:  GOTO   02D
002B:  BTFSC  0B.2
002C:  GOTO   040
002D:  MOVF   26,W
002E:  MOVWF  04
002F:  MOVF   27,W
0030:  MOVWF  20
0031:  MOVF   28,W
0032:  MOVWF  21
0033:  MOVF   29,W
0034:  MOVWF  22
0035:  MOVF   2A,W
0036:  MOVWF  23
0037:  MOVF   2B,W
0038:  MOVWF  0A
0039:  SWAPF  25,W
003A:  MOVWF  03
003B:  BCF    03.5
003C:  SWAPF  24,W
003D:  BTFSC  25.1
003E:  BSF    03.5
003F:  RETFIE
0040:  BCF    0A.3
0041:  GOTO   042
.................... #include <16F73.h> 
.................... //////// Standard Header file for the PIC16F73 device //////////////// 
.................... #device PIC16F73 
.................... #list 
....................  
.................... #use delay(clock=16000000) 
*
0079:  MOVLW  52
007A:  MOVWF  04
007B:  MOVF   00,W
007C:  BTFSC  03.2
007D:  GOTO   08C
007E:  MOVLW  05
007F:  MOVWF  21
0080:  CLRF   20
0081:  DECFSZ 20,F
0082:  GOTO   081
0083:  DECFSZ 21,F
0084:  GOTO   080
0085:  MOVLW  2E
0086:  MOVWF  20
0087:  DECFSZ 20,F
0088:  GOTO   087
0089:  GOTO   08A
008A:  DECFSZ 00,F
008B:  GOTO   07E
.................... #FUSES NOWDT, HS, NOPUT, NOPROTECT, NOBROWNOUT  
....................  
.................... int i=0, AltOBJ=2; 
.................... int contaBotoes = 0, desloc = 3, flag = 0, largOBJ = 2; 
.................... int1 bit1, bit2; 
.................... long contaTempo = 0, acel = 0, maxTime = 6000; 
....................  
.................... byte OBJ[2] = {0b00011000, 
....................                0b00011000}; 
*
00B1:  MOVLW  18
00B2:  BCF    03.5
00B3:  MOVWF  39
00B4:  MOVWF  3A
.................... byte vm[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}; 
00B5:  CLRF   3B
00B6:  CLRF   3C
00B7:  CLRF   3D
00B8:  CLRF   3E
00B9:  CLRF   3F
00BA:  CLRF   40
00BB:  CLRF   41
00BC:  CLRF   42
.................... byte vd[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}; 
00BD:  CLRF   43
00BE:  CLRF   44
00BF:  CLRF   45
00C0:  CLRF   46
00C1:  CLRF   47
00C2:  CLRF   48
00C3:  CLRF   49
00C4:  CLRF   4A
....................    
.................... #INT_TIMER0 
.................... void RTTC_isr(void){ 
....................    int y, x; 
....................       y=0; 
*
0042:  CLRF   50
....................       for (x = 0; x < 8; x++){ 
0043:  CLRF   51
0044:  MOVF   51,W
0045:  SUBLW  07
0046:  BTFSS  03.0
0047:  GOTO   08E
....................          output_low(pin_a4); 
0048:  BSF    03.5
0049:  BCF    05.4
004A:  BCF    03.5
004B:  BCF    05.4
....................          output_high(pin_a4); 
004C:  BSF    03.5
004D:  BCF    05.4
004E:  BCF    03.5
004F:  BSF    05.4
....................          if((x>=i) && (x < AltOBJ+i)){ 
0050:  MOVF   2C,W
0051:  SUBWF  51,W
0052:  BTFSS  03.0
0053:  GOTO   06C
0054:  MOVF   2C,W
0055:  ADDWF  2D,W
0056:  SUBWF  51,W
0057:  BTFSC  03.0
0058:  GOTO   06C
....................             output_c(~(vm[x] | OBJ[y])); 
0059:  MOVLW  3B
005A:  ADDWF  51,W
005B:  MOVWF  04
005C:  MOVF   00,W
005D:  MOVWF  52
005E:  MOVLW  39
005F:  ADDWF  50,W
0060:  MOVWF  04
0061:  MOVF   00,W
0062:  IORWF  52,W
0063:  XORLW  FF
0064:  MOVWF  52
0065:  BSF    03.5
0066:  CLRF   07
0067:  BCF    03.5
0068:  MOVF   52,W
0069:  MOVWF  07
....................             y++; 
006A:  INCF   50,F
....................          } 
....................          else 
006B:  GOTO   077
....................             output_c(~vm[x]); 
006C:  MOVLW  3B
006D:  ADDWF  51,W
006E:  MOVWF  04
006F:  MOVF   00,W
0070:  XORLW  FF
0071:  MOVWF  52
0072:  BSF    03.5
0073:  CLRF   07
0074:  BCF    03.5
0075:  MOVF   52,W
0076:  MOVWF  07
....................          delay_ms(2); 
0077:  MOVLW  02
0078:  MOVWF  52
....................         
....................       } 
*
008C:  INCF   51,F
008D:  GOTO   044
....................       output_high(pin_a5);  
008E:  BSF    03.5
008F:  BCF    05.5
0090:  BCF    03.5
0091:  BSF    05.5
....................       output_low(pin_a5);  
0092:  BSF    03.5
0093:  BCF    05.5
0094:  BCF    03.5
0095:  BCF    05.5
.................... } 
0096:  BCF    0B.2
0097:  BCF    0A.3
0098:  GOTO   02D
.................... void main(){ 
0099:  CLRF   04
009A:  MOVLW  1F
009B:  ANDWF  03,F
009C:  CLRF   2C
009D:  MOVLW  02
009E:  MOVWF  2D
009F:  CLRF   2E
00A0:  MOVLW  03
00A1:  MOVWF  2F
00A2:  CLRF   30
00A3:  MOVLW  02
00A4:  MOVWF  31
00A5:  CLRF   34
00A6:  CLRF   33
00A7:  CLRF   36
00A8:  CLRF   35
00A9:  MOVLW  17
00AA:  MOVWF  38
00AB:  MOVLW  70
00AC:  MOVWF  37
00AD:  BSF    03.5
00AE:  BSF    1F.0
00AF:  BSF    1F.1
00B0:  BSF    1F.2
....................    int x,y, t; 
....................    output_high(pin_a5); 
*
00C5:  BSF    03.5
00C6:  BCF    05.5
00C7:  BCF    03.5
00C8:  BSF    05.5
....................    output_low(pin_a5);    
00C9:  BSF    03.5
00CA:  BCF    05.5
00CB:  BCF    03.5
00CC:  BCF    05.5
....................    output_high(pin_a4);    
00CD:  BSF    03.5
00CE:  BCF    05.4
00CF:  BCF    03.5
00D0:  BSF    05.4
....................    setup_timer_0 (RTCC_DIV_256); 
00D1:  BSF    03.5
00D2:  MOVF   01,W
00D3:  ANDLW  C0
00D4:  IORLW  07
00D5:  MOVWF  01
....................    set_timer0(0); 
00D6:  BCF    03.5
00D7:  CLRF   01
....................    enable_interrupts (INT_TIMER0);  
00D8:  BSF    0B.5
....................    enable_interrupts(GLOBAL);   
00D9:  MOVLW  C0
00DA:  IORWF  0B,F
....................    while(true){ 
....................      contaTempo++; 
00DB:  INCF   33,F
00DC:  BTFSC  03.2
00DD:  INCF   34,F
....................       if (contaTempo==6000){ /////////// ~1SEG///////////////// 
00DE:  MOVF   33,W
00DF:  SUBLW  70
00E0:  BTFSS  03.2
00E1:  GOTO   152
00E2:  MOVF   34,W
00E3:  SUBLW  17
00E4:  BTFSS  03.2
00E5:  GOTO   152
....................          if((i == 8-AltOBJ) || (((vm[i+AltOBJ])&(OBJ[AltOBJ-1])) != 0)){ 
00E6:  MOVF   2D,W
00E7:  SUBLW  08
00E8:  SUBWF  2C,W
00E9:  BTFSC  03.2
00EA:  GOTO   0F9
00EB:  MOVF   2D,W
00EC:  ADDWF  2C,W
00ED:  ADDLW  3B
00EE:  MOVWF  04
00EF:  MOVF   00,W
00F0:  MOVWF  4E
00F1:  MOVLW  01
00F2:  SUBWF  2D,W
00F3:  ADDLW  39
00F4:  MOVWF  04
00F5:  MOVF   00,W
00F6:  ANDWF  4E,W
00F7:  BTFSC  03.2
00F8:  GOTO   14D
....................             y = 0; 
00F9:  CLRF   4C
....................             for(t=i;t<AltOBJ+i;t++){ 
00FA:  MOVF   2C,W
00FB:  MOVWF  4D
00FC:  MOVF   2C,W
00FD:  ADDWF  2D,W
00FE:  SUBWF  4D,W
00FF:  BTFSC  03.0
0100:  GOTO   114
....................                vm[t] |= OBJ[y]; 
0101:  MOVLW  3B
0102:  ADDWF  4D,W
0103:  MOVWF  4E
0104:  MOVWF  04
0105:  MOVF   00,W
0106:  MOVWF  4F
0107:  MOVLW  39
0108:  ADDWF  4C,W
0109:  MOVWF  04
010A:  MOVF   00,W
010B:  IORWF  4F,W
010C:  MOVWF  4F
010D:  MOVF   4E,W
010E:  MOVWF  04
010F:  MOVF   4F,W
0110:  MOVWF  00
....................                y++; 
0111:  INCF   4C,F
....................             } 
0112:  INCF   4D,F
0113:  GOTO   0FC
....................             // ------------------ Se completou a completou uma linha 
....................             for(t=0;t<8;t++){ 
0114:  CLRF   4D
0115:  MOVF   4D,W
0116:  SUBLW  07
0117:  BTFSS  03.0
0118:  GOTO   14B
....................                if(vm[t] == 0xff){ 
0119:  MOVLW  3B
011A:  ADDWF  4D,W
011B:  MOVWF  04
011C:  INCFSZ 00,W
011D:  GOTO   149
....................                   for(y=0;y<8;y++){ 
011E:  CLRF   4C
011F:  MOVF   4C,W
0120:  SUBLW  07
0121:  BTFSS  03.0
0122:  GOTO   135
....................                      //vm[t] = 0x00; 
....................                      bit_clear(vm[t], y); 
0123:  MOVLW  3B
0124:  ADDWF  4D,W
0125:  MOVWF  04
0126:  MOVLW  01
0127:  MOVWF  20
0128:  MOVF   4C,W
0129:  MOVWF  21
012A:  BTFSC  03.2
012B:  GOTO   130
012C:  BCF    03.0
012D:  RLF    20,F
012E:  DECFSZ 21,F
012F:  GOTO   12C
0130:  MOVF   20,W
0131:  XORLW  FF
0132:  ANDWF  00,F
....................                   } 
0133:  INCF   4C,F
0134:  GOTO   11F
....................                   for(y=t;y>0;y--){ 
0135:  MOVF   4D,W
0136:  MOVWF  4C
0137:  MOVF   4C,F
0138:  BTFSC  03.2
0139:  GOTO   149
....................                      vm[y] = vm[y-1]; 
013A:  MOVLW  3B
013B:  ADDWF  4C,W
013C:  MOVWF  4E
013D:  MOVLW  01
013E:  SUBWF  4C,W
013F:  ADDLW  3B
0140:  MOVWF  04
0141:  MOVF   00,W
0142:  MOVWF  4F
0143:  MOVF   4E,W
0144:  MOVWF  04
0145:  MOVF   4F,W
0146:  MOVWF  00
....................                   } 
0147:  DECF   4C,F
0148:  GOTO   137
....................                } 
....................             } 
0149:  INCF   4D,F
014A:  GOTO   115
....................             // -------------------------------------- 
....................             i = 0; 
014B:  CLRF   2C
....................          } 
....................          else i++; 
014C:  GOTO   14E
014D:  INCF   2C,F
....................          contaTempo = acel; 
014E:  MOVF   36,W
014F:  MOVWF  34
0150:  MOVF   35,W
0151:  MOVWF  33
....................       }/////////// ~1SEG///////////////// 
....................       contaBotoes++; 
0152:  INCF   2E,F
....................       /////////// ~50 M SEG///////////////// 
....................       if (contaBotoes > 160){ 
0153:  MOVF   2E,W
0154:  SUBLW  A0
0155:  BTFSC  03.0
0156:  GOTO   1D0
....................          if(!input(pin_a3)){ // Direita 
0157:  BSF    03.5
0158:  BSF    05.3
0159:  BCF    03.5
015A:  BTFSC  05.3
015B:  GOTO   16F
....................             if(desloc < (8-AltOBJ)){ 
015C:  MOVF   2D,W
015D:  SUBLW  08
015E:  SUBWF  2F,W
015F:  BTFSC  03.0
0160:  GOTO   16F
....................                desloc++; 
0161:  INCF   2F,F
....................                for(x=0;x<AltOBJ;x++) 
0162:  CLRF   4B
0163:  MOVF   2D,W
0164:  SUBWF  4B,W
0165:  BTFSC  03.0
0166:  GOTO   16F
....................                   OBJ[x] >>= 1; 
0167:  MOVLW  39
0168:  ADDWF  4B,W
0169:  MOVWF  04
016A:  BCF    03.0
016B:  RRF    00,W
016C:  MOVWF  00
016D:  INCF   4B,F
016E:  GOTO   163
....................             } 
....................          } 
....................          if(!input(pin_a1)){ // esq 
016F:  BSF    03.5
0170:  BSF    05.1
0171:  BCF    03.5
0172:  BTFSC  05.1
0173:  GOTO   1C3
....................             if(desloc > 0){ 
0174:  MOVF   2F,F
0175:  BTFSC  03.2
0176:  GOTO   1C3
....................                for(x=0;x<altOBJ;x++){ 
0177:  CLRF   4B
0178:  MOVF   2D,W
0179:  SUBWF  4B,W
017A:  BTFSC  03.0
017B:  GOTO   1B2
....................                   //if((bit_test(OBJ[x],desloc) & bit_test(vm[i+x],desloc-1)) == 0) 
....................                   bit1 = bit_test(OBJ[x],desloc); 
017C:  MOVLW  39
017D:  ADDWF  4B,W
017E:  MOVWF  04
017F:  MOVF   00,W
0180:  MOVWF  4E
0181:  MOVWF  20
0182:  MOVF   2F,W
0183:  MOVWF  21
0184:  BTFSC  03.2
0185:  GOTO   18A
0186:  BCF    03.0
0187:  RRF    20,F
0188:  DECFSZ 21,F
0189:  GOTO   186
018A:  BCF    32.0
018B:  BTFSC  20.0
018C:  BSF    32.0
....................                   bit2 = bit_test(vm[i+x],desloc-1); 
018D:  MOVF   4B,W
018E:  ADDWF  2C,W
018F:  ADDLW  3B
0190:  MOVWF  04
0191:  MOVF   00,W
0192:  MOVWF  4E
0193:  MOVLW  01
0194:  SUBWF  2F,W
0195:  MOVWF  4F
0196:  MOVF   4E,W
0197:  MOVWF  20
0198:  MOVF   4F,W
0199:  MOVWF  21
019A:  BTFSC  03.2
019B:  GOTO   1A0
019C:  BCF    03.0
019D:  RRF    20,F
019E:  DECFSZ 21,F
019F:  GOTO   19C
01A0:  BCF    32.1
01A1:  BTFSC  20.0
01A2:  BSF    32.1
....................                   if((bit1 & bit2)!=1){ 
01A3:  MOVLW  00
01A4:  BTFSC  32.0
01A5:  MOVLW  01
01A6:  MOVWF  4F
01A7:  MOVLW  00
01A8:  BTFSC  32.1
01A9:  MOVLW  01
01AA:  ANDWF  4F,W
01AB:  SUBLW  01
01AC:  BTFSC  03.2
01AD:  GOTO   1B0
....................                      flag = 1; 
01AE:  MOVLW  01
01AF:  MOVWF  30
....................                   } 
....................                } 
01B0:  INCF   4B,F
01B1:  GOTO   178
....................                if(flag==1){ 
01B2:  DECFSZ 30,W
01B3:  GOTO   1C3
....................                   flag = 0; 
01B4:  CLRF   30
....................                   desloc--; 
01B5:  DECF   2F,F
....................                   for(x=0;x<AltOBJ;x++) 
01B6:  CLRF   4B
01B7:  MOVF   2D,W
01B8:  SUBWF  4B,W
01B9:  BTFSC  03.0
01BA:  GOTO   1C3
....................                      OBJ[x] <<= 1; 
01BB:  MOVLW  39
01BC:  ADDWF  4B,W
01BD:  MOVWF  04
01BE:  BCF    03.0
01BF:  RLF    00,W
01C0:  MOVWF  00
01C1:  INCF   4B,F
01C2:  GOTO   1B7
....................                } 
....................             } 
....................          }    
....................          if(!input(pin_a0)){ // BAIXO 
01C3:  BSF    03.5
01C4:  BSF    05.0
01C5:  BCF    03.5
01C6:  BTFSC  05.0
01C7:  GOTO   1CD
....................             acel = 5900; 
01C8:  MOVLW  17
01C9:  MOVWF  36
01CA:  MOVLW  0C
01CB:  MOVWF  35
....................          } 
....................          else acel = 0; 
01CC:  GOTO   1CF
01CD:  CLRF   36
01CE:  CLRF   35
....................          contaBotoes = 0; 
01CF:  CLRF   2E
....................       } 
....................       /////////// ~50 M SEG///////////////// 
....................       /*      a0 - baixo  a1 - esq  a2 - cima  a3 - dir      */ 
....................    } 
01D0:  GOTO   0DB
.................... } 
....................  
01D1:  SLEEP

Configuration Fuses:
   Word  1: 3FBA   HS NOWDT NOPUT NOPROTECT NOBROWNOUT
