D G "__PCM__" 0 24 ""5.010""
D G "__DEVICE__" 0 24 "683"
D G "__DATE__" 0 24 ""27-mar-14""
D G "__TIME__" 0 24 ""07:59:20"" "Standard Header file for the PIC12F683 device ////////////////"
c L "set_tris_a" 1 5 13 "FUNCTION"
v L "value" 1 28 "int8" `53 
f B "set_tris_a" 1 28 "void(int8 value)" `52 
f B "get_tris_a" 1 29 "int8()" `54 
v L "value" 1 30 "int8" `56 
f B "output_a" 1 30 "void(int8 value)" `55 
f B "input_a" 1 31 "int8()" `57 
f B "input_change_a" 1 32 "int8()" `58 
v L "pin" 1 33 "int16" `60 
f B "input" 1 33 "int8(int16 pin)" `59 
v L "pin" 1 34 "int16" `62 
f B "input_state" 1 34 "int8(int16 pin)" `61 
v L "pin" 1 35 "int16" `64 
f B "output_low" 1 35 "void(int16 pin)" `63 
v L "pin" 1 36 "int16" `66 
f B "output_high" 1 36 "void(int16 pin)" `65 
v L "pin" 1 37 "int16" `68 
f B "output_toggle" 1 37 "void(int16 pin)" `67 
v L "pin" 1 38 "int16" `70 
v L "level" 1 38 "int8" `71 
f B "output_bit" 1 38 "void(int16 pin,int8 level)" `69 
v L "pin" 1 39 "int16" `73 
f B "output_float" 1 39 "void(int16 pin)" `72 
v L "pin" 1 40 "int16" `75 
f B "output_drive" 1 40 "void(int16 pin)" `74  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 44 "40"
d G "PIN_A1" 1 45 "41"
d G "PIN_A2" 1 46 "42"
d G "PIN_A3" 1 47 "43"
d G "PIN_A4" 1 48 "44"
d G "PIN_A5" 1 49 "45"
d G "FALSE" 1 52 "0"
d G "TRUE" 1 53 "1"
d G "BYTE" 1 55 "int8"
d G "BOOLEAN" 1 56 "int1"
d G "getc" 1 58 "getch"
d G "fgetc" 1 59 "getch"
d G "getchar" 1 60 "getch"
d G "putc" 1 61 "putchar"
d G "fputc" 1 62 "putchar"
d G "fgets" 1 63 "gets"
d G "fputs" 1 64 "puts"
c L "output_drive" 1 5 3 "FUNCTION"
f B "restart_cause" 1 69 "int8()" `76 
f B "reset_cpu" 1 70 "void()" `77 
f B "sleep" 1 71 "void()" `78  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 1 73 "3"
d G "WDT_TIMEOUT" 1 74 "11"
d G "MCLR_FROM_SLEEP" 1 75 "19"
d G "MCLR_FROM_RUN" 1 76 "27"
d G "NORMAL_POWER_UP" 1 77 "25"
d G "BROWNOUT_RESTART" 1 78 "26"
c L "sleep" 1 5 5 "FUNCTION"
v L "mode" 1 85 "int8" `80 
f B "setup_timer_0" 1 85 "void(int8 mode)" `79 
v L "value" 1 86 "int8" `82 
f B "set_timer0" 1 86 "void(int8 value)" `81 
f B "get_timer0" 1 87 "int8()" `83 
v L "mode" 1 88 "int8" `85 
v L "prescaler" 1 88 "int8" `86 
f B "setup_counters" 1 88 "void(int8 mode,int8 prescaler)" `84 
v L "value" 1 89 "int8" `88 
f B "set_rtcc" 1 89 "void(int8 value)" `87 
f B "get_rtcc" 1 90 "int8()" `89  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 92 "0"
d G "T0_EXT_L_TO_H" 1 93 "32"
d G "T0_EXT_H_TO_L" 1 94 "48"
d G "T0_DIV_1" 1 96 "8"
d G "T0_DIV_2" 1 97 "0"
d G "T0_DIV_4" 1 98 "1"
d G "T0_DIV_8" 1 99 "2"
d G "T0_DIV_16" 1 100 "3"
d G "T0_DIV_32" 1 101 "4"
d G "T0_DIV_64" 1 102 "5"
d G "T0_DIV_128" 1 103 "6"
d G "T0_DIV_256" 1 104 "7"
d G "T0_8_BIT" 1 107 "0"
d G "RTCC_INTERNAL" 1 109 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 110 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 111 "48"
d G "RTCC_DIV_1" 1 112 "8"
d G "RTCC_DIV_2" 1 113 "0"
d G "RTCC_DIV_4" 1 114 "1"
d G "RTCC_DIV_8" 1 115 "2"
d G "RTCC_DIV_16" 1 116 "3"
d G "RTCC_DIV_32" 1 117 "4"
d G "RTCC_DIV_64" 1 118 "5"
d G "RTCC_DIV_128" 1 119 "6"
d G "RTCC_DIV_256" 1 120 "7"
d G "RTCC_8_BIT" 1 121 "0"
c L "get_rtcc" 1 5 8 "FUNCTION"
v L "mode" 1 132 "int16" `91 
f B "setup_wdt" 1 132 "void(int16 mode)" `90 
f B "restart_wdt" 1 133 "void()" `92  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 1 136 "8"
d G "WDT_36MS" 1 137 "9"
d G "WDT_72MS" 1 138 "10"
d G "WDT_144MS" 1 139 "11"
d G "WDT_288MS" 1 140 "12"
d G "WDT_576MS" 1 141 "13"
d G "WDT_1152MS" 1 142 "14"
d G "WDT_2304MS" 1 143 "15"
d G "WDT_ON" 1 148 "0x4000"
d G "WDT_OFF" 1 149 "0"
d G "WDT_DIV_16" 1 150 "0x100"
d G "WDT_DIV_8" 1 151 "0x300"
d G "WDT_DIV_4" 1 152 "0x500"
d G "WDT_DIV_2" 1 153 "0x700"
d G "WDT_TIMES_1" 1 154 "0x900" "Default"
d G "WDT_TIMES_2" 1 155 "0xB00"
d G "WDT_TIMES_4" 1 156 "0xD00"
d G "WDT_TIMES_8" 1 157 "0xF00"
d G "WDT_TIMES_16" 1 158 "0x1100"
d G "WDT_TIMES_32" 1 159 "0x1300"
d G "WDT_TIMES_64" 1 160 "0x1500"
d G "WDT_TIMES_128" 1 161 "0x1700"
c L "restart_wdt" 1 5 3 "FUNCTION"
v L "mode" 1 166 "int16" `94 
f B "setup_timer_1" 1 166 "void(int16 mode)" `93 
f B "get_timer1" 1 167 "int16()" `95 
v L "value" 1 168 "int16" `97 
f B "set_timer1" 1 168 "void(int16 value)" `96  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 171 "0"
d G "T1_INTERNAL" 1 172 "5"
d G "T1_EXTERNAL" 1 173 "7"
d G "T1_EXTERNAL_SYNC" 1 174 "3"
d G "T1_CLK_OUT" 1 176 "8"
d G "T1_DIV_BY_1" 1 178 "0"
d G "T1_DIV_BY_2" 1 179 "0x10"
d G "T1_DIV_BY_4" 1 180 "0x20"
d G "T1_DIV_BY_8" 1 181 "0x30"
d G "T1_GATE" 1 183 "0x40"
d G "T1_GATE_INVERTED" 1 184 "0xC0"
c L "set_timer1" 1 5 3 "FUNCTION"
v L "mode" 1 189 "int8" `99 
v L "period" 1 189 "int8" `100 
v L "postscale" 1 189 "int8" `101 
f B "setup_timer_2" 1 189 "void(int8 mode,int8 period,int8 postscale)" `98 
f B "get_timer2" 1 190 "int8()" `102 
v L "value" 1 191 "int8" `104 
f B "set_timer2" 1 191 "void(int8 value)" `103  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 193 "0"
d G "T2_DIV_BY_1" 1 194 "4"
d G "T2_DIV_BY_4" 1 195 "5"
d G "T2_DIV_BY_16" 1 196 "6"
c L "set_timer2" 1 5 4 "FUNCTION"
v L "mode" 1 202 "int32" `106 
f B "setup_ccp1" 1 202 "void(int32 mode)" `105 
v L "mode" 1 203 "int32" `108 
v L "pwm" 1 203 "int8" `109 
f G "setup_ccp1" 1 203 "void(int32 mode,int8 pwm)" `107 
v L "value" 1 204 "int16" `111 
f B "set_pwm1_duty" 1 204 "void(int16 value)" `110  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 206 "0"
d G "CCP_CAPTURE_FE" 1 207 "4"
d G "CCP_CAPTURE_RE" 1 208 "5"
d G "CCP_CAPTURE_DIV_4" 1 209 "6"
d G "CCP_CAPTURE_DIV_16" 1 210 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 1 211 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 212 "9"
d G "CCP_COMPARE_INT" 1 213 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 1 214 "0xB"
d G "CCP_PWM" 1 215 "0xC"
d G "CCP_PWM_PLUS_1" 1 216 "0x1c"
d G "CCP_PWM_PLUS_2" 1 217 "0x2c"
d G "CCP_PWM_PLUS_3" 1 218 "0x3c"
c L "set_pwm1_duty" 1 5 3 "FUNCTION"
v L "mode" 1 225 "int32" `116 
f B "setup_comparator" 1 225 "void(int32 mode)" `115  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 1 227 "0x0ff07"
d G "NC_NC" 1 228 "0x0ff07"
d G "A0_A1" 1 229 "0x3ff02"
d G "A1_VR_OUT_ON_A2" 1 230 "0x6fb03"
d G "A1_VR" 1 231 "0x2ff04"
d G "A0_A1_OUT_ON_A2" 1 232 "0x3fb01"
d G "COMP_INVERT" 1 235 "0x10"
c L "setup_comparator" 1 5 2 "FUNCTION"
v L "mode" 1 241 "int8" `119 
f B "setup_vref" 1 241 "void(int8 mode)" `118  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 243 "0xa0"
d G "VREF_HIGH" 1 244 "0x80"
c L "setup_vref" 1 5 3 "FUNCTION"
v L "mode" 1 249 "int8" `121 
f B "setup_oscillator" 1 249 "int8(int8 mode)" `120  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 1 251 "1"
d G "OSC_125KHZ" 1 252 "0x11"
d G "OSC_250KHZ" 1 253 "0x21"
d G "OSC_500KHZ" 1 254 "0x31"
d G "OSC_1MHZ" 1 255 "0x41"
d G "OSC_2MHZ" 1 256 "0x51"
d G "OSC_4MHZ" 1 257 "0x61"
d G "OSC_8MHZ" 1 258 "0x71"
d G "OSC_INTRC" 1 259 "1"
d G "OSC_NORMAL" 1 260 "0"
d G "OSC_STATE_STABLE" 1 262 "4"
d G "OSC_31KHZ_STABLE" 1 263 "2"
c L "setup_oscillator" 1 5 4 "FUNCTION"
v L "mode" 1 271 "int16" `123 
f B "setup_adc" 1 271 "void(int16 mode)" `122 
f B "read_adc" 1 272 "int8()" `124 
v L "mode" 1 273 "int8" `126 
f G "read_adc" 1 273 "int8(int8 mode)" `125 
f G "read_adc" 1 274 "int16()" `127 
v L "mode" 1 275 "int8" `129 
f G "read_adc" 1 275 "int16(int8 mode)" `128 
f B "adc_done" 1 276 "int8()" `130  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 278 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 279 "0x100"
d G "ADC_CLOCK_DIV_4" 1 280 "0x40"
d G "ADC_CLOCK_DIV_8" 1 281 "0x10"
d G "ADC_CLOCK_DIV_16" 1 282 "0x50"
d G "ADC_CLOCK_DIV_32" 1 283 "0x20"
d G "ADC_CLOCK_DIV_64" 1 284 "0x60"
d G "ADC_CLOCK_INTERNAL" 1 285 "0x30" "Internal 2-6us"
c L "adc_done" 1 5 1 "FUNCTION"
v L "pins" 1 288 "int16" `132 
f B "setup_adc_ports" 1 288 "void(int16 pins)" `131 
v L "pins" 1 289 "int16" `134 
v L "reference" 1 289 "int16" `135 
f G "setup_adc_ports" 1 289 "void(int16 pins,int16 reference)" `133 
v L "channel" 1 290 "int8" `137 
f B "set_adc_channel" 1 290 "void(int8 channel)" `136  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 1 294 "1" "| GP0"
d G "sAN1" 1 295 "2" "| GP1"
d G "sAN2" 1 296 "4" "| GP2"
d G "sAN3" 1 297 "8" "| GP4"
d G "NO_ANALOGS" 1 298 "0" "None"
d G "AN0_ANALOG" 1 299 "1" "!old only provided for compatibility"
d G "AN1_ANALOG" 1 300 "2" "!old only provided for compatibility"
d G "AN2_ANALOG" 1 301 "4" "!old only provided for compatibility"
d G "AN3_ANALOG" 1 302 "8" "!old only provided for compatibility"
d G "ALL_ANALOG" 1 303 "7" "!old only provided for compatibility"
d G "VSS_VDD" 1 306 "0x0000" "| Range 0-Vdd"
d G "VSS_VREF" 1 307 "0x4000" "| Range 0-Vref"
d G "ADC_START_AND_READ" 1 310 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 311 "1"
d G "ADC_READ_ONLY" 1 312 "6"
c L "set_adc_channel" 1 5 3 "FUNCTION"
v L "x" 1 318 "sint8" `139 
f B "abs" 1 318 "sint8(sint8 x)" `138 
v L "x" 1 319 "sint16" `141 
f G "abs" 1 319 "sint16(sint16 x)" `140 
v L "x" 1 320 "sint32" `143 
f G "abs" 1 320 "sint32(sint32 x)" `142 
v L "x" 1 321 "float" `145 
f G "abs" 1 321 "float(float x)" `144 
v L "??65535" 1 322 "int8" `147 
v L "??65535" 1 322 "int8" `148 
f B "_mul" 1 322 "int16(int8 ,int8 )" `146 
v L "??65535" 1 323 "sint8" `147 
v L "??65535" 1 323 "sint8" `151 
f G "_mul" 1 323 "sint16(sint8 ,sint8 )" `149 
v L "??65535" 1 324 "int16" `147 
v L "??65535" 1 324 "int16" `154 
f G "_mul" 1 324 "int32(int16 ,int16 )" `152 
v L "??65535" 1 325 "sint16" `147 
v L "??65535" 1 325 "sint16" `157 
f G "_mul" 1 325 "sint32(sint16 ,sint16 )" `155  "Memory Manipulation Prototypes:"
v L "bank" 1 328 "int8" `159 
v L "offset" 1 328 "int8" `160 
f B "read_bank" 1 328 "int8(int8 bank,int8 offset)" `158 
v L "bank" 1 329 "int8" `162 
v L "offset" 1 329 "int8" `163 
v L "value" 1 329 "int8" `164 
f B "write_bank" 1 329 "void(int8 bank,int8 offset,int8 value)" `161 
v L "dest" 1 330 "*int8" `166 
v L "src" 1 330 "*int8" `167 
f B "strcpy" 1 330 "void(*int8 dest,*int8 src)" `165 
v L "dest" 1 331 "*int8" `169 
v L "src" 1 331 "*int8" `170 
f B "strcopy" 1 331 "void(*int8 dest,*int8 src)" `168 
v L "destination" 1 332 "*int8" `172 
v L "value" 1 332 "int8" `173 
v L "num" 1 332 "int16" `174 
f B "memset" 1 332 "void(*int8 destination,int8 value,int16 num)" `171 
v L "destination" 1 333 "*int8" `176 
v L "source" 1 333 "*int8" `177 
v L "num" 1 333 "int16" `178 
f B "memcpy" 1 333 "void(*int8 destination,*int8 source,int16 num)" `175  "String Prototypes:"
v L "cvalue" 1 336 "int8" `180 
f B "toupper" 1 336 "int8(int8 cvalue)" `179 
v L "cvalue" 1 337 "int8" `182 
f B "tolower" 1 337 "int8(int8 cvalue)" `181 
v L "string" 1 338 "*int8" `184 
v L "cstring" 1 338 "*int8" `185 
f B "sprintf" 1 338 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `183  "Data Manipulators Prototypes:"
v L "address" 1 341 "*int8" `188 
v L "bytes" 1 341 "int8" `189 
v L "value" 1 341 "int8" `190 
f B "shift_left" 1 341 "int8(*int8 address,int8 bytes,int8 value)" `187 
v L "address" 1 342 "*int8" `192 
v L "bytes" 1 342 "int8" `193 
v L "value" 1 342 "int8" `194 
f B "shift_right" 1 342 "int8(*int8 address,int8 bytes,int8 value)" `191 
v L "address" 1 343 "*int8" `196 
v L "bytes" 1 343 "int8" `197 
f B "rotate_left" 1 343 "void(*int8 address,int8 bytes)" `195 
v L "address" 1 344 "*int8" `199 
v L "bytes" 1 344 "int8" `200 
f B "rotate_right" 1 344 "void(*int8 address,int8 bytes)" `198 
v L "value" 1 345 "int8" `202 
f B "swap" 1 345 "void(int8 value)" `201 
v L "var" 1 346 "int16" `204 
v L "offset" 1 346 "int8" `205 
f B "make8" 1 346 "int8(int16 var,int8 offset)" `203 
v L "var" 1 347 "int32" `204 
v L "offset" 1 347 "int8" `208 
f G "make8" 1 347 "int8(int32 var,int8 offset)" `206 
v L "varhigh" 1 348 "int8" `210 
v L "varlow" 1 348 "int8" `211 
f B "make16" 1 348 "int16(int8 varhigh,int8 varlow)" `209 
v L "var1" 1 349 "int16" `213 
f B "make32" 1 349 "int32(int16 var1)" `212 
v L "var1" 1 350 "int16" `215 
v L "var2" 1 350 "int16" `216 
f G "make32" 1 350 "int32(int16 var1,int16 var2)" `214 
v L "var1" 1 351 "int16" `215 
v L "var2" 1 351 "int8" `219 
f G "make32" 1 351 "int32(int16 var1,int8 var2)" `217 
v L "var1" 1 352 "int16" `221 
v L "var2" 1 352 "int8" `222 
v L "var3" 1 352 "int8" `223 
f G "make32" 1 352 "int32(int16 var1,int8 var2,int8 var3)" `220 
v L "var1" 1 353 "int8" `225 
f G "make32" 1 353 "int32(int8 var1)" `224 
v L "var1" 1 354 "int8" `215 
v L "var2" 1 354 "int8" `228 
f G "make32" 1 354 "int32(int8 var1,int8 var2)" `226 
v L "var1" 1 355 "int8" `221 
v L "var2" 1 355 "int8" `222 
v L "var3" 1 355 "int8" `232 
f G "make32" 1 355 "int32(int8 var1,int8 var2,int8 var3)" `229 
v L "var1" 1 356 "int8" `234 
v L "var2" 1 356 "int8" `235 
v L "var3" 1 356 "int8" `236 
v L "var4" 1 356 "int8" `237 
f G "make32" 1 356 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `233 
v L "var1" 1 357 "int8" `215 
v L "var2" 1 357 "int16" `240 
f G "make32" 1 357 "int32(int8 var1,int16 var2)" `238 
v L "var1" 1 358 "int8" `221 
v L "var2" 1 358 "int16" `222 
v L "var3" 1 358 "int8" `244 
f G "make32" 1 358 "int32(int8 var1,int16 var2,int8 var3)" `241 
v L "var1" 1 359 "int8" `221 
v L "var2" 1 359 "int8" `222 
v L "var3" 1 359 "int16" `248 
f G "make32" 1 359 "int32(int8 var1,int8 var2,int16 var3)" `245 
v L "var" 1 360 "int8" `250 
v L "bit" 1 360 "int8" `251 
f B "bit_set" 1 360 "void(int8 var,int8 bit)" `249 
v L "var" 1 361 "int16" `250 
v L "bit" 1 361 "int8" `254 
f G "bit_set" 1 361 "void(int16 var,int8 bit)" `252 
v L "var" 1 362 "int32" `250 
v L "bit" 1 362 "int8" `257 
f G "bit_set" 1 362 "void(int32 var,int8 bit)" `255 
v L "var" 1 363 "int8" `259 
v L "bit" 1 363 "int8" `260 
f B "bit_clear" 1 363 "void(int8 var,int8 bit)" `258 
v L "var" 1 364 "int16" `259 
v L "bit" 1 364 "int8" `263 
f G "bit_clear" 1 364 "void(int16 var,int8 bit)" `261 
v L "var" 1 365 "int32" `259 
v L "bit" 1 365 "int8" `266 
f G "bit_clear" 1 365 "void(int32 var,int8 bit)" `264 
v L "var" 1 366 "int8" `268 
v L "bit" 1 366 "int8" `269 
f B "bit_test" 1 366 "int8(int8 var,int8 bit)" `267 
v L "var" 1 367 "int16" `268 
v L "bit" 1 367 "int8" `272 
f G "bit_test" 1 367 "int8(int16 var,int8 bit)" `270 
v L "var" 1 368 "int32" `268 
v L "bit" 1 368 "int8" `275 
f G "bit_test" 1 368 "int8(int32 var,int8 bit)" `273  "#use delay() Prototypes:"
v L "count" 1 371 "int8" `277 
f B "delay_cycles" 1 371 "void(int8 count)" `276 
v L "time" 1 372 "int16" `279 
f B "delay_ms" 1 372 "void(int16 time)" `278 
v L "time" 1 373 "int16" `281 
f B "delay_us" 1 373 "void(int16 time)" `280  "#use rs232() Prototypes:"
v L "cdata" 1 376 "int8" `283 
f B "putchar" 1 376 "void(int8 cdata)" `282 
v L "cdata" 1 377 "int8" `285 
v L "stream" 1 377 "int8" `286 
f G "putchar" 1 377 "void(int8 cdata,int8 stream)" `284 
v L "string" 1 378 "*int8" `288 
f B "puts" 1 378 "void(*int8 string)" `287 
v L "string" 1 379 "*int8" `290 
v L "stream" 1 379 "int8" `291 
f G "puts" 1 379 "void(*int8 string,int8 stream)" `289 
f B "getch" 1 380 "int8()" `292 
v L "stream" 1 381 "int8" `294 
f G "getch" 1 381 "int8(int8 stream)" `293 
v L "string" 1 382 "*int8" `296 
f B "gets" 1 382 "void(*int8 string)" `295 
v L "string" 1 383 "*int8" `298 
v L "stream" 1 383 "int8" `299 
f G "gets" 1 383 "void(*int8 string,int8 stream)" `297 
f B "kbhit" 1 384 "int8()" `300 
v L "stream" 1 385 "int8" `302 
f G "kbhit" 1 385 "int8(int8 stream)" `301 
v L "string" 1 386 "*int8" `304 
f B "printf" 1 386 "void(*int8 string,*int8 _VA_LIST)" `303 
v L "stream" 1 387 "int8" `307 
v L "string" 1 387 "*int8" `308 
f B "fprintf" 1 387 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `306 
f B "putc_send" 1 388 "void()" `310 
v L "stream" 1 389 "int8" `312 
f B "fputc_send" 1 389 "void(int8 stream)" `311 
f B "rcv_buffer_full" 1 390 "int8()" `313 
v L "stream" 1 391 "int8" `315 
f G "rcv_buffer_full" 1 391 "int8(int8 stream)" `314 
f B "rcv_buffer_bytes" 1 392 "int16()" `316 
v L "stream" 1 393 "int8" `318 
f G "rcv_buffer_bytes" 1 393 "int16(int8 stream)" `317 
f B "tx_buffer_full" 1 394 "int8()" `319 
v L "stream" 1 395 "int8" `321 
f G "tx_buffer_full" 1 395 "int8(int8 stream)" `320 
f B "tx_buffer_bytes" 1 396 "int16()" `322 
v L "stream" 1 397 "int8" `324 
f G "tx_buffer_bytes" 1 397 "int16(int8 stream)" `323  "#use i2c() Prototypes:"
f B "i2c_read" 1 400 "int8()" `325 
v L "stream" 1 401 "int8" `327 
f G "i2c_read" 1 401 "int8(int8 stream)" `326 
v L "stream" 1 402 "int8" `329 
v L "ack" 1 402 "int8" `330 
f G "i2c_read" 1 402 "int8(int8 stream,int8 ack)" `328 
v L "data" 1 403 "int8" `332 
f B "i2c_write" 1 403 "int8(int8 data)" `331 
v L "stream" 1 404 "int8" `334 
v L "data" 1 404 "int8" `335 
f G "i2c_write" 1 404 "int8(int8 stream,int8 data)" `333 
f B "i2c_start" 1 405 "void()" `336 
v L "stream" 1 406 "int8" `338 
f G "i2c_start" 1 406 "void(int8 stream)" `337 
v L "stream" 1 407 "int8" `340 
v L "restart" 1 407 "int8" `341 
f G "i2c_start" 1 407 "void(int8 stream,int8 restart)" `339 
f B "i2c_stop" 1 408 "void()" `342 
v L "stream" 1 409 "int8" `344 
f G "i2c_stop" 1 409 "void(int8 stream)" `343 
f B "i2c_isr_state" 1 410 "int8()" `345 
v L "addr" 1 411 "int8" `347 
f B "i2c_slaveaddr" 1 411 "void(int8 addr)" `346 
v L "stream" 1 412 "int8" `349 
v L "addr" 1 412 "int8" `350 
f G "i2c_slaveaddr" 1 412 "void(int8 stream,int8 addr)" `348 
f B "i2c_poll" 1 413 "int8()" `351 
v L "stream" 1 414 "int8" `353 
f G "i2c_poll" 1 414 "int8(int8 stream)" `352 
v L "baud" 1 415 "int32" `355 
f B "i2c_init" 1 415 "void(int32 baud)" `354 
v L "stream" 1 416 "int8" `357 
v L "baud" 1 416 "int32" `358 
f G "i2c_init" 1 416 "void(int8 stream,int32 baud)" `356  "#use spi() Prototypes:"
f B "spi_xfer" 1 419 "int8()" `359 
f G "spi_xfer" 1 420 "int16()" `360 
f G "spi_xfer" 1 421 "int32()" `361 
v L "data" 1 422 "int8" `363 
f G "spi_xfer" 1 422 "int8(int8 data)" `362 
v L "data" 1 423 "int16" `365 
f G "spi_xfer" 1 423 "int16(int16 data)" `364 
v L "data" 1 424 "int32" `367 
f G "spi_xfer" 1 424 "int32(int32 data)" `366 
v L "stream" 1 425 "int8" `369 
v L "data" 1 425 "int8" `370 
f G "spi_xfer" 1 425 "int8(int8 stream,int8 data)" `368 
v L "stream" 1 426 "int8" `369 
v L "data" 1 426 "int16" `373 
f G "spi_xfer" 1 426 "int16(int8 stream,int16 data)" `371 
v L "stream" 1 427 "int8" `369 
v L "data" 1 427 "int32" `376 
f G "spi_xfer" 1 427 "int32(int8 stream,int32 data)" `374 
v L "stream" 1 428 "int8" `378 
v L "data" 1 428 "int8" `379 
v L "bits" 1 428 "int8" `380 
f G "spi_xfer" 1 428 "int8(int8 stream,int8 data,int8 bits)" `377 
v L "stream" 1 429 "int8" `378 
v L "data" 1 429 "int16" `379 
v L "bits" 1 429 "int8" `384 
f G "spi_xfer" 1 429 "int16(int8 stream,int16 data,int8 bits)" `381 
v L "stream" 1 430 "int8" `378 
v L "data" 1 430 "int32" `379 
v L "bits" 1 430 "int8" `388 
f G "spi_xfer" 1 430 "int32(int8 stream,int32 data,int8 bits)" `385 
v L "baud" 1 431 "int32" `390 
f B "spi_init" 1 431 "void(int32 baud)" `389 
v L "stream" 1 432 "int8" `392 
v L "baud" 1 432 "int32" `393 
f G "spi_init" 1 432 "void(int8 stream,int32 baud)" `391 
v L "baud" 1 433 "int32" `395 
f B "spi_speed" 1 433 "void(int32 baud)" `394 
v L "stream" 1 434 "int8" `397 
v L "baud" 1 434 "int32" `398 
f G "spi_speed" 1 434 "void(int8 stream,int32 baud)" `396 
v L "stream" 1 435 "int8" `400 
v L "baud" 1 435 "int32" `401 
v L "clock" 1 435 "int32" `402 
f G "spi_speed" 1 435 "void(int8 stream,int32 baud,int32 clock)" `399 
v L "data" 1 436 "int8" `404 
f B "spi_prewrite" 1 436 "void(int8 data)" `403 
v L "data" 1 437 "int16" `406 
f G "spi_prewrite" 1 437 "void(int16 data)" `405 
v L "data" 1 438 "int32" `408 
f G "spi_prewrite" 1 438 "void(int32 data)" `407 
v L "??65535" 1 439 "int8" `410 
v L "data" 1 439 "int8" `411 
f G "spi_prewrite" 1 439 "void(int8 ,int8 data)" `409 
v L "??65535" 1 440 "int8" `410 
v L "data" 1 440 "int16" `414 
f G "spi_prewrite" 1 440 "void(int8 ,int16 data)" `412 
v L "??65535" 1 441 "int8" `410 
v L "data" 1 441 "int32" `417 
f G "spi_prewrite" 1 441 "void(int8 ,int32 data)" `415 
f B "spi_xfer_in" 1 442 "int8()" `418 
f G "spi_xfer_in" 1 443 "int16()" `419 
f G "spi_xfer_in" 1 444 "int32()" `420 
v L "bits" 1 445 "int8" `422 
f G "spi_xfer_in" 1 445 "int8(int8 bits)" `421 
v L "bits" 1 446 "int8" `424 
f G "spi_xfer_in" 1 446 "int16(int8 bits)" `423 
v L "bits" 1 447 "int8" `426 
f G "spi_xfer_in" 1 447 "int32(int8 bits)" `425 
v L "stream" 1 448 "int8" `428 
v L "bits" 1 448 "int8" `429 
f G "spi_xfer_in" 1 448 "int8(int8 stream,int8 bits)" `427 
v L "stream" 1 449 "int8" `428 
v L "bits" 1 449 "int8" `432 
f G "spi_xfer_in" 1 449 "int16(int8 stream,int8 bits)" `430 
v L "stream" 1 450 "int8" `428 
v L "bits" 1 450 "int8" `435 
f G "spi_xfer_in" 1 450 "int32(int8 stream,int8 bits)" `433  "#use rtos() Prototypes:"
f B "rtos_run" 1 453 "void()" `436 
f B "rtos_yield" 1 454 "void()" `437 
v L "task" 1 455 "int8" `439 
f B "rtos_enable" 1 455 "void(int8 task)" `438 
v L "task" 1 456 "int8" `441 
f B "rtos_disable" 1 456 "void(int8 task)" `440 
f B "rtos_terminate" 1 457 "void()" `442 
v L "flag" 1 458 "int8" `444 
f B "rtos_await" 1 458 "void(int8 flag)" `443 
v L "sem" 1 459 "int8" `446 
f B "rtos_wait" 1 459 "void(int8 sem)" `445 
v L "sem" 1 460 "int8" `448 
f B "rtos_signal" 1 460 "void(int8 sem)" `447 
v L "task" 1 461 "int8" `450 
v L "msg" 1 461 "int8" `451 
f B "rtos_msg_send" 1 461 "void(int8 task,int8 msg)" `449 
f B "rtos_msg_read" 1 462 "int8()" `452 
f B "rtos_msg_poll" 1 463 "int8()" `453 
v L "task" 1 464 "int8" `455 
f B "rtos_overrun" 1 464 "int8(int8 task)" `454 
v L "task" 1 465 "int8" `457 
v L "stat" 1 465 "*int8" `458 
f B "rtos_stats" 1 465 "void(int8 task,*int8 stat)" `456  "#use timer() Prototypes:"
f B "get_ticks" 1 468 "int8()" `459 
f G "get_ticks" 1 469 "int16()" `460 
f G "get_ticks" 1 470 "int32()" `461 
v L "stream" 1 471 "int8" `463 
f G "get_ticks" 1 471 "int8(int8 stream)" `462 
v L "stream" 1 472 "int8" `465 
f G "get_ticks" 1 472 "int16(int8 stream)" `464 
v L "stream" 1 473 "int8" `467 
f G "get_ticks" 1 473 "int32(int8 stream)" `466 
v L "value" 1 474 "int8" `469 
f B "set_ticks" 1 474 "void(int8 value)" `468 
v L "value" 1 475 "int16" `471 
f G "set_ticks" 1 475 "void(int16 value)" `470 
v L "value" 1 476 "int32" `473 
f G "set_ticks" 1 476 "void(int32 value)" `472 
v L "stream" 1 477 "int8" `475 
v L "value" 1 477 "int8" `476 
f G "set_ticks" 1 477 "void(int8 stream,int8 value)" `474 
v L "stream" 1 478 "int8" `475 
v L "value" 1 478 "int16" `479 
f G "set_ticks" 1 478 "void(int8 stream,int16 value)" `477 
v L "stream" 1 479 "int8" `475 
v L "value" 1 479 "int32" `482 
f G "set_ticks" 1 479 "void(int8 stream,int32 value)" `480  "#use pwm() Prototypes:"
f B "pwm_on" 1 482 "void()" `483 
v L "stream" 1 483 "int8" `485 
f G "pwm_on" 1 483 "void(int8 stream)" `484 
f B "pwm_off" 1 484 "void()" `486 
v L "stream" 1 485 "int8" `488 
f G "pwm_off" 1 485 "void(int8 stream)" `487 
v L "duty" 1 486 "int16" `490 
f B "pwm_set_duty" 1 486 "void(int16 duty)" `489 
v L "stream" 1 487 "int8" `492 
v L "duty" 1 487 "int16" `493 
f G "pwm_set_duty" 1 487 "void(int8 stream,int16 duty)" `491 
v L "percent" 1 488 "int16" `495 
f B "pwm_set_duty_percent" 1 488 "void(int16 percent)" `494 
v L "stream" 1 489 "int8" `497 
v L "percent" 1 489 "int16" `498 
f G "pwm_set_duty_percent" 1 489 "void(int8 stream,int16 percent)" `496 
v L "frequency" 1 490 "int32" `500 
f B "pwm_set_frequency" 1 490 "void(int32 frequency)" `499 
v L "stream" 1 491 "int8" `502 
v L "frequency" 1 491 "int32" `503 
f G "pwm_set_frequency" 1 491 "void(int8 stream,int32 frequency)" `501  "#use capture() Prototypes:"
f B "get_capture_time" 1 494 "int16()" `504 
v L "stream" 1 495 "int8" `506 
f G "get_capture_time" 1 495 "int16(int8 stream)" `505 
f B "get_capture_event" 1 496 "int8()" `507 
v L "stream" 1 497 "int8" `509 
f G "get_capture_event" 1 497 "int8(int8 stream)" `508  "Enviroment Prototypes:"
c L "get_capture_event" 1 5 2 "FUNCTION"
v L "address" 1 510 "int16" `511 
f B "goto_address" 1 510 "void(int16 address)" `510 
v L "label" 1 511 "int16" `513 
f B "label_address" 1 511 "int16(int16 label)" `512  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 516 "int16" `514 
v L "address" 1 521 "__EEADDRESS__" `516 
f B "read_eeprom" 1 521 "int8(__EEADDRESS__ address)" `515 
v L "address" 1 522 "__EEADDRESS__" `518 
v L "value" 1 522 "int8" `519 
f B "write_eeprom" 1 522 "void(__EEADDRESS__ address,int8 value)" `517  "INT"
c L "write_eeprom" 1 5 4 "FUNCTION"
v L "interrupt" 1 529 "int32" `521 
f B "enable_interrupts" 1 529 "void(int32 interrupt)" `520 
v L "interrupt" 1 530 "int32" `523 
f B "disable_interrupts" 1 530 "void(int32 interrupt)" `522 
v L "interrupt" 1 531 "int32" `525 
f B "clear_interrupt" 1 531 "void(int32 interrupt)" `524 
v L "interrupt" 1 532 "int32" `527 
f B "interrupt_active" 1 532 "int8(int32 interrupt)" `526 
v L "source" 1 533 "int8" `529 
v L "edge" 1 533 "int8" `530 
f B "ext_int_edge" 1 533 "void(int8 source,int8 edge)" `528 
v L "address" 1 534 "int16" `532 
f B "jump_to_irs" 1 534 "void(int16 address)" `531  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 536 "0x40"
d G "H_TO_L" 1 537 "0"
d G "GLOBAL" 1 539 "0x0BC0"
d G "PERIPH" 1 540 "0x0B40"
d G "INT_RTCC" 1 541 "0x000B20"
d G "INT_EXT_L2H" 1 542 "0x50000B10"
d G "INT_EXT_H2L" 1 543 "0x60000B10"
d G "INT_EXT" 1 544 "0x000B10"
d G "INT_AD" 1 545 "0x008C40"
d G "INT_TIMER1" 1 546 "0x008C01"
d G "INT_TIMER2" 1 547 "0x008C02"
d G "INT_TIMER0" 1 548 "0x000B20"
d G "INT_EEPROM" 1 549 "0x008C80"
d G "INT_COMP" 1 550 "0x008C08"
d G "INT_RA" 1 551 "0x00FF0B08"
d G "INT_CCP1" 1 552 "0x008C20"
d G "INT_OSC_FAIL" 1 553 "0x008C04"
d G "INT_RA0" 1 554 "0x0010B08"
d G "INT_RA1" 1 555 "0x0020B08"
d G "INT_RA2" 1 556 "0x0040B08"
d G "INT_RA3" 1 557 "0x0080B08"
d G "INT_RA4" 1 558 "0x0100B08"
d G "INT_RA5" 1 559 "0x0200B08"
D G "EEPROM_SDA" 2 40 "PIN_A5"
D G "EEPROM_SCL" 2 41 "PIN_A4"
D G "EEPROM_ADDRESS" 2 48 "long int"
D G "EEPROM_SIZE" 2 49 "1024"
F G "init_ext_eeprom" 2 51 "void()" `546 
F G "ext_eeprom_ready" 2 56 "int8()" `547 
V L "ack" 2 57 "int1" `548 
C L "ext_eeprom_ready" 2 2 1 "FUNCTION"
C L "ext_eeprom_ready" 2 2 1 "FUNCTION"
V L "address" 2 64 "int16" `550 
V L "data" 2 64 "int8" `551 
F G "write_ext_eeprom" 2 64 "void(int16 address,int8 data)" `549 
V L "address" 2 74 "int16" `553 
F G "read_ext_eeprom" 2 74 "int8(int16 address)" `552 
V L "data" 2 75 "int8" `554 
F G "MAIN" 0 8 "void()" `555 
V L "chr" 0 9 "int8" `556 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep_ulpwu" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "input_a" 0 0
F B "set_tris_a" 1 0
F B "get_tris_a" 0 0
F B "input_change_a" 0 0
F B "port_a_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_oscillator" 0 2
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
