CCS PCH C Compiler, Version 4.114, 93460303               06-mai-13 15:25

               Filename: D:\SkyDrive\Eletronica\PROJETOS PIC CCS\SONAR HC-SR04\18F4550\index.lst

               ROM used: 3120 bytes (10%)
                         Largest free fragment is 29648
               RAM used: 19 (1%) at main() level
                         41 (2%) worst case
               Stack:    6 locations

*
0000:  GOTO   0ACC
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=8 
.................... #use delay(clock=48000000) 
*
022C:  MOVLW  01
022E:  SUBWF  0F,F
0230:  BNC   024A
0232:  CLRF   FEA
0234:  MOVLW  0F
0236:  MOVWF  FE9
0238:  MOVF   FEF,W
023A:  BZ    024A
023C:  MOVLW  02
023E:  MOVWF  00
0240:  DECFSZ 00,F
0242:  BRA    0240
0244:  BRA    0246
0246:  DECFSZ FEF,F
0248:  BRA    023C
024A:  RETLW  00
*
0274:  CLRF   FEA
0276:  MOVLW  10
0278:  MOVWF  FE9
027A:  MOVF   FEF,W
027C:  BZ    029A
027E:  MOVLW  0F
0280:  MOVWF  01
0282:  CLRF   00
0284:  DECFSZ 00,F
0286:  BRA    0284
0288:  DECFSZ 01,F
028A:  BRA    0282
028C:  MOVLW  8F
028E:  MOVWF  00
0290:  DECFSZ 00,F
0292:  BRA    0290
0294:  NOP   
0296:  DECFSZ FEF,F
0298:  BRA    027E
029A:  RETLW  00
.................... #fuses HSPLL, PLL4, CPUDIV1, PUT, NOWDT, NOBROWNOUT, NOLVP 
.................... #include "HMF6598SYH-PY.c" 
.................... /*const BYTE TEXT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE  01\ 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x00, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x00, // / 
....................                          0x3E, 0x51, 0x49, 0x3e, 0x00, // 0      17 
....................                          0x04, 0x02, 0x7F, 0x00, 0x00, // 1 
....................                          0x00, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x00, 0x41, 0x49, 0x49, 0x36, // 3      20 
....................                          0x18, 0x14, 0x12, 0x7F, 0x00, // 4 
....................                          0x00, 0x27, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x32, 0x00, // 6      23 
....................                          0x00, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x36, 0x00, // 8 
....................                          0x26, 0x49, 0x49, 0x3e, 0x00, // 9      26 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x00, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x7e, 0x00, // A      34 
....................                          0x7F, 0x49, 0x49, 0x36, 0x00, // B 
....................                          0x3E, 0x41, 0x41, 0x22, 0x00, // C 
....................                          0x7F, 0x41, 0x41, 0x3e, 0x00, // D      37 
....................                          0x7F, 0x49, 0x49, 0x41, 0x00, // E 
....................                          0x7F, 0x09, 0x09, 0x01, 0x00, // F 
....................                          0x3E, 0x41, 0x49, 0x3a, 0x00, // G      40 
....................                          0x7F, 0x08, 0x08, 0x7f, 0x00, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x3f, 0x00, // J      43 
....................                          0x7F, 0x08, 0x14, 0x63, 0x00, // K 
....................                          0x7F, 0x40, 0x40, 0x00, 0x00, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M      46 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x3e, 0x00, // O 
....................                          0x7F, 0x09, 0x09, 0x06, 0x00, // P      49 
....................                          0x1E, 0x21, 0x21, 0x5e, 0x00, // Q 
....................                          0x7F, 0x09, 0x09, 0x76, 0x00};// R      51 
....................  
.................... const BYTE TEXT2[44][5]={0x26, 0x49, 0x49, 0x32, 0x00, // S 
....................                          0x00, 0x01, 0x7F, 0x01, 0x00, // T 
....................                          0x3F, 0x40, 0x40, 0x3f, 0x00, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x47, 0x00, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x00, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          //0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x38, 0x44, 0x44, 0x7c, 0x00,  // a  
....................                          0x7F, 0x44, 0x44, 0x38, 0x00, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x00, // c 
....................                          0x38, 0x44, 0x44, 0x7f, 0x00, // d 
....................                          0x38, 0x54, 0x54, 0x18, 0x00, // e 
....................                          0x00, 0x04, 0x7E, 0x05, 0x00, // f 
....................                          0x08, 0x54, 0x54, 0x3c, 0x00, // g 
....................                          0x7F, 0x08, 0x04, 0x78, 0x00, // h 
....................                          0x00, 0x00, 0x7a, 0x00, 0x00, // i 
....................                          0x20, 0x00, 0x44, 0x3D, 0x00, // j 
....................                          0x7e, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x04, 0x04, 0x78, 0x00, // n 
....................                          0x38, 0x44, 0x44, 0x38, 0x00, // o 
....................                          0x7C, 0x14, 0x14, 0x08, 0x00, // p 
....................                          0x08, 0x14, 0x14, 0x7c, 0x00, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x00, // r 
....................                          0x08, 0x54, 0x54, 0x20, 0x00, // s 
....................                          0x00, 0x04, 0x3F, 0x44, 0x00, // t 
....................                          0x00, 0x3c, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x3c, 0x00, // y 
....................                          0x00, 0x64, 0x54, 0x4C, 0x00, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
....................  
.................... */ 
....................  
.................... const BYTE TEXT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE  01 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x00, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x00, // / 
....................                          0x3E, 0x51, 0x49, 0x3e, 0x00, // 0      17 
....................                          0x04, 0x02, 0x7F, 0x00, 0x00, // 1 
....................                          0x00, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x41, 0x49, 0x49, 0x36, 0x00, // 3      20 
....................                          0x18, 0x14, 0x12, 0x7F, 0x00, // 4 
....................                          0x27, 0x45, 0x45, 0x39, 0x00, // 5 
....................                          0x3E, 0x49, 0x49, 0x32, 0x00, // 6      23 
....................                          0x71, 0x09, 0x09, 0x07, 0x00,  // 7 
....................                          0x36, 0x49, 0x49, 0x36, 0x00, // 8 
....................                          0x26, 0x49, 0x49, 0x3e, 0x00, // 9      26 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x00, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x7e, 0x00, 0x00, // A      34 
....................                          0x7F, 0x49, 0x36, 0x00, 0x00, // B 
....................                          0x3E, 0x41, 0x22, 0x00, 0x00, // C 
....................                          0x7F, 0x41, 0x3e, 0x00, 0x00, // D      37 
....................                          0x7F, 0x49, 0x41, 0x00, 0x00, // E 
....................                          0x7F, 0x09, 0x01, 0x00, 0x00, // F 
....................                          0x3E, 0x41, 0x49, 0x3a, 0x00, // G      40 
....................                          0x7F, 0x08, 0x7f, 0x00, 0x00, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x3f, 0x00, 0x00, // J      43 
....................                          0x7F, 0x08, 0x14, 0x63, 0x00, // K 
....................                          0x7F, 0x40, 0x40, 0x00, 0x00, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M      46 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x3e, 0x00, 0x00, // O 
....................                          0x7F, 0x09, 0x06, 0x00, 0x00, // P      49 
....................                          0x1E, 0x21, 0x21, 0x5e, 0x00, // Q 
....................                          0x7F, 0x09, 0x76, 0x00, 0x00};// R      51 
....................  
.................... const BYTE TEXT2[44][5]={0x26, 0x49, 0x32, 0x00, 0x00, // S 
....................                          0x00, 0x01, 0x7F, 0x01, 0x00, // T 
....................                          0x3F, 0x40, 0x3f, 0x00, 0x00, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x47, 0x00, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x00, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          //0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x38, 0x44, 0x44, 0x7c, 0x00,  // a  
....................                          0x7F, 0x44, 0x44, 0x38, 0x00, // b 
....................                          0x38, 0x44, 0x44, 0x00, 0x00, // c 
....................                          0x38, 0x44, 0x44, 0x7f, 0x00, // d 
....................                          0x38, 0x54, 0x54, 0x18, 0x00, // e 
....................                          0x00, 0x04, 0x7E, 0x05, 0x00, // f 
....................                          0x08, 0x54, 0x54, 0x3c, 0x00, // g 
....................                          0x7F, 0x04, 0x78, 0x00, 0x00, // h 
....................                          0x00, 0x00, 0x7a, 0x00, 0x00, // i 
....................                          0x20, 0x00, 0x44, 0x3D, 0x00, // j 
....................                          0x7e, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x04, 0x78, 0x00, 0x00, // n 
....................                          0x38, 0x44, 0x38, 0x00, 0x00, // o 
....................                          0x7C, 0x14, 0x14, 0x08, 0x00, // p 
....................                          0x08, 0x14, 0x14, 0x7c, 0x00, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x00, // r 
....................                          0x08, 0x54, 0x54, 0x20, 0x00, // s 
....................                          0x00, 0x04, 0x3F, 0x44, 0x00, // t 
....................                          0x3c, 0x40, 0x7c, 0x00, 0x00, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x3c, 0x00, 0x00, // y 
....................                          0x00, 0x64, 0x54, 0x4C, 0x00, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
....................  
.................... #define HMF6598_RS    pin_A0 
.................... #define HMF6598_RES   pin_A1 
.................... #define HMF6598_CS1   pin_A2 
.................... #define HMF6598_RD    pin_A3 
.................... #define HMF6598_WR    pin_A4 
....................  
.................... #define ON   1 
.................... #define OFF  0 
....................  
.................... int8 CurrentLine = 0; 
.................... int8 QuantChrLine = 0; 
.................... int8 OffsetX = 0; 
....................  
.................... void    HMF6598_InitLcd(void); 
.................... void    HMF6598_Write_command(char byte_command); 
.................... void    HMF6598_Write_data(char byte_data); 
.................... char    HMF6598_Read_data(); 
.................... void    HMF6598_Gotoxy(int8 x, int y); 
.................... void    HMF6598_Printchar(char cvar); 
.................... void    HMF6598_PutPixel(int8 x,int8 y, int1 COLOR); 
.................... void    HMF6598_OutPort(char byteDC); 
.................... void    clear_screen(void); 
.................... void    newLine(void); 
.................... void    HMF6598_circle(int x, int y, int radius, int1 fill, int1 COLOR); 
.................... void    HMF6598_line(int x1, int y1, int x2, int y2, int1 COLOR); 
....................  
.................... void    HMF6598_InitLcd(void){ 
....................     
....................    output_low(HMF6598_CS1); // Chip Enabled 
*
0368:  BCF    F92.2
036A:  BCF    F89.2
....................    output_low(HMF6598_RES); 
036C:  BCF    F92.1
036E:  BCF    F89.1
....................    delay_us(200); 
0370:  MOVLW  C8
0372:  MOVWF  0F
0374:  RCALL  022C
....................    output_high(HMF6598_RES);  
0376:  BCF    F92.1
0378:  BSF    F89.1
....................    delay_us(200);    
037A:  MOVLW  C8
037C:  MOVWF  0F
037E:  RCALL  022C
....................  
....................    HMF6598_Write_command(0xc8);   // Duty = 65    
0380:  MOVLW  C8
0382:  MOVWF  24
0384:  RCALL  0268
....................    HMF6598_Write_command(0xa3);   // BIAS 1/9 
0386:  MOVLW  A3
0388:  MOVWF  24
038A:  RCALL  0268
....................    HMF6598_Write_command(0xa0);   // ADC Select 
038C:  MOVLW  A0
038E:  MOVWF  24
0390:  RCALL  0268
....................    HMF6598_Write_command(0xa6);   // Normal display 0xa6:  Reverse Display :0xa7 
0392:  MOVLW  A6
0394:  MOVWF  24
0396:  RCALL  0268
....................    HMF6598_Write_command(0x2c);   //---------------------------------------------  
0398:  MOVLW  2C
039A:  MOVWF  24
039C:  RCALL  0268
....................    delay_ms(3);                   // 
039E:  MOVLW  03
03A0:  MOVWF  10
03A2:  RCALL  0274
....................    HMF6598_Write_command(0x2e);   // Power Control Set VR, VC, VF  
03A4:  MOVLW  2E
03A6:  MOVWF  24
03A8:  RCALL  0268
....................    delay_ms(3);                   // 
03AA:  MOVLW  03
03AC:  MOVWF  10
03AE:  RCALL  0274
....................    HMF6598_Write_command(0x2f);   //--------------------------------------------- 
03B0:  MOVLW  2F
03B2:  MOVWF  24
03B4:  RCALL  0268
....................    HMF6598_Write_command(0x20);   // 1+Rb/Ra Ratio    
03B6:  MOVLW  20
03B8:  MOVWF  24
03BA:  RCALL  0268
....................    HMF6598_Write_command(0x40);   // EVER register Set    
03BC:  MOVLW  40
03BE:  MOVWF  24
03C0:  RCALL  0268
....................     
....................    //Set Brightness   
....................    HMF6598_Write_command(0x81);  
03C2:  MOVLW  81
03C4:  MOVWF  24
03C6:  RCALL  0268
....................    HMF6598_Write_command(0x32); 
03C8:  MOVLW  32
03CA:  MOVWF  24
03CC:  RCALL  0268
....................     
....................    HMF6598_Write_command(0xe0);   // Set Modify Read  0xee to cancel / 0xe0 to activate 
03CE:  MOVLW  E0
03D0:  MOVWF  24
03D2:  RCALL  0268
....................  
....................    clear_screen(); 
03D4:  BRA    0338
....................    HMF6598_Write_command(0xaf);   // Display ON 
03D6:  MOVLW  AF
03D8:  MOVWF  24
03DA:  RCALL  0268
.................... } 
03DC:  GOTO   0AE8 (RETURN)
....................  
.................... void HMF6598_OutPort(char byteDC){ 
....................   set_tris_b(0x00); 
*
024C:  MOVLW  00
024E:  MOVWF  F93
....................   output_low(HMF6598_CS1); 
0250:  BCF    F92.2
0252:  BCF    F89.2
....................   output_high(HMF6598_RD);  
0254:  BCF    F92.3
0256:  BSF    F89.3
....................   output_low(HMF6598_WR);   
0258:  BCF    F92.4
025A:  BCF    F89.4
....................   output_b(byteDC); 
025C:  CLRF   F93
025E:  MOVFF  25,F8A
....................   output_high(HMF6598_CS1);     
0262:  BCF    F92.2
0264:  BSF    F89.2
.................... } 
0266:  RETLW  00
.................... void    HMF6598_Write_command(char byte_command){ 
....................   output_low(HMF6598_RS);          // Write Command Enabled 
0268:  BCF    F92.0
026A:  BCF    F89.0
....................   HMF6598_OutPort(byte_command); 
026C:  MOVFF  24,25
0270:  RCALL  024C
.................... } 
0272:  RETLW  00
.................... void    HMF6598_Write_data(char byte_data){ 
....................   output_high(HMF6598_RS);         // Write data Enabled 
*
0320:  BCF    F92.0
0322:  BSF    F89.0
....................   HMF6598_OutPort(byte_data); 
0324:  MOVFF  1F,25
0328:  RCALL  024C
....................   OffsetX++; 
032A:  INCF   06,F
....................   HMF6598_Gotoxy(OffsetX,CurrentLine); 
032C:  MOVFF  06,20
0330:  MOVFF  04,21
0334:  RCALL  02C4
.................... } 
0336:  RETLW  00
....................  
.................... char    HMF6598_Read_data(){ 
....................  
.................... /*  set_tris_b(0xff); 
....................   output_low(HMF6598_CS1); 
....................   output_high(HMF6598_RS); 
....................   output_low(HMF6598_RD); 
....................   output_high(HMF6598_WR); 
....................   output_high(HMF6598_CS1); 
....................   delay_us(1); 
....................    
....................   output_low(HMF6598_CS1); 
....................   output_high(HMF6598_RS); 
....................   output_low(HMF6598_RD); 
....................   output_high(HMF6598_WR); 
....................   return input_b(); 
....................   output_high(HMF6598_CS1);    */  
....................    
....................   set_tris_b(0xff);     
....................   output_low(HMF6598_CS1); 
....................   output_high(HMF6598_WR); 
....................   output_high(HMF6598_RS); 
....................   output_low(HMF6598_RD); 
....................   output_high(HMF6598_CS1); 
....................   delay_us(1); 
....................   output_low(HMF6598_CS1); 
....................   return input_b(); 
....................   output_high(HMF6598_CS1); 
.................... } 
....................  
.................... void newLine(){ 
....................   if(CurrentLine < 7){  // New Line Command 
*
0776:  MOVF   04,W
0778:  SUBLW  06
077A:  BNC   0796
....................       HMF6598_Write_command((CurrentLine+1)|0xb0);  // Set Page Address to 0 (0 a 7) 
077C:  MOVLW  01
077E:  ADDWF  04,W
0780:  IORLW  B0
0782:  MOVWF  1E
0784:  MOVWF  24
0786:  RCALL  0268
....................       HMF6598_Write_command(0x00);  // Set LSB for index Column 
0788:  CLRF   24
078A:  RCALL  0268
....................       HMF6598_Write_command(0x10);  // Set MSB for index Column    
078C:  MOVLW  10
078E:  MOVWF  24
0790:  RCALL  0268
....................       CurrentLine+=1; 
0792:  MOVLW  01
0794:  ADDWF  04,F
....................   } 
....................   QuantChrLine = 1; 
0796:  MOVLW  01
0798:  MOVWF  05
....................   OffsetX = 0; 
079A:  CLRF   06
.................... } 
079C:  GOTO   07AC (RETURN)
.................... void clear_screen(void) { 
....................    int p, c; 
....................    for(p = 0; p < 8; p++) { 
*
0338:  CLRF   0F
033A:  MOVF   0F,W
033C:  SUBLW  07
033E:  BNC   035E
....................       for(c = 0; c < 128; c++) { 
0340:  CLRF   10
0342:  MOVF   10,W
0344:  SUBLW  7F
0346:  BNC   035A
....................          HMF6598_Gotoxy(c,p); 
0348:  MOVFF  10,20
034C:  MOVFF  0F,21
0350:  RCALL  02C4
....................          HMF6598_Write_data(0x00); 
0352:  CLRF   1F
0354:  RCALL  0320
....................       } 
0356:  INCF   10,F
0358:  BRA    0342
....................    } 
035A:  INCF   0F,F
035C:  BRA    033A
....................    HMF6598_Gotoxy(0,0);    
035E:  CLRF   20
0360:  CLRF   21
0362:  RCALL  02C4
.................... } 
0364:  GOTO   03D6 (RETURN)
.................... void    HMF6598_Gotoxy(int x, int y){ 
*
02C4:  CLRF   22
....................    int8 OffsetChr = 0; 
....................     
....................    HMF6598_Write_command(0xb0 | y); 
02C6:  MOVF   21,W
02C8:  IORLW  B0
02CA:  MOVWF  23
02CC:  MOVWF  24
02CE:  RCALL  0268
....................    HMF6598_Write_command((0x00 | x) & 0x0f); 
02D0:  MOVF   20,W
02D2:  ANDLW  0F
02D4:  MOVWF  23
02D6:  MOVWF  24
02D8:  RCALL  0268
....................    HMF6598_Write_command(0x10|(x>>4)); 
02DA:  SWAPF  20,W
02DC:  MOVWF  00
02DE:  MOVLW  0F
02E0:  ANDWF  00,F
02E2:  MOVF   00,W
02E4:  IORLW  10
02E6:  MOVWF  23
02E8:  MOVWF  24
02EA:  RCALL  0268
....................     
....................    OffsetChr = (x+1)/6; 
02EC:  MOVLW  01
02EE:  ADDWF  20,W
02F0:  MOVWF  24
02F2:  MOVWF  25
02F4:  MOVLW  06
02F6:  MOVWF  26
02F8:  RCALL  029C
02FA:  MOVFF  01,22
....................    if((x+1)%6) 
02FE:  MOVLW  01
0300:  ADDWF  20,W
0302:  MOVWF  24
0304:  MOVWF  25
0306:  MOVLW  06
0308:  MOVWF  26
030A:  RCALL  029C
030C:  MOVF   00,W
030E:  BZ    0312
....................       OffsetChr++;    
0310:  INCF   22,F
....................    CurrentLine = y; 
0312:  MOVFF  21,04
....................    QuantChrLine = OffsetChr; 
0316:  MOVFF  22,05
....................    OffsetX = x; 
031A:  MOVFF  20,06
.................... } 
031E:  RETLW  00
.................... void    HMF6598_Printchar(char cvar){ 
....................    int i; 
....................    if (QuantChrLine > 21)   
*
07A0:  MOVF   05,W
07A2:  SUBLW  15
07A4:  BC    07AA
....................        newLine();  
07A6:  BRA    0776
....................    else 
07A8:  BRA    07AC
....................        QuantChrLine++;     
07AA:  INCF   05,F
....................    if(cvar == 0x20) 
07AC:  MOVF   1C,W
07AE:  SUBLW  20
07B0:  BNZ   07C4
....................       for(i=0;i<2;i++) 
07B2:  CLRF   1D
07B4:  MOVF   1D,W
07B6:  SUBLW  01
07B8:  BNC   07C2
....................          HMF6598_Write_data(0x00); 
07BA:  CLRF   1F
07BC:  RCALL  0320
07BE:  INCF   1D,F
07C0:  BRA    07B4
....................    else{ 
07C2:  BRA    0862
....................       for(i=0;i<5;i++){ 
07C4:  CLRF   1D
07C6:  MOVF   1D,W
07C8:  SUBLW  04
07CA:  BNC   0862
....................          if (cvar < 0x53){ 
07CC:  MOVF   1C,W
07CE:  SUBLW  52
07D0:  BNC   081A
....................             if(TEXT[cvar-0x20][i])          
07D2:  MOVLW  20
07D4:  SUBWF  1C,W
07D6:  MULLW  05
07D8:  MOVF   FF3,W
07DA:  CLRF   1F
07DC:  MOVWF  1E
07DE:  CLRF   03
07E0:  MOVF   1D,W
07E2:  ADDWF  1E,W
07E4:  MOVWF  01
07E6:  MOVF   1F,W
07E8:  ADDWFC 03,F
07EA:  MOVF   01,W
07EC:  RCALL  0004
07EE:  MOVWF  01
07F0:  MOVF   01,F
07F2:  BZ    0818
....................                HMF6598_Write_data(TEXT[cvar-0x20][i]);       
07F4:  MOVLW  20
07F6:  SUBWF  1C,W
07F8:  MULLW  05
07FA:  MOVF   FF3,W
07FC:  CLRF   1F
07FE:  MOVWF  1E
0800:  CLRF   03
0802:  MOVF   1D,W
0804:  ADDWF  1E,W
0806:  MOVWF  01
0808:  MOVF   1F,W
080A:  ADDWFC 03,F
080C:  MOVF   01,W
080E:  CALL   0004
0812:  MOVWF  1E
0814:  MOVWF  1F
0816:  RCALL  0320
....................          } 
....................          else { 
0818:  BRA    085E
....................             if(TEXT2[cvar-0x53][i])                
081A:  MOVLW  53
081C:  SUBWF  1C,W
081E:  MULLW  05
0820:  MOVF   FF3,W
0822:  CLRF   1F
0824:  MOVWF  1E
0826:  CLRF   03
0828:  MOVF   1D,W
082A:  ADDWF  1E,W
082C:  MOVWF  01
082E:  MOVF   1F,W
0830:  ADDWFC 03,F
0832:  MOVF   01,W
0834:  RCALL  0114
0836:  MOVWF  01
0838:  MOVF   01,F
083A:  BZ    085E
....................                HMF6598_Write_data(TEXT2[cvar-0x53][i]);                
083C:  MOVLW  53
083E:  SUBWF  1C,W
0840:  MULLW  05
0842:  MOVF   FF3,W
0844:  CLRF   1F
0846:  MOVWF  1E
0848:  CLRF   03
084A:  MOVF   1D,W
084C:  ADDWF  1E,W
084E:  MOVWF  01
0850:  MOVF   1F,W
0852:  ADDWFC 03,F
0854:  MOVF   01,W
0856:  RCALL  0114
0858:  MOVWF  1E
085A:  MOVWF  1F
085C:  RCALL  0320
....................          } 
....................       } 
085E:  INCF   1D,F
0860:  BRA    07C6
....................    } 
....................    HMF6598_Write_data(0x00); 
0862:  CLRF   1F
0864:  RCALL  0320
.................... } 
0866:  RETLW  00
.................... void HMF6598_PutPixel(int x, int y, int1 COLOR){ 
....................    char BytePlot = 0, tempByte; 
....................    if((x > 127)||(y > 63)) 
....................       return; 
....................    BytePlot |= 1; 
....................    BytePlot<<=(y%8); 
....................    tempByte = BytePlot; 
....................    HMF6598_Gotoxy(x,(y/8)); 
....................    BytePlot|=HMF6598_Read_data(); 
....................    if(COLOR == OFF) 
....................       BytePlot-=tempByte; 
....................    HMF6598_Write_data(BytePlot); 
.................... } 
....................  
.................... void HMF6598_circle(int x, int y, int radius, int1 fill, int1 COLOR){ 
....................    signed int a, b, P; 
....................    a = 0; 
....................    b = radius; 
....................    P = 1 - radius; 
....................    do{ 
....................       if(fill){ 
....................          HMF6598_line(x-a, y+b, x+a, y+b, color); 
....................          HMF6598_line(x-a, y-b, x+a, y-b, color); 
....................          HMF6598_line(x-b, y+a, x+b, y+a, color); 
....................          HMF6598_line(x-b, y-a, x+b, y-a, color); 
....................       } 
....................       else{ 
....................          HMF6598_PutPixel(a+x, b+y, color); 
....................          HMF6598_PutPixel(b+x, a+y, color); 
....................          HMF6598_PutPixel(x-a, b+y, color); 
....................          HMF6598_PutPixel(x-b, a+y, color); 
....................          HMF6598_PutPixel(b+x, y-a, color); 
....................          HMF6598_PutPixel(a+x, y-b, color); 
....................          HMF6598_PutPixel(x-a, y-b, color); 
....................          HMF6598_PutPixel(x-b, y-a, color); 
....................       } 
....................       if(P < 0) 
....................          P+= 3 + 2*a++; 
....................       else 
....................          P+= 5 + 2*(a++ - b--); 
....................     } while(a <= b); 
.................... } 
....................  
.................... void HMF6598_line(int x1, int y1, int x2, int y2, int1 COLOR){ 
....................    signed int  x, y, addx, addy, dx, dy; 
....................    signed long P; 
....................    int i; 
....................    dx = abs((signed int)(x2 - x1)); 
....................    dy = abs((signed int)(y2 - y1)); 
....................    x = x1; 
....................    y = y1; 
....................  
....................    if(x1 > x2) 
....................       addx = -1; 
....................    else 
....................       addx = 1; 
....................    if(y1 > y2) 
....................       addy = -1; 
....................    else 
....................       addy = 1; 
....................    if(dx >= dy){ 
....................       P = 2*dy - dx; 
....................       for(i=0; i<=dx; ++i){ 
....................          HMF6598_PutPixel(x, y, COLOR); 
....................          if(P < 0){ 
....................             P += 2*dy; 
....................             x += addx; 
....................          } 
....................          else{ 
....................             P += 2*dy - 2*dx; 
....................             x += addx; 
....................             y += addy; 
....................          } 
....................       } 
....................    } 
....................    else{ 
....................       P = 2*dx - dy; 
....................       for(i=0; i<=dy; ++i){ 
....................          HMF6598_PutPixel(x, y, COLOR); 
....................  
....................          if(P < 0){ 
....................             P += 2*dx; 
....................             y += addy; 
....................          } 
....................          else{ 
....................             P += 2*dx - 2*dy; 
....................             x += addx; 
....................             y += addy; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... float distancia, tempo; 
....................    #define TRIG pin_D7  
....................    #define ECHO pin_D5  
....................  
.................... void main() {  
*
0ACC:  CLRF   FF8
0ACE:  BCF    FD0.7
0AD0:  CLRF   FEA
0AD2:  CLRF   FE9
0AD4:  CLRF   04
0AD6:  CLRF   05
0AD8:  CLRF   06
0ADA:  MOVF   FC1,W
0ADC:  ANDLW  C0
0ADE:  IORLW  0F
0AE0:  MOVWF  FC1
0AE2:  MOVLW  07
0AE4:  MOVWF  FB4
....................    HMF6598_InitLcd(); 
0AE6:  BRA    0368
....................    delay_ms(1000);                              // Boot-up delay, for troubleshooting  
0AE8:  MOVLW  04
0AEA:  MOVWF  0F
0AEC:  MOVLW  FA
0AEE:  MOVWF  10
0AF0:  CALL   0274
0AF4:  DECFSZ 0F,F
0AF6:  BRA    0AEC
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);     // initiating timer  
0AF8:  MOVLW  B5
0AFA:  MOVWF  FCD
....................  
....................    while(true){  
....................       output_high(trig);                         // ping the sonar  
0AFC:  BCF    F95.7
0AFE:  BSF    F8C.7
....................       delay_us(20);                            // sending 20us pulse  
0B00:  MOVLW  4F
0B02:  MOVWF  00
0B04:  DECFSZ 00,F
0B06:  BRA    0B04
0B08:  BRA    0B0A
....................       output_low(trig);  
0B0A:  BCF    F95.7
0B0C:  BCF    F8C.7
....................       while(!input(ECHO)){}                       // wait for high state of echo pin  
0B0E:  BSF    F95.5
0B10:  BTFSC  F83.5
0B12:  BRA    0B16
0B14:  BRA    0B0E
....................       set_timer1(0);                           // setting timer zero  
0B16:  CLRF   FCF
0B18:  CLRF   FCE
....................        
....................       while(input(ECHO)){}                       // Wait for high state of echo pin 
0B1A:  BSF    F95.5
0B1C:  BTFSS  F83.5
0B1E:  BRA    0B22
0B20:  BRA    0B1A
....................         
....................       tempo=get_timer1();                       // Getting the time  
0B22:  MOVF   FCE,W
0B24:  MOVFF  FCF,03
0B28:  MOVWF  0F
0B2A:  MOVFF  FCF,10
0B2E:  BRA    03E0
0B30:  MOVFF  03,0E
0B34:  MOVFF  02,0D
0B38:  MOVFF  01,0C
0B3C:  MOVFF  00,0B
....................       distancia=tempo*0.0149 + 1.093 ;            // Calculating the distance                          
0B40:  MOVFF  0E,1F
0B44:  MOVFF  0D,1E
0B48:  MOVFF  0C,1D
0B4C:  MOVFF  0B,1C
0B50:  MOVLW  21
0B52:  MOVWF  23
0B54:  MOVLW  1F
0B56:  MOVWF  22
0B58:  MOVLW  74
0B5A:  MOVWF  21
0B5C:  MOVLW  78
0B5E:  MOVWF  20
0B60:  RCALL  0418
0B62:  MOVFF  00,0F
0B66:  MOVFF  01,10
0B6A:  MOVFF  02,11
0B6E:  MOVFF  03,12
0B72:  BCF    FD8.1
0B74:  MOVFF  03,16
0B78:  MOVFF  02,15
0B7C:  MOVFF  01,14
0B80:  MOVFF  00,13
0B84:  MOVLW  6D
0B86:  MOVWF  1A
0B88:  MOVLW  E7
0B8A:  MOVWF  19
0B8C:  MOVLW  0B
0B8E:  MOVWF  18
0B90:  MOVLW  7F
0B92:  MOVWF  17
0B94:  BRA    050A
0B96:  MOVFF  03,0A
0B9A:  MOVFF  02,09
0B9E:  MOVFF  01,08
0BA2:  MOVFF  00,07
....................        
....................       delay_ms(100);  
0BA6:  MOVLW  64
0BA8:  MOVWF  10
0BAA:  CALL   0274
....................        
....................       HMF6598_Gotoxy(0,0); 
0BAE:  CLRF   20
0BB0:  CLRF   21
0BB2:  CALL   02C4
....................       printf(HMF6598_Printchar, "Tempo :%f      ",tempo);       
0BB6:  MOVLW  00
0BB8:  MOVWF  FF6
0BBA:  MOVLW  02
0BBC:  MOVWF  FF7
0BBE:  MOVLW  07
0BC0:  MOVWF  0F
0BC2:  RCALL  0868
0BC4:  MOVLW  89
0BC6:  MOVWF  FE9
0BC8:  MOVFF  0E,12
0BCC:  MOVFF  0D,11
0BD0:  MOVFF  0C,10
0BD4:  MOVFF  0B,0F
0BD8:  MOVLW  02
0BDA:  MOVWF  13
0BDC:  RCALL  0954
0BDE:  MOVLW  09
0BE0:  MOVWF  FF6
0BE2:  MOVLW  02
0BE4:  MOVWF  FF7
0BE6:  MOVLW  06
0BE8:  MOVWF  0F
0BEA:  RCALL  0868
....................        
....................       HMF6598_Gotoxy(0,1); 
0BEC:  CLRF   20
0BEE:  MOVLW  01
0BF0:  MOVWF  21
0BF2:  CALL   02C4
....................       printf(HMF6598_Printchar, "Distancia = %2.2f cm       ",distancia);       
0BF6:  MOVLW  10
0BF8:  MOVWF  FF6
0BFA:  MOVLW  02
0BFC:  MOVWF  FF7
0BFE:  MOVLW  0C
0C00:  MOVWF  0F
0C02:  RCALL  0868
0C04:  MOVLW  89
0C06:  MOVWF  FE9
0C08:  MOVFF  0A,12
0C0C:  MOVFF  09,11
0C10:  MOVFF  08,10
0C14:  MOVFF  07,0F
0C18:  MOVLW  02
0C1A:  MOVWF  13
0C1C:  RCALL  0954
0C1E:  MOVLW  21
0C20:  MOVWF  FF6
0C22:  MOVLW  02
0C24:  MOVWF  FF7
0C26:  MOVLW  0A
0C28:  MOVWF  0F
0C2A:  RCALL  0868
....................    }  
0C2C:  BRA    0AFC
.................... }  
0C2E:  SLEEP 

Configuration Fuses:
   Word  1: CE23   PLL4 CPUDIV1 USBDIV HSPLL FCMEN IESO
   Word  2: 1E38   PUT NOBROWNOUT BORV20 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICPRT NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
