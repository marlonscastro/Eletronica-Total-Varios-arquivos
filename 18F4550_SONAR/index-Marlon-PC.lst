CCS PCH C Compiler, Version 4.114, 93460303               06-mai-13 15:09

               Filename: D:\SkyDrive\Eletronica\PROJETOS PIC CCS\SONAR HC-SR04\18F4550\index.lst

               ROM used: 2742 bytes (8%)
                         Largest free fragment is 30026
               RAM used: 15 (1%) at main() level
                         32 (2%) worst case
               Stack:    6 locations

*
0000:  GOTO   0974
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=8 
.................... #use delay(clock=48000000) 
*
022A:  MOVLW  01
022C:  SUBWF  0B,F
022E:  BNC   0248
0230:  CLRF   FEA
0232:  MOVLW  0B
0234:  MOVWF  FE9
0236:  MOVF   FEF,W
0238:  BZ    0248
023A:  MOVLW  02
023C:  MOVWF  00
023E:  DECFSZ 00,F
0240:  BRA    023E
0242:  BRA    0244
0244:  DECFSZ FEF,F
0246:  BRA    023A
0248:  RETLW  00
*
0272:  CLRF   FEA
0274:  MOVLW  0C
0276:  MOVWF  FE9
0278:  MOVF   FEF,W
027A:  BZ    0298
027C:  MOVLW  0F
027E:  MOVWF  01
0280:  CLRF   00
0282:  DECFSZ 00,F
0284:  BRA    0282
0286:  DECFSZ 01,F
0288:  BRA    0280
028A:  MOVLW  8F
028C:  MOVWF  00
028E:  DECFSZ 00,F
0290:  BRA    028E
0292:  NOP   
0294:  DECFSZ FEF,F
0296:  BRA    027C
0298:  RETLW  00
.................... #fuses HSPLL, PLL4, CPUDIV1, PUT, NOWDT, NOBROWNOUT, NOLVP 
.................... #include "HMF6598SYH-PY.c" 
.................... /*const BYTE TEXT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE  01\ 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x00, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x00, // / 
....................                          0x3E, 0x51, 0x49, 0x3e, 0x00, // 0      17 
....................                          0x04, 0x02, 0x7F, 0x00, 0x00, // 1 
....................                          0x00, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x00, 0x41, 0x49, 0x49, 0x36, // 3      20 
....................                          0x18, 0x14, 0x12, 0x7F, 0x00, // 4 
....................                          0x00, 0x27, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x32, 0x00, // 6      23 
....................                          0x00, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x36, 0x00, // 8 
....................                          0x26, 0x49, 0x49, 0x3e, 0x00, // 9      26 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x00, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x7e, 0x00, // A      34 
....................                          0x7F, 0x49, 0x49, 0x36, 0x00, // B 
....................                          0x3E, 0x41, 0x41, 0x22, 0x00, // C 
....................                          0x7F, 0x41, 0x41, 0x3e, 0x00, // D      37 
....................                          0x7F, 0x49, 0x49, 0x41, 0x00, // E 
....................                          0x7F, 0x09, 0x09, 0x01, 0x00, // F 
....................                          0x3E, 0x41, 0x49, 0x3a, 0x00, // G      40 
....................                          0x7F, 0x08, 0x08, 0x7f, 0x00, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x3f, 0x00, // J      43 
....................                          0x7F, 0x08, 0x14, 0x63, 0x00, // K 
....................                          0x7F, 0x40, 0x40, 0x00, 0x00, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M      46 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x3e, 0x00, // O 
....................                          0x7F, 0x09, 0x09, 0x06, 0x00, // P      49 
....................                          0x1E, 0x21, 0x21, 0x5e, 0x00, // Q 
....................                          0x7F, 0x09, 0x09, 0x76, 0x00};// R      51 
....................  
.................... const BYTE TEXT2[44][5]={0x26, 0x49, 0x49, 0x32, 0x00, // S 
....................                          0x00, 0x01, 0x7F, 0x01, 0x00, // T 
....................                          0x3F, 0x40, 0x40, 0x3f, 0x00, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x47, 0x00, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x00, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          //0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x38, 0x44, 0x44, 0x7c, 0x00,  // a  
....................                          0x7F, 0x44, 0x44, 0x38, 0x00, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x00, // c 
....................                          0x38, 0x44, 0x44, 0x7f, 0x00, // d 
....................                          0x38, 0x54, 0x54, 0x18, 0x00, // e 
....................                          0x00, 0x04, 0x7E, 0x05, 0x00, // f 
....................                          0x08, 0x54, 0x54, 0x3c, 0x00, // g 
....................                          0x7F, 0x08, 0x04, 0x78, 0x00, // h 
....................                          0x00, 0x00, 0x7a, 0x00, 0x00, // i 
....................                          0x20, 0x00, 0x44, 0x3D, 0x00, // j 
....................                          0x7e, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x04, 0x04, 0x78, 0x00, // n 
....................                          0x38, 0x44, 0x44, 0x38, 0x00, // o 
....................                          0x7C, 0x14, 0x14, 0x08, 0x00, // p 
....................                          0x08, 0x14, 0x14, 0x7c, 0x00, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x00, // r 
....................                          0x08, 0x54, 0x54, 0x20, 0x00, // s 
....................                          0x00, 0x04, 0x3F, 0x44, 0x00, // t 
....................                          0x00, 0x3c, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x3c, 0x00, // y 
....................                          0x00, 0x64, 0x54, 0x4C, 0x00, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
....................  
.................... */ 
....................  
.................... const BYTE TEXT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE  01 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x00, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x00, // / 
....................                          0x3E, 0x51, 0x49, 0x3e, 0x00, // 0      17 
....................                          0x04, 0x02, 0x7F, 0x00, 0x00, // 1 
....................                          0x00, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x41, 0x49, 0x49, 0x36, 0x00, // 3      20 
....................                          0x18, 0x14, 0x12, 0x7F, 0x00, // 4 
....................                          0x27, 0x45, 0x45, 0x39, 0x00, // 5 
....................                          0x3E, 0x49, 0x49, 0x32, 0x00, // 6      23 
....................                          0x71, 0x09, 0x09, 0x07, 0x00,  // 7 
....................                          0x36, 0x49, 0x49, 0x36, 0x00, // 8 
....................                          0x26, 0x49, 0x49, 0x3e, 0x00, // 9      26 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x00, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x7e, 0x00, 0x00, // A      34 
....................                          0x7F, 0x49, 0x36, 0x00, 0x00, // B 
....................                          0x3E, 0x41, 0x22, 0x00, 0x00, // C 
....................                          0x7F, 0x41, 0x3e, 0x00, 0x00, // D      37 
....................                          0x7F, 0x49, 0x41, 0x00, 0x00, // E 
....................                          0x7F, 0x09, 0x01, 0x00, 0x00, // F 
....................                          0x3E, 0x41, 0x49, 0x3a, 0x00, // G      40 
....................                          0x7F, 0x08, 0x7f, 0x00, 0x00, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x3f, 0x00, 0x00, // J      43 
....................                          0x7F, 0x08, 0x14, 0x63, 0x00, // K 
....................                          0x7F, 0x40, 0x40, 0x00, 0x00, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M      46 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x3e, 0x00, 0x00, // O 
....................                          0x7F, 0x09, 0x06, 0x00, 0x00, // P      49 
....................                          0x1E, 0x21, 0x21, 0x5e, 0x00, // Q 
....................                          0x7F, 0x09, 0x76, 0x00, 0x00};// R      51 
....................  
.................... const BYTE TEXT2[44][5]={0x26, 0x49, 0x32, 0x00, 0x00, // S 
....................                          0x00, 0x01, 0x7F, 0x01, 0x00, // T 
....................                          0x3F, 0x40, 0x3f, 0x00, 0x00, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x47, 0x00, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x00, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          //0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x38, 0x44, 0x44, 0x7c, 0x00,  // a  
....................                          0x7F, 0x44, 0x44, 0x38, 0x00, // b 
....................                          0x38, 0x44, 0x44, 0x00, 0x00, // c 
....................                          0x38, 0x44, 0x44, 0x7f, 0x00, // d 
....................                          0x38, 0x54, 0x54, 0x18, 0x00, // e 
....................                          0x00, 0x04, 0x7E, 0x05, 0x00, // f 
....................                          0x08, 0x54, 0x54, 0x3c, 0x00, // g 
....................                          0x7F, 0x04, 0x78, 0x00, 0x00, // h 
....................                          0x00, 0x00, 0x7a, 0x00, 0x00, // i 
....................                          0x20, 0x00, 0x44, 0x3D, 0x00, // j 
....................                          0x7e, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x04, 0x78, 0x00, 0x00, // n 
....................                          0x38, 0x44, 0x38, 0x00, 0x00, // o 
....................                          0x7C, 0x14, 0x14, 0x08, 0x00, // p 
....................                          0x08, 0x14, 0x14, 0x7c, 0x00, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x00, // r 
....................                          0x08, 0x54, 0x54, 0x20, 0x00, // s 
....................                          0x00, 0x04, 0x3F, 0x44, 0x00, // t 
....................                          0x3c, 0x40, 0x7c, 0x00, 0x00, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x3c, 0x00, 0x00, // y 
....................                          0x00, 0x64, 0x54, 0x4C, 0x00, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
....................  
.................... #define HMF6598_RS    pin_A0 
.................... #define HMF6598_RES   pin_A1 
.................... #define HMF6598_CS1   pin_A2 
.................... #define HMF6598_RD    pin_A3 
.................... #define HMF6598_WR    pin_A4 
....................  
.................... #define ON   1 
.................... #define OFF  0 
....................  
.................... int8 CurrentLine = 0; 
.................... int8 QuantChrLine = 0; 
.................... int8 OffsetX = 0; 
....................  
.................... void    HMF6598_InitLcd(void); 
.................... void    HMF6598_Write_command(char byte_command); 
.................... void    HMF6598_Write_data(char byte_data); 
.................... char    HMF6598_Read_data(); 
.................... void    HMF6598_Gotoxy(int8 x, int y); 
.................... void    HMF6598_Printchar(char cvar); 
.................... void    HMF6598_PutPixel(int8 x,int8 y, int1 COLOR); 
.................... void    HMF6598_OutPort(char byteDC); 
.................... void    clear_screen(void); 
.................... void    newLine(void); 
.................... void    HMF6598_circle(int x, int y, int radius, int1 fill, int1 COLOR); 
.................... void    HMF6598_line(int x1, int y1, int x2, int y2, int1 COLOR); 
....................  
.................... void    HMF6598_InitLcd(void){ 
....................     
....................    output_low(HMF6598_CS1); // Chip Enabled 
*
0366:  BCF    F92.2
0368:  BCF    F89.2
....................    output_low(HMF6598_RES); 
036A:  BCF    F92.1
036C:  BCF    F89.1
....................    delay_us(200); 
036E:  MOVLW  C8
0370:  MOVWF  0B
0372:  RCALL  022A
....................    output_high(HMF6598_RES);  
0374:  BCF    F92.1
0376:  BSF    F89.1
....................    delay_us(200);    
0378:  MOVLW  C8
037A:  MOVWF  0B
037C:  RCALL  022A
....................  
....................    HMF6598_Write_command(0xc8);   // Duty = 65    
037E:  MOVLW  C8
0380:  MOVWF  1C
0382:  RCALL  0266
....................    HMF6598_Write_command(0xa3);   // BIAS 1/9 
0384:  MOVLW  A3
0386:  MOVWF  1C
0388:  RCALL  0266
....................    HMF6598_Write_command(0xa0);   // ADC Select 
038A:  MOVLW  A0
038C:  MOVWF  1C
038E:  RCALL  0266
....................    HMF6598_Write_command(0xa6);   // Normal display 0xa6:  Reverse Display :0xa7 
0390:  MOVLW  A6
0392:  MOVWF  1C
0394:  RCALL  0266
....................    HMF6598_Write_command(0x2c);   //---------------------------------------------  
0396:  MOVLW  2C
0398:  MOVWF  1C
039A:  RCALL  0266
....................    delay_ms(3);                   // 
039C:  MOVLW  03
039E:  MOVWF  0C
03A0:  RCALL  0272
....................    HMF6598_Write_command(0x2e);   // Power Control Set VR, VC, VF  
03A2:  MOVLW  2E
03A4:  MOVWF  1C
03A6:  RCALL  0266
....................    delay_ms(3);                   // 
03A8:  MOVLW  03
03AA:  MOVWF  0C
03AC:  RCALL  0272
....................    HMF6598_Write_command(0x2f);   //--------------------------------------------- 
03AE:  MOVLW  2F
03B0:  MOVWF  1C
03B2:  RCALL  0266
....................    HMF6598_Write_command(0x20);   // 1+Rb/Ra Ratio    
03B4:  MOVLW  20
03B6:  MOVWF  1C
03B8:  RCALL  0266
....................    HMF6598_Write_command(0x40);   // EVER register Set    
03BA:  MOVLW  40
03BC:  MOVWF  1C
03BE:  RCALL  0266
....................     
....................    //Set Brightness   
....................    HMF6598_Write_command(0x81);  
03C0:  MOVLW  81
03C2:  MOVWF  1C
03C4:  RCALL  0266
....................    HMF6598_Write_command(0x32); 
03C6:  MOVLW  32
03C8:  MOVWF  1C
03CA:  RCALL  0266
....................     
....................    HMF6598_Write_command(0xe0);   // Set Modify Read  0xee to cancel / 0xe0 to activate 
03CC:  MOVLW  E0
03CE:  MOVWF  1C
03D0:  RCALL  0266
....................  
....................    clear_screen(); 
03D2:  BRA    0336
....................    HMF6598_Write_command(0xaf);   // Display ON 
03D4:  MOVLW  AF
03D6:  MOVWF  1C
03D8:  RCALL  0266
.................... } 
03DA:  GOTO   0990 (RETURN)
....................  
.................... void HMF6598_OutPort(char byteDC){ 
....................   set_tris_b(0x00); 
*
024A:  MOVLW  00
024C:  MOVWF  F93
....................   output_low(HMF6598_CS1); 
024E:  BCF    F92.2
0250:  BCF    F89.2
....................   output_high(HMF6598_RD);  
0252:  BCF    F92.3
0254:  BSF    F89.3
....................   output_low(HMF6598_WR);   
0256:  BCF    F92.4
0258:  BCF    F89.4
....................   output_b(byteDC); 
025A:  CLRF   F93
025C:  MOVFF  1D,F8A
....................   output_high(HMF6598_CS1);     
0260:  BCF    F92.2
0262:  BSF    F89.2
.................... } 
0264:  RETLW  00
.................... void    HMF6598_Write_command(char byte_command){ 
....................   output_low(HMF6598_RS);          // Write Command Enabled 
0266:  BCF    F92.0
0268:  BCF    F89.0
....................   HMF6598_OutPort(byte_command); 
026A:  MOVFF  1C,1D
026E:  RCALL  024A
.................... } 
0270:  RETLW  00
.................... void    HMF6598_Write_data(char byte_data){ 
....................   output_high(HMF6598_RS);         // Write data Enabled 
*
031E:  BCF    F92.0
0320:  BSF    F89.0
....................   HMF6598_OutPort(byte_data); 
0322:  MOVFF  17,1D
0326:  RCALL  024A
....................   OffsetX++; 
0328:  INCF   06,F
....................   HMF6598_Gotoxy(OffsetX,CurrentLine); 
032A:  MOVFF  06,18
032E:  MOVFF  04,19
0332:  RCALL  02C2
.................... } 
0334:  RETLW  00
....................  
.................... char    HMF6598_Read_data(){ 
....................  
.................... /*  set_tris_b(0xff); 
....................   output_low(HMF6598_CS1); 
....................   output_high(HMF6598_RS); 
....................   output_low(HMF6598_RD); 
....................   output_high(HMF6598_WR); 
....................   output_high(HMF6598_CS1); 
....................   delay_us(1); 
....................    
....................   output_low(HMF6598_CS1); 
....................   output_high(HMF6598_RS); 
....................   output_low(HMF6598_RD); 
....................   output_high(HMF6598_WR); 
....................   return input_b(); 
....................   output_high(HMF6598_CS1);    */  
....................    
....................   set_tris_b(0xff);     
....................   output_low(HMF6598_CS1); 
....................   output_high(HMF6598_WR); 
....................   output_high(HMF6598_RS); 
....................   output_low(HMF6598_RD); 
....................   output_high(HMF6598_CS1); 
....................   delay_us(1); 
....................   output_low(HMF6598_CS1); 
....................   return input_b(); 
....................   output_high(HMF6598_CS1); 
.................... } 
....................  
.................... void newLine(){ 
....................   if(CurrentLine < 7){  // New Line Command 
*
07B0:  MOVF   04,W
07B2:  SUBLW  06
07B4:  BNC   07D0
....................       HMF6598_Write_command((CurrentLine+1)|0xb0);  // Set Page Address to 0 (0 a 7) 
07B6:  MOVLW  01
07B8:  ADDWF  04,W
07BA:  IORLW  B0
07BC:  MOVWF  16
07BE:  MOVWF  1C
07C0:  RCALL  0266
....................       HMF6598_Write_command(0x00);  // Set LSB for index Column 
07C2:  CLRF   1C
07C4:  RCALL  0266
....................       HMF6598_Write_command(0x10);  // Set MSB for index Column    
07C6:  MOVLW  10
07C8:  MOVWF  1C
07CA:  RCALL  0266
....................       CurrentLine+=1; 
07CC:  MOVLW  01
07CE:  ADDWF  04,F
....................   } 
....................   QuantChrLine = 1; 
07D0:  MOVLW  01
07D2:  MOVWF  05
....................   OffsetX = 0; 
07D4:  CLRF   06
.................... } 
07D6:  GOTO   07E6 (RETURN)
.................... void clear_screen(void) { 
....................    int p, c; 
....................    for(p = 0; p < 8; p++) { 
*
0336:  CLRF   0B
0338:  MOVF   0B,W
033A:  SUBLW  07
033C:  BNC   035C
....................       for(c = 0; c < 128; c++) { 
033E:  CLRF   0C
0340:  MOVF   0C,W
0342:  SUBLW  7F
0344:  BNC   0358
....................          HMF6598_Gotoxy(c,p); 
0346:  MOVFF  0C,18
034A:  MOVFF  0B,19
034E:  RCALL  02C2
....................          HMF6598_Write_data(0x00); 
0350:  CLRF   17
0352:  RCALL  031E
....................       } 
0354:  INCF   0C,F
0356:  BRA    0340
....................    } 
0358:  INCF   0B,F
035A:  BRA    0338
....................    HMF6598_Gotoxy(0,0);    
035C:  CLRF   18
035E:  CLRF   19
0360:  RCALL  02C2
.................... } 
0362:  GOTO   03D4 (RETURN)
.................... void    HMF6598_Gotoxy(int x, int y){ 
*
02C2:  CLRF   1A
....................    int8 OffsetChr = 0; 
....................     
....................    HMF6598_Write_command(0xb0 | y); 
02C4:  MOVF   19,W
02C6:  IORLW  B0
02C8:  MOVWF  1B
02CA:  MOVWF  1C
02CC:  RCALL  0266
....................    HMF6598_Write_command((0x00 | x) & 0x0f); 
02CE:  MOVF   18,W
02D0:  ANDLW  0F
02D2:  MOVWF  1B
02D4:  MOVWF  1C
02D6:  RCALL  0266
....................    HMF6598_Write_command(0x10|(x>>4)); 
02D8:  SWAPF  18,W
02DA:  MOVWF  00
02DC:  MOVLW  0F
02DE:  ANDWF  00,F
02E0:  MOVF   00,W
02E2:  IORLW  10
02E4:  MOVWF  1B
02E6:  MOVWF  1C
02E8:  RCALL  0266
....................     
....................    OffsetChr = (x+1)/6; 
02EA:  MOVLW  01
02EC:  ADDWF  18,W
02EE:  MOVWF  1C
02F0:  MOVWF  1D
02F2:  MOVLW  06
02F4:  MOVWF  1E
02F6:  RCALL  029A
02F8:  MOVFF  01,1A
....................    if((x+1)%6) 
02FC:  MOVLW  01
02FE:  ADDWF  18,W
0300:  MOVWF  1C
0302:  MOVWF  1D
0304:  MOVLW  06
0306:  MOVWF  1E
0308:  RCALL  029A
030A:  MOVF   00,W
030C:  BZ    0310
....................       OffsetChr++;    
030E:  INCF   1A,F
....................    CurrentLine = y; 
0310:  MOVFF  19,04
....................    QuantChrLine = OffsetChr; 
0314:  MOVFF  1A,05
....................    OffsetX = x; 
0318:  MOVFF  18,06
.................... } 
031C:  RETLW  00
.................... void    HMF6598_Printchar(char cvar){ 
....................    int i; 
....................    if (QuantChrLine > 21)   
*
07DA:  MOVF   05,W
07DC:  SUBLW  15
07DE:  BC    07E4
....................        newLine();  
07E0:  BRA    07B0
....................    else 
07E2:  BRA    07E6
....................        QuantChrLine++;     
07E4:  INCF   05,F
....................    if(cvar == 0x20) 
07E6:  MOVF   14,W
07E8:  SUBLW  20
07EA:  BNZ   07FE
....................       for(i=0;i<2;i++) 
07EC:  CLRF   15
07EE:  MOVF   15,W
07F0:  SUBLW  01
07F2:  BNC   07FC
....................          HMF6598_Write_data(0x00); 
07F4:  CLRF   17
07F6:  RCALL  031E
07F8:  INCF   15,F
07FA:  BRA    07EE
....................    else{ 
07FC:  BRA    089E
....................       for(i=0;i<5;i++){ 
07FE:  CLRF   15
0800:  MOVF   15,W
0802:  SUBLW  04
0804:  BNC   089E
....................          if (cvar < 0x53){ 
0806:  MOVF   14,W
0808:  SUBLW  52
080A:  BNC   0856
....................             if(TEXT[cvar-0x20][i])          
080C:  MOVLW  20
080E:  SUBWF  14,W
0810:  MULLW  05
0812:  MOVF   FF3,W
0814:  CLRF   17
0816:  MOVWF  16
0818:  CLRF   03
081A:  MOVF   15,W
081C:  ADDWF  16,W
081E:  MOVWF  01
0820:  MOVF   17,W
0822:  ADDWFC 03,F
0824:  MOVF   01,W
0826:  CALL   0004
082A:  MOVWF  01
082C:  MOVF   01,F
082E:  BZ    0854
....................                HMF6598_Write_data(TEXT[cvar-0x20][i]);       
0830:  MOVLW  20
0832:  SUBWF  14,W
0834:  MULLW  05
0836:  MOVF   FF3,W
0838:  CLRF   17
083A:  MOVWF  16
083C:  CLRF   03
083E:  MOVF   15,W
0840:  ADDWF  16,W
0842:  MOVWF  01
0844:  MOVF   17,W
0846:  ADDWFC 03,F
0848:  MOVF   01,W
084A:  CALL   0004
084E:  MOVWF  16
0850:  MOVWF  17
0852:  RCALL  031E
....................          } 
....................          else { 
0854:  BRA    089A
....................             if(TEXT2[cvar-0x53][i])                
0856:  MOVLW  53
0858:  SUBWF  14,W
085A:  MULLW  05
085C:  MOVF   FF3,W
085E:  CLRF   17
0860:  MOVWF  16
0862:  CLRF   03
0864:  MOVF   15,W
0866:  ADDWF  16,W
0868:  MOVWF  01
086A:  MOVF   17,W
086C:  ADDWFC 03,F
086E:  MOVF   01,W
0870:  RCALL  0114
0872:  MOVWF  01
0874:  MOVF   01,F
0876:  BZ    089A
....................                HMF6598_Write_data(TEXT2[cvar-0x53][i]);                
0878:  MOVLW  53
087A:  SUBWF  14,W
087C:  MULLW  05
087E:  MOVF   FF3,W
0880:  CLRF   17
0882:  MOVWF  16
0884:  CLRF   03
0886:  MOVF   15,W
0888:  ADDWF  16,W
088A:  MOVWF  01
088C:  MOVF   17,W
088E:  ADDWFC 03,F
0890:  MOVF   01,W
0892:  RCALL  0114
0894:  MOVWF  16
0896:  MOVWF  17
0898:  RCALL  031E
....................          } 
....................       } 
089A:  INCF   15,F
089C:  BRA    0800
....................    } 
....................    HMF6598_Write_data(0x00); 
089E:  CLRF   17
08A0:  RCALL  031E
.................... } 
08A2:  RETLW  00
.................... void HMF6598_PutPixel(int x, int y, int1 COLOR){ 
....................    char BytePlot = 0, tempByte; 
....................    if((x > 127)||(y > 63)) 
....................       return; 
....................    BytePlot |= 1; 
....................    BytePlot<<=(y%8); 
....................    tempByte = BytePlot; 
....................    HMF6598_Gotoxy(x,(y/8)); 
....................    BytePlot|=HMF6598_Read_data(); 
....................    if(COLOR == OFF) 
....................       BytePlot-=tempByte; 
....................    HMF6598_Write_data(BytePlot); 
.................... } 
....................  
.................... void HMF6598_circle(int x, int y, int radius, int1 fill, int1 COLOR){ 
....................    signed int a, b, P; 
....................    a = 0; 
....................    b = radius; 
....................    P = 1 - radius; 
....................    do{ 
....................       if(fill){ 
....................          HMF6598_line(x-a, y+b, x+a, y+b, color); 
....................          HMF6598_line(x-a, y-b, x+a, y-b, color); 
....................          HMF6598_line(x-b, y+a, x+b, y+a, color); 
....................          HMF6598_line(x-b, y-a, x+b, y-a, color); 
....................       } 
....................       else{ 
....................          HMF6598_PutPixel(a+x, b+y, color); 
....................          HMF6598_PutPixel(b+x, a+y, color); 
....................          HMF6598_PutPixel(x-a, b+y, color); 
....................          HMF6598_PutPixel(x-b, a+y, color); 
....................          HMF6598_PutPixel(b+x, y-a, color); 
....................          HMF6598_PutPixel(a+x, y-b, color); 
....................          HMF6598_PutPixel(x-a, y-b, color); 
....................          HMF6598_PutPixel(x-b, y-a, color); 
....................       } 
....................       if(P < 0) 
....................          P+= 3 + 2*a++; 
....................       else 
....................          P+= 5 + 2*(a++ - b--); 
....................     } while(a <= b); 
.................... } 
....................  
.................... void HMF6598_line(int x1, int y1, int x2, int y2, int1 COLOR){ 
....................    signed int  x, y, addx, addy, dx, dy; 
....................    signed long P; 
....................    int i; 
....................    dx = abs((signed int)(x2 - x1)); 
....................    dy = abs((signed int)(y2 - y1)); 
....................    x = x1; 
....................    y = y1; 
....................  
....................    if(x1 > x2) 
....................       addx = -1; 
....................    else 
....................       addx = 1; 
....................    if(y1 > y2) 
....................       addy = -1; 
....................    else 
....................       addy = 1; 
....................    if(dx >= dy){ 
....................       P = 2*dy - dx; 
....................       for(i=0; i<=dx; ++i){ 
....................          HMF6598_PutPixel(x, y, COLOR); 
....................          if(P < 0){ 
....................             P += 2*dy; 
....................             x += addx; 
....................          } 
....................          else{ 
....................             P += 2*dy - 2*dx; 
....................             x += addx; 
....................             y += addy; 
....................          } 
....................       } 
....................    } 
....................    else{ 
....................       P = 2*dx - dy; 
....................       for(i=0; i<=dy; ++i){ 
....................          HMF6598_PutPixel(x, y, COLOR); 
....................  
....................          if(P < 0){ 
....................             P += 2*dx; 
....................             y += addy; 
....................          } 
....................          else{ 
....................             P += 2*dx - 2*dy; 
....................             x += addx; 
....................             y += addy; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... int16 distancia, tempo; 
....................    #define TRIG pin_D7  
....................    #define ECHO pin_D5  
....................  
.................... void main() {  
*
0974:  CLRF   FF8
0976:  BCF    FD0.7
0978:  CLRF   FEA
097A:  CLRF   FE9
097C:  CLRF   04
097E:  CLRF   05
0980:  CLRF   06
0982:  MOVF   FC1,W
0984:  ANDLW  C0
0986:  IORLW  0F
0988:  MOVWF  FC1
098A:  MOVLW  07
098C:  MOVWF  FB4
....................    HMF6598_InitLcd(); 
098E:  BRA    0366
....................    delay_ms(1000);                              // Boot-up delay, for troubleshooting  
0990:  MOVLW  04
0992:  MOVWF  0B
0994:  MOVLW  FA
0996:  MOVWF  0C
0998:  RCALL  0272
099A:  DECFSZ 0B,F
099C:  BRA    0994
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);     // initiating timer  
099E:  MOVLW  B5
09A0:  MOVWF  FCD
....................  
....................    while(true){  
....................       output_high(trig);                         // ping the sonar  
09A2:  BCF    F95.7
09A4:  BSF    F8C.7
....................       delay_us(20);                            // sending 20us pulse  
09A6:  MOVLW  4F
09A8:  MOVWF  00
09AA:  DECFSZ 00,F
09AC:  BRA    09AA
09AE:  BRA    09B0
....................       output_low(trig);  
09B0:  BCF    F95.7
09B2:  BCF    F8C.7
....................       while(!input(ECHO)){}                       // wait for high state of echo pin  
09B4:  BSF    F95.5
09B6:  BTFSC  F83.5
09B8:  BRA    09BC
09BA:  BRA    09B4
....................       set_timer1(0);                           // setting timer zero  
09BC:  CLRF   FCF
09BE:  CLRF   FCE
....................        
....................       while(input(ECHO)){}                       // Wait for high state of echo pin 
09C0:  BSF    F95.5
09C2:  BTFSS  F83.5
09C4:  BRA    09C8
09C6:  BRA    09C0
....................         
....................       tempo=get_timer1();                       // Getting the time  
09C8:  MOVF   FCE,W
09CA:  MOVWF  09
09CC:  MOVFF  FCF,0A
....................       distancia=tempo*0.0162 + 1.093 ;            // Calculating the distance                          
09D0:  MOVFF  0A,0C
09D4:  MOVFF  09,0B
09D8:  BRA    03DE
09DA:  MOVFF  03,0E
09DE:  MOVFF  02,0D
09E2:  MOVFF  01,0C
09E6:  MOVFF  00,0B
09EA:  MOVLW  DD
09EC:  MOVWF  12
09EE:  MOVLW  B5
09F0:  MOVWF  11
09F2:  MOVLW  04
09F4:  MOVWF  10
09F6:  MOVLW  79
09F8:  MOVWF  0F
09FA:  BRA    0416
09FC:  MOVFF  00,0B
0A00:  MOVFF  01,0C
0A04:  MOVFF  02,0D
0A08:  MOVFF  03,0E
0A0C:  BCF    FD8.1
0A0E:  MOVFF  03,12
0A12:  MOVFF  02,11
0A16:  MOVFF  01,10
0A1A:  MOVFF  00,0F
0A1E:  MOVLW  6D
0A20:  MOVWF  16
0A22:  MOVLW  E7
0A24:  MOVWF  15
0A26:  MOVLW  0B
0A28:  MOVWF  14
0A2A:  MOVLW  7F
0A2C:  MOVWF  13
0A2E:  BRA    050A
0A30:  MOVFF  03,0E
0A34:  MOVFF  02,0D
0A38:  MOVFF  01,0C
0A3C:  MOVFF  00,0B
0A40:  BRA    0776
0A42:  MOVFF  02,08
0A46:  MOVFF  01,07
....................       //printf(LCD_PUTC, "\fTiempo :%Lu \nDistancia = %Lu",time,distance); // Putting the time and distance to the LCD  
....................       delay_ms(100);  
0A4A:  MOVLW  64
0A4C:  MOVWF  0C
0A4E:  RCALL  0272
....................        
....................       HMF6598_Gotoxy(0,0); 
0A50:  CLRF   18
0A52:  CLRF   19
0A54:  RCALL  02C2
....................       printf(HMF6598_Printchar, "Tempo :%Lu      ",tempo);       
0A56:  MOVLW  00
0A58:  MOVWF  FF6
0A5A:  MOVLW  02
0A5C:  MOVWF  FF7
0A5E:  MOVLW  07
0A60:  MOVWF  0B
0A62:  RCALL  08A4
0A64:  MOVLW  10
0A66:  MOVWF  FE9
0A68:  MOVFF  0A,0C
0A6C:  MOVFF  09,0B
0A70:  RCALL  08C2
0A72:  MOVLW  0A
0A74:  MOVWF  FF6
0A76:  MOVLW  02
0A78:  MOVWF  FF7
0A7A:  MOVLW  06
0A7C:  MOVWF  0B
0A7E:  RCALL  08A4
....................        
....................       HMF6598_Gotoxy(0,1); 
0A80:  CLRF   18
0A82:  MOVLW  01
0A84:  MOVWF  19
0A86:  RCALL  02C2
....................       printf(HMF6598_Printchar, "Distancia = %Lu       ",distancia);       
0A88:  MOVLW  12
0A8A:  MOVWF  FF6
0A8C:  MOVLW  02
0A8E:  MOVWF  FF7
0A90:  MOVLW  0C
0A92:  MOVWF  0B
0A94:  RCALL  08A4
0A96:  MOVLW  10
0A98:  MOVWF  FE9
0A9A:  MOVFF  08,0C
0A9E:  MOVFF  07,0B
0AA2:  RCALL  08C2
0AA4:  MOVLW  21
0AA6:  MOVWF  FF6
0AA8:  MOVLW  02
0AAA:  MOVWF  FF7
0AAC:  MOVLW  07
0AAE:  MOVWF  0B
0AB0:  RCALL  08A4
....................    }  
0AB2:  BRA    09A2
.................... }  
0AB4:  SLEEP 

Configuration Fuses:
   Word  1: CE23   PLL4 CPUDIV1 USBDIV HSPLL FCMEN IESO
   Word  2: 1E38   PUT NOBROWNOUT BORV20 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICPRT NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
